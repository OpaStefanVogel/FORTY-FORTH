<?xml version="1.0" encoding="utf-8" ?>
<?xml-stylesheet type="text/xsl" href="R00.xsl" ?>
<!DOCTYPE los SYSTEM "R00.dtd">
<los>

<step>Step 6</step>

<pr>Umstapeln

Übliche FORTH-Worte zum Umstapeln sind

<Maschinencode>PD     FORTH-Wort  Stapeldiagramm
B412    SWAP          ( a b --> b a )
B502    OVER          ( a b --> a b a )
B501    DUP           ( a --> a a )
B434    ROT           ( a b c --> b c a )
B300    DROP          ( a --> )
B43C    2SWAP         ( a b c d --> c d a b )
B60C    2OVER         ( a b c d --> a b c d a b )
B603    2DUP          ( a b --> a b a b )
B200    2DROP         ( a b --> )</Maschinencode>

2ROT habe ich weggelassen, weil dafür mehr als vier obere Stapeleinträge verarbeitet werden. Anstelle nun jedes einzelne FORTH-Wort extra zu programmieren, habe ich versucht, das Umstapeln mit in PD zu codieren, siehe oben Tabellenspalte PD sowie <code>git diff</code>. So hat man mit nur einer Programmfunktion auch noch weitere Umstapelmöglichkeiten, zum Beispiel 

B6A9   für          ( a b c d --> a b a c a d ). 

Hier ein Beispielprogramm, <i>auf den Stapel 4, 3, 2, 1 der Reihe nach alle Worte zum Umstapeln anwenden.</i></pr>
<ptable>
  <tr><td> 0000 </td><td> 0004 </td><td> 4         </td><td> 4          </td><td>1</td></tr>
  <tr><td> 0001 </td><td> 0003 </td><td> 3         </td><td> 4 3        </td><td>2</td></tr>
  <tr><td> 0002 </td><td> 0002 </td><td> 2         </td><td> 4 3 2      </td><td>3</td></tr>
  <tr><td> 0003 </td><td> 0001 </td><td> 1         </td><td> 4 3 2 1    </td><td>4</td></tr>
  <tr><td> 0004 </td><td> B412 </td><td> BEGIN SWAP</td><td> 4 3 1 2    </td><td>4</td></tr>
  <tr><td> 0005 </td><td> B502 </td><td> OVER      </td><td> 4 3 1 2 1  </td><td>5</td></tr>
  <tr><td> 0006 </td><td> B501 </td><td> DUP       </td><td> 4 3 1 2 1 1</td><td>6</td></tr>
  <tr><td> 0007 </td><td> B200 </td><td> 2DROP     </td><td> 4 3 1 2    </td><td>4</td></tr>
  <tr><td> 0008 </td><td> B434 </td><td> ROT       </td><td> 4 1 2 3    </td><td>4</td></tr>
  <tr><td> 0009 </td><td> B43C </td><td> 2SWAP     </td><td> 2 3 4 1    </td><td>4</td></tr>
  <tr><td> 000A </td><td> B60C </td><td> 2OVER     </td><td> 2 3 4 1 2 3</td><td>6</td></tr>
  <tr><td> 000B </td><td> B603 </td><td> 2DUP      </td><td> 2 3 4 1 2 3 2 3</td><td>8</td></tr>
  <tr><td> 000C </td><td> B200 </td><td> 2DROP     </td><td> 2 3 4 1 2 3</td><td>6</td></tr>
  <tr><td> 000D </td><td> B300 </td><td> DROP      </td><td> 2 3 4 1 2  </td><td>5</td></tr>
  <tr><td> 000E </td><td> B300 </td><td> DROP      </td><td> 2 3 4 1    </td><td>4</td></tr>
  <tr><td> 000F </td><td> 8FF4 </td><td> AGAIN     </td><td> 2 3 4 1    </td><td>4</td></tr>
  </ptable>

<p>Da dieses Programm keine extra Ausgabe enthält, ist ausnahmsweise der Ausgabeport LEDS direkt mit der Ausgabe des obersten Stapeleintrages A_SIM verknüpft.</p>

<Terminal_1>
  <li> git checkout Step_6 </li>
  <li> git diff <diff>Step_5...Step_6</diff> </li>
  </Terminal_1>

<Tcl_Console>
  <li> close_sim -force -quiet </li>
  <li> launch_simulation </li>
  <li> run 340 ns </li>
  </Tcl_Console>

<pr><favicon/> Ergebnis: 
ab Zeitpunkt in ns     Wert von D,  C,  B,  A=LEDS
     0                          U   U   U   U
    20                          0   0   0   0
    40                          0   0   0   4
    60                          0   0   4   3
    80                          0   4   3   2
   100                          4   3   2   1
   120                          4   3   1   2
   140                          3   1   2   1
   160                          1   2   1   1
   180                          4   3   1   2
   200                          4   1   2   3
   220                          2   3   4   1
   240                          4   1   2   3
   260                          2   3   2   3
   280                          4   1   2   3
   300                          3   4   1   2
   320                          2   3   4   1
  </pr>

<weiter /><a href="R07_weitere_Rechenoperationen.xml">R07 weitere Rechenoperationen</a>.

<svg_path schnips="0 1 0 100"/>
</los>
