( : . N. ; in DEMO.TXT war Unfug, war nur, um Step_11 Simulation zu ermöglichen )
( deshalb muss ich das jetzt mühsam rückgängig machen:

( nach RESET zuerst FFINIT.TXT und FFINIT1SMUL1.TXT neu laden oder
2 2 * DUP * BASE ! ( HEX )
7 ' NUMBER ' EXPECT 1 + @ OVER 1 + ! ! ( original NUMBER
B501 ' LIT, ! 3FFF ' LIT, 1 + !        ( original LIT,
FORGET NLIT, 
( --- ohne dem geht nix





( jetzt kann es weitergehen mit neuen Wortdefinitionen:




: OBJGGT ( obj b --> ggt )
  OVER OBJ? IF
    SWAP ( b a  ( FORALL ) 
    ZERLEG 3FFF AND                ( b adr n
      BEGIN DUP WHILE ROT ROT SWAP ( n adr b
        OVER @ SWAP RECURSE             ( n adr b'
        SWAP 1 + ROT 1 -         ( b' adr+1 n-1
        REPEAT                     ( ggt adr+n 0
    2DROP                          ( ggt
    ELSE NGGT END_IF
  ;

: OBJ/GGT ( obj ggt --> obj/ggt )
  OVER OBJ? IF OVER >R
    SWAP ( b a  ( FORALL ) 
    ZERLEG 3FFF AND                ( b adr n
      BEGIN DUP WHILE ROT ROT SWAP ( n adr b
        2DUP OVER @ SWAP RECURSE SWAP !       ( n adr b
        SWAP 1 + ROT 1 -         ( b adr+1 n-1
        REPEAT                     ( b adr+n 0
    2DROP DROP R>                  ( b
    ELSE N/ END_IF
  ;

: OBJ+0 ( obj --> obj+0 )
  DUP OBJ? IF DUP >R
    ZERLEG 3FFF AND                ( adr n
      BEGIN DUP WHILE SWAP         ( n adr
        DUP @ ( CR OVER M. DUP M. ERGEBNIS ? KEY DROP ) RECURSE OVER !       ( n adr
        1 + SWAP 1 -             ( adr+1 n-1
        REPEAT                     ( adr+n 0
    2DROP R>                       ( obj
    ELSE A+0 END_IF
  ;

: OBJK ( obj b --> obj/ggt b/ggt )
  NEBENRECHNUNG >R
  2DUP OBJGGT SWAP OVER 2SWAP OBJ/GGT ROT ROT OBJ/GGT 
  SWAP OBJ+0 SWAP A+0 R> HAUPTRECHNUNG SWAP OBJ+0 SWAP A+0
  ;

: OBJDUMP ( obj --> )
  DUP OBJ? IF
    ZERLEG 3FFF AND                ( adr n
      BEGIN DUP WHILE SWAP         ( n adr
        CR OVER . DUP . DUP @ DUP . DUP O. RECURSE          ( n adr
        1 + SWAP 1 -             ( adr+1 n-1
        REPEAT                     ( adr+n 0
    2DROP                          ( 
    ELSE ." ZAHL " . END_IF
  ;

   

[ 12 18 1B ] 12 OBJGGT O.
[ [ 12 18 1B ] [ 1E 21 24 ] ] 12 OBJGGT O.
[ 12 18 1B ] ZERLEG . .

[ 12 18 1B ] 3 OBJ/GGT O.
[ [ 12 18 1B ] [ 1E 21 24 ] ] 3 OBJ/GGT O.

( 2DUP OBJGGT N.

[ 12 18 1B ] 12 OBJK SWAP O. N.
[ [ 12 18 1B ] [ 1E 21 24 ] ] 12 OBJK SWAP O. N.

( 2DUP OBJK OVER O. DUP N.

[ 12 18 1B ] OBJ+0 O.

[ 12 18 1B ] OBJDUMP
[ [ 12 18 1B ] [ 1E 21 24 ] ] OBJDUMP

: INVERTIEREN ( matrix dim --> invmat nenner )
  ( L0=mat L1=N L2=i L3=j L4=k L5=Y L6=Z L7=alternenner )
  8 LOCAL
  L1 ! L0 ! 0 L5 ! 0 L6 !
  L0 @ 1 ( mat nenner )
  L1 @ L2 ! BEGIN -1 L2 +!
    L7 ! ( mat )
    L0 @ L2 @ L L2 @ L ( mat neuernenner )
    L1 @ L3 ! BEGIN -1 L3 +!
      OVER L3 @ L L2 @ L L5 @ L3 @ ROT H L5 !
      OVER L2 @ L L3 @ L L6 @ L3 @ ROT H L6 !
      L3 @ 0= UNTIL
    L5 @ L2 @ L L7 @ N+ L5 @ L2 @ ROT H L5 !
    L6 @ L2 @ L L7 @ N- L6 @ L2 @ ROT H L6 !
    L1 @ L3 ! BEGIN -1 L3 +!
      OVER L3 @ L ( mat nenner mat[L3] )
      L1 @ L4 ! BEGIN -1 L4 +!
        NEBENRECHNUNG ROT ROT SWAP ( mat erg mat[L3] nenner )
        OVER L4 @ L OVER N*
        L5 @ L3 @ L L6 @ L4 @ L N* N-
        L7 @ N/ ( mat erg mat[L3] nenner bijneu )
        2SWAP SWAP ( mat nenner bijneu mat[L3] erg )
        HAUPTRECHNUNG SWAP A+0 ( mat nenner mat[L3] bijneu+0 )
        SWAP L4 @ ROT H ( mat nenner mat[L3]neu )
        L4 @ 0= UNTIL
      ROT L3 @ ROT H SWAP ( matneu nenner )
      L3 @ 0= UNTIL
    ( RECHENBLOCK )
(    CR OVER OBJDUMP DUP . DUP M.
(    CR ." ERGEBNIS= " ERGEBNIS ?
(    CR CR OVER . DUP . 
    OBJK 
(    CR OVER . DUP . ." durch " 
    L2 @ 0= UNTIL
  END_LOCAL
  ;

INIT
[ [ 1 1 1 1 ]
  [ 2 1 N^ 2 2 N^ 2 3 N^ 2 4 N^ ]
  [ 3 1 N^ 3 2 N^ 3 3 N^ 3 4 N^ ]
  [ 4 1 N^ 4 2 N^ 4 3 N^ 4 4 N^ ]
  ]
4 INVERTIEREN
OVER O. DUP N.
ERGEBNIS ?
( herauskommen soll
( OVER O. DUP N. [ [ 60 -48 20 -6 ] [ -68 72 -38 B ] [ 24 -30 1C -6 ] [ -4 6 -4 1 ] ] 18 ok

INIT
[ [ 1 1 1 1 1 ]
  [ 2 1 N^ 2 2 N^ 2 3 N^ 2 4 N^ 2 5 N^ ]
  [ 3 1 N^ 3 2 N^ 3 3 N^ 3 4 N^ 3 5 N^ ]
  [ 4 1 N^ 4 2 N^ 4 3 N^ 4 4 N^ 4 5 N^ ]
  [ 5 1 N^ 5 2 N^ 5 3 N^ 5 4 N^ 5 5 N^ ]
  ]
5 INVERTIEREN
OVER O. DUP N.
ERGEBNIS ?
( herauskommen soll
( OVER O. DUP N. [ [ 258 -258 190 -96 18 ] [ -302 42E -30C 131 -32 ] ... [ 5 -A A -5 1 ] ] 78 ok

INIT
[ [ 1 1 1 1 1 1 ]
  [ 2 1 N^ 2 2 N^ 2 3 N^ 2 4 N^ 2 5 N^ 2 6 N^ ]
  [ 3 1 N^ 3 2 N^ 3 3 N^ 3 4 N^ 3 5 N^ 3 6 N^ ]
  [ 4 1 N^ 4 2 N^ 4 3 N^ 4 4 N^ 4 5 N^ 4 6 N^ ]
  [ 5 1 N^ 5 2 N^ 5 3 N^ 5 4 N^ 5 5 N^ 5 6 N^ ]
  [ 6 1 N^ 6 2 N^ 6 3 N^ 6 4 N^ 6 5 N^ 6 6 N^ ]
  ]
6 INVERTIEREN
OVER O. DUP N.
ERGEBNIS ?
( herauskommen soll
( OVER O. DUP N. [ [ -10E0 1518 -12C0 A8C -360 78 ] ... [ 6 -F 14 -F 6 -1 ] ] -2D0 ok

INIT
[ [ 1 1 1 1 1 1 1 ]
  [ 2 1 N^ 2 2 N^ 2 3 N^ 2 4 N^ 2 5 N^ 2 6 N^ 2 7 N^ ]
  [ 3 1 N^ 3 2 N^ 3 3 N^ 3 4 N^ 3 5 N^ 3 6 N^ 3 7 N^ ]
  [ 4 1 N^ 4 2 N^ 4 3 N^ 4 4 N^ 4 5 N^ 4 6 N^ 4 7 N^ ]
  [ 5 1 N^ 5 2 N^ 5 3 N^ 5 4 N^ 5 5 N^ 5 6 N^ 5 7 N^ ]
  [ 6 1 N^ 6 2 N^ 6 3 N^ 6 4 N^ 6 5 N^ 6 6 N^ 6 7 N^ ]
  [ 7 1 N^ 7 2 N^ 7 3 N^ 7 4 N^ 7 5 N^ 7 6 N^ 7 7 N^ ]
  ]
7 INVERTIEREN
OVER O. DUP N.
ERGEBNIS ?
( herauskommen soll 
( OVER O. DUP N. [ [ -89D0 CEB8 -E5B0 AC44 -52B0 16F8 -2D0 ]  ... [ -7 15 -23 23 -15 7 -1 ] ] -13B0 ok


