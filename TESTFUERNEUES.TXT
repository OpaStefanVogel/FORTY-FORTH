( : . N. ; in DEMO.TXT war Unfug, war nur, um Step_11 Simulation zu ermöglichen )
( deshalb muss ich das jetzt mühsam rückgängig machen:

( nach RESET zuerst FFINIT.TXT und FFINIT1SMUL1.TXT neu laden oder
2 2 * DUP * BASE ! ( HEX )
7 ' NUMBER ' EXPECT 1 + @ OVER 1 + ! ! ( original NUMBER
B501 ' LIT, ! 3FFF ' LIT, 1 + !        ( original LIT,
FORGET NLIT, 
( --- ohne dem geht nix





( jetzt kann es weitergehen mit neuen Wortdefinitionen:


REPLACE: A+0 ( a --> a+0 ) 
  OPERAND1 !
  OPERAND1 OPERAND->SLX
  DUP OPERAND1 - IF
    OVER ERGEBNIS @ 1+ SWAP MOVE ( SPEICHERHOL will hier nicht gehen )
    ERGEBNIS @ 1+ OVER 1+ ERGEBNIS +! ( noch nicht ganz )
    ERGEBNIS @ SPEICHERENDE @ LT NOT IF 0369 ERROR END_IF ( da ist es passiert )
    SLX->ERGEBNIS
    ELSE 2DROP DROP OPERAND1 @ END_IF
  ;

: OBJ+0 ( obj --> obj+0 )
  DUP OBJ? IF DUP >R
    ZERLEG 3FFF AND          ( adr n )
    SWAP OVER + -1 + SWAP    ( eadr-1 n )
      BEGIN DUP WHILE SWAP   ( n eadr-1 )
        DUP @ RECURSE OVER ! ( n eadr-1 )
        -1 + SWAP -1 +       ( eadr-1 n-1 )
        REPEAT               ( adr-1 0 )
    2DROP R>                 ( obj )
    ELSE A+0 END_IF
  ;

[ 12 18 1B ] OBJ+0 O.

: OBJDUMP ( obj --> )
  DUP OBJ? IF
    ZERLEG 3FFF AND                ( adr n )
      BEGIN DUP WHILE SWAP         ( n adr )
        CR OVER . DUP . DUP @ 
        DUP . DUP ABS 4000 LT IF -1 . -1 . ELSE DUP ABS ZERLEG . . END_IF
        DUP O. RECURSE             ( n adr )
        1 + SWAP -1 +              ( adr+1 n-1 )
        REPEAT                     ( adr+n 0 )
    2DROP                          ( )
    ELSE DROP END_IF
  ;

[ 12 18 1B ] OBJDUMP
[ [ 12 18 1B ] [ 1E 21 24 ] ] OBJDUMP

: INVERTIEREN ( matrix dim --> invmat nenner )
  ( L0=nr L1=N L2=i L3=j L4=k L5=Y L6=Z L7=alternenner )
  8 LOCAL NEBENRECHNUNG L0 !
  L1 ! 1 ( mat nenner )
  L1 @ L2 ! BEGIN -1 L2 +! ( CR L2 ? ERGEBNIS ?
    L7 ! ( mat ) 0 L5 ! 0 L6 !
    DUP L2 @ L L2 @ L ( mat neuernenner )
    L1 @ L3 ! BEGIN -1 L3 +!
      OVER L3 @ L L2 @ L L5 @ L3 @ ROT H L5 !
      OVER L2 @ L L3 @ L L6 @ L3 @ ROT H L6 !
      L3 @ 0= UNTIL
    L5 @ L2 @ L L7 @ N+ L5 @ L2 @ ROT H L5 !
    L6 @ L2 @ L L7 @ N- L6 @ L2 @ ROT H L6 !
    L1 @ L3 ! BEGIN -1 L3 +!
      OVER L3 @ L ( mat nenner mat[L3] )
      L1 @ L4 ! BEGIN -1 L4 +! ( CR L3 ? L4 ? ERGEBNIS ?
        NEBENRECHNUNG ROT ROT SWAP ( mat erg mat[L3] nenner )
        OVER L4 @ L OVER N*
        L5 @ L3 @ L L6 @ L4 @ L N* N-
        L7 @ N/ ( mat erg mat[L3] nenner bijneu )
        2SWAP SWAP ( mat nenner bijneu mat[L3] erg )
        HAUPTRECHNUNG SWAP A+0 ( mat nenner mat[L3] bijneu+0 )
        SWAP L4 @ ROT H ( mat nenner mat[L3]neu )
        L4 @ 0= UNTIL
      ROT L3 @ ROT H SWAP ( matneu nenner )
      L3 @ 0= UNTIL
    A+0 ( verschiebt nenner hinter matneu )
    ( RECHENBLOCK )
    CR ." vor 1. OBJ+0 " ERGEBNIS ? ( OVER OBJDUMP DUP N. DUP ABS .
    L0 @ HAUPTRECHNUNG SWAP OBJ+0 SWAP A+0
    ." nach 1. OBJ+0 " ERGEBNIS ? ( OVER OBJDUMP DUP N. DUP ABS .
    L2 @ 0= UNTIL
  END_LOCAL
  ;

: VANDERMONDEMATRIX ( n --> mat )
  3 LOCAL
  L0 !
  0 
  L0 @ L1 ! BEGIN L1 @ DUP WHILE 1 - L1 !
    L1 @ G
    L0 @ L2 ! BEGIN L2 @ DUP WHILE 1 - L2 !
      L2 @ L1 @ 1 + L2 @ 1 + N^ 
      H
      REPEAT DROP
    H
    REPEAT DROP
  END_LOCAL
  ;

( 4 VANDERMONDEMATRIX DUP O.

INIT
4 VANDERMONDEMATRIX
4 INVERTIEREN
OVER O. DUP N.
ERGEBNIS ?
( herauskommen soll
( OVER O. DUP N. [ [ 60 -48 20 -6 ] [ -68 72 -38 B ] [ 24 -30 1C -6 ] [ -4 6 -4 1 ] ] 18 ok

INIT
5 VANDERMONDEMATRIX
5 INVERTIEREN
OVER O. DUP N.
ERGEBNIS ?
( herauskommen soll
( OVER O. DUP N. [ [ 258 -258 190 -96 18 ] [ -302 42E -30C 131 -32 ] ... [ 5 -A A -5 1 ] ] 78 ok

INIT
6 VANDERMONDEMATRIX
6 INVERTIEREN
OVER O. DUP N.
ERGEBNIS ?
( herauskommen soll
( OVER O. DUP N. [ [ -10E0 1518 -12C0 A8C -360 78 ] ... [ 6 -F 14 -F 6 -1 ] ] -2D0 ok

INIT
7 VANDERMONDEMATRIX
ERGEBNIS ?
7 INVERTIEREN
OVER O. DUP N.
ERGEBNIS ?
( herauskommen soll 
( OVER O. DUP N. [ [ -89D0 CEB8 -E5B0 AC44 -52B0 16F8 -2D0 ]  ... [ -7 15 -23 23 -15 7 -1 ] ] -13B0 ok

INIT
8 VANDERMONDEMATRIX
ERGEBNIS ?
8 INVERTIEREN
OVER O. DUP N.
ERGEBNIS ?
( herauskommen soll 
( OVER O. DUP N. [ [ 4EC00 -89D00 B7C00 -AC440 6E400 -2DF00 B400 -13B0 ] ... [ -( 1C -38 46 -38 1C -8 1 ] ] 9D80 ok

INIT
9 VANDERMONDEMATRIX
ERGEBNIS ?
9 INVERTIEREN
OVER O. DUP N.
ERGEBNIS ?
( herauskommen soll 
( OVER O. DUP N. [ [ 31D580 -63AB00 9B0A00 -AE6B40 8B8900 -4D8500 1C7A00 -63AB0 9D80 ] ... [ 9 -24 54 -7E 7E -54 24 -9 1 ] ] 58980 ok

INIT
0A VANDERMONDEMATRIX
ERGEBNIS ?
0A INVERTIEREN
OVER O. DUP N.
ERGEBNIS ?
( herauskommen soll 
( OVER O. DUP N. [ [ -229B600 4DDD980 -8A6D800 B5AFB80 ... -D2 78 -2D A -1 ] ] -375F00 ok

INIT
0B VANDERMONDEMATRIX
ERGEBNIS ?
0B INVERTIEREN
OVER O. DUP N.
ERGEBNIS ?
( herauskommen soll 
( OVER O. DUP N. [ [ -1A2BE700 416DC180 -82DB8300 ... -14A A5 -37 B -1 ] ] -2611500 ok

INIT
0C VANDERMONDEMATRIX
ERGEBNIS ?
( 0C INVERTIEREN OVER O. DUP N.
ERGEBNIS ?
( herauskommen soll 
( OVER O. DUP N. [ [ 1569BD000 -3AE2C7C00 82DB83000 ... -318 1EF -DC 42 -C 1 ] ] 1C8CFC00 ok



INIT
[ [ 112  431  199 764 987 434 ]
  [ 543 45 33 41 789 566 ]
  [ 543 145 33 42 789 566 ]
  [ 875 687 098 675 677 574 ]
  [ 875 66B 0987 675 678 634 ]
  [ 454 33 555 934 655 633 ]
  ] 
DUP O.
6 INVERTIEREN ( mat dim --> invmat nenner )
OVER O.
DUP O.


