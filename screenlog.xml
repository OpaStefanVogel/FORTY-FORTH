<?xml version="1.0" encoding="utf-8" ?> 
<?xml-stylesheet type="text/xsl" href="INIT.xsl" ?> 
<!DOCTYPE INIT SYSTEM "INIT.DTD"> 
<INIT> 
<AXIOME> 
<sekt inhalt="Axiome (sie enthalten Vorwärtsreferenzen und sind deshalb separat zusammengefasst)"> 
<sekt inhalt="vorab der Ablauf, was tun, wenn diese Axiome geändert werden müssen"> 
( wenn die Axiome so bleiben wie sie sind, ganz normal 1x hintereinanderweg compilieren ) <ok></ok>
( wenn die Axiome verändert werden sollen, dann ) <ok></ok>
  ( zuerst RESET und 1x die ursprünglichen Axiome laden ) <ok></ok>
  ( anschließend die neuen Axiome compilieren, so: ) <ok></ok>
    ( HERE 100 + DPMERK ! 3400 BANF ! ) <ok></ok>
    ( 2x neue Axiome compilieren <REF1/> ) <ok></ok>
    ( 0020 DPMERK ! 3000 BANF ! ) <ok></ok>
    ( 2x neue Axiome compilieren <REF1/> nochmal ) <ok></ok>
    ( danach alles, was nach den AXIOMEN folgt, 1x compilieren ) <ok></ok>
  ( bei verzwickten Veränderungen kann es vorkommen, ) <ok></ok>
  ( dass noch weitere Zwischenschritte eingefügt werden müssen. ) <ok></ok>
</sekt> 
 <ok></ok>
<sekt inhalt="Anfangszustand so herstellen wie zum Recompilieren benötigt"> 
( zuerst alles Notwendige wieder auf Ausgangszustand schalten ) <ok></ok>
2 2 M* DUP M* BASE !           ( HEX ) <ok></ok>
DPMERK @ DP ! BANF @ BZEIG ! ( DP und BZEIG auf Anfangswerte zurücksetzen ) <ok></ok><fl>1177 36E6 </fl><fr>0020 3000 </fr>
</sekt> 
 <ok></ok>
<sekt inhalt="so, mit irgendwas muss das Compilieren losgehen"> 
IMMEDIATE: ( 29 WORD 2DROP ; <ok></ok><fl>0020 3000 </fl><fr>0028 3002 </fr>
IMMEDIATE: { 0 STAT ! ; ( war ursprünglich mal [ )   <ok></ok><fl>0028 3002 </fl><fr>0030 3004 </fr>
: } 1 STAT ! ; <ok></ok><fl>0030 3004 </fl><fr>0038 3006 </fr>
IMMEDIATE: COMPILE 20 WORD FIND LCFA DROP COMPILE, ; <ok></ok><fl>0038 3006 </fl><fr>0043 300E </fr>
: MLIT ( a b --> 1000*a+b ) SWAP 1000 U* SWAP DROP ; <ok></ok><fl>0043 300E </fl><fr>004D 3013 </fr>
: ABS DUP 0LT IF MINUS END_IF ; <ok></ok><fl>004D 3013 </fl><fr>0056 3017 </fr>
: LIT, ( a --> ) DUP ABS 04 000 MLIT AND IF 111 ERROR END_IF , ; <ok></ok><fl>0056 3017 </fl><fr>0065 301C </fr>
COMPILE: (CONSTANT:) R> @ STAT @ IF LIT, END_IF ; <ok></ok><fl>0065 301C </fl><fr>0070 3028 </fr>
</sekt> 
 <ok></ok>
<sekt inhalt="Konstanten"> 
: CONSTANT ( /name/  c --> ) CREATE COMPILE (CONSTANT:) , SMUDGE ; <ok></ok><fl>0070 3028 </fl><fr>0079 3031 </fr>
 <ok></ok>
2800 CONSTANT KEYADR <ok></ok><fl>0079 3031 </fl><fr>007E 3038 </fr>
2801 CONSTANT SP <ok></ok><fl>007E 3038 </fl><fr>0083 303B </fr>
2802 CONSTANT RP <ok></ok><fl>0083 303B </fl><fr>0088 303E </fr>
2803 CONSTANT PC <ok></ok><fl>0088 303E </fl><fr>008D 3041 </fr>
 <ok></ok>
2F00 CONSTANT XBIT <ok></ok><fl>008D 3041 </fl><fr>0092 3046 </fr>
2F01 CONSTANT SMUDGEBIT <ok></ok><fl>0092 3046 </fl><fr>0097 3050 </fr>
2F02 CONSTANT RP0 3000 RP0 ! <ok></ok><fl>0097 3050 </fl><fr>009C 3054 </fr>
2F03 CONSTANT IRAMADR <ok></ok><fl>009C 3054 </fl><fr>00A1 305C </fr>
2F04 CONSTANT JRAMADR <ok></ok><fl>00A1 305C </fl><fr>00A6 3064 </fr>
2F05 CONSTANT XOFF <ok></ok><fl>00A6 3064 </fl><fr>00AB 3069 </fr>
2F06 CONSTANT CRBZEIG BZEIG @ CRBZEIG ! <ok></ok><fl>00AB 3071 </fl><fr>00B0 3071 </fr>
2F07 CONSTANT CRDP DP @ 8 M- CRDP ! <ok></ok><fl>00AD 3071 </fl><fr>00B5 3076 </fr>
 <ok></ok>
2F08 CONSTANT BASE <ok></ok><fl>00B5 3076 </fl><fr>00BA 307B </fr>
2F09 CONSTANT TIB <ok></ok><fl>00BA 307B </fl><fr>00BF 307F </fr>
2F0A CONSTANT IN1 <ok></ok><fl>00BF 307F </fl><fr>00C4 3083 </fr>
2F0B CONSTANT IN2 <ok></ok><fl>00C4 3083 </fl><fr>00C9 3087 </fr>
2F0C CONSTANT IN3 <ok></ok><fl>00C9 3087 </fl><fr>00CE 308B </fr>
2F0D CONSTANT IN4 <ok></ok><fl>00CE 308B </fl><fr>00D3 308F </fr>
2F0E CONSTANT ERRORNR 0 ERRORNR ! <ok></ok><fl>00D3 308F </fl><fr>00D8 3097 </fr>
2F0F CONSTANT DP <ok></ok><fl>00D8 3097 </fl><fr>00DD 309A </fr>
2F10 CONSTANT STAT 0 STAT ! <ok></ok><fl>00DD 309A </fl><fr>00E2 309F </fr>
2F11 CONSTANT LFA <ok></ok><fl>00E2 309F </fl><fr>00E7 30A3 </fr>
2F12 CONSTANT BANF <ok></ok><fl>00E7 30A3 </fl><fr>00EC 30A8 </fr>
2F13 CONSTANT BZEIG <ok></ok><fl>00EC 30A8 </fl><fr>00F1 30AE </fr>
2F14 CONSTANT DPMERK <ok></ok><fl>00F1 30AE </fl><fr>00F6 30B5 </fr>
2F15 CONSTANT CSP <ok></ok><fl>00F6 30B5 </fl><fr>00FB 30B9 </fr>
2F16 CONSTANT DUBIT <ok></ok><fl>00FB 30B9 </fl><fr>0100 30BF </fr>
2F17 CONSTANT LOCALADRESSE <ok></ok><fl>0100 30BF </fl><fr>0105 30CC </fr>
 <ok></ok>
VERSION 1+ CONSTANT VERSION VERSION M. <ok>01C9 </ok><fl>0105 30CC </fl><fr>010A 30D4 </fr>
</sekt> 
 <ok></ok>
<sekt inhalt="Maschinencode"> 
( A003 CONSTANT RETURN <ok></ok>
( 0A 003 MLIT MCODE RETURN <ok></ok>
: RETURN 0A 003 MLIT ; <ok></ok><fl>010A 30D4 </fl><fr>0112 30DB </fr>
COMPILE: (MCODE:) R> STAT @ IF @ , ELSE EXECUTE END_IF ; <ok></ok><fl>0112 30DB </fl><fr>011F 30E4 </fr>
: MCODE CREATE COMPILE (MCODE:) , RETURN , SMUDGE ; <ok></ok><fl>011F 30E4 </fl><fr>012A 30EA </fr>
 <ok></ok>
0A 000 MLIT MCODE MINUS <ok></ok><fl>012A 30EA </fl><fr>0130 30F0 </fr>
0A 001 MLIT MCODE U+ <ok></ok><fl>0130 30F0 </fl><fr>0136 30F3 </fr>
0A 002 MLIT MCODE U* <ok></ok><fl>0136 30F3 </fl><fr>013C 30F6 </fr>
0A 00D MLIT MCODE 0= <ok></ok><fl>013C 30F6 </fl><fr>0142 30F9 </fr>
0A 00F MLIT MCODE 0LT <ok></ok><fl>0142 30F9 </fl><fr>0148 30FD </fr>
0A 005 MLIT MCODE EMITCODE <ok></ok><fl>0148 30FD </fl><fr>014E 3106 </fr>
0A 00B MLIT MCODE NOT <ok></ok><fl>014E 3106 </fl><fr>0154 310A </fr>
0A 008 MLIT MCODE AND <ok></ok><fl>0154 310A </fl><fr>015A 310E </fr>
0A 00E MLIT MCODE OR <ok></ok><fl>015A 310E </fl><fr>0160 3111 </fr>
0A 007 MLIT MCODE M+ <ok></ok><fl>0160 3111 </fl><fr>0166 3114 </fr>
0A 009 MLIT MCODE ! <ok></ok><fl>0166 3114 </fl><fr>016C 3116 </fr>
0A 00A MLIT MCODE @ <ok></ok><fl>016C 3116 </fl><fr>0172 3118 </fr>
0B 412 MLIT MCODE SWAP <ok></ok><fl>0172 3118 </fl><fr>0178 311D </fr>
0B 502 MLIT MCODE OVER <ok></ok><fl>0178 311D </fl><fr>017E 3122 </fr>
0B 501 MLIT MCODE DUP <ok></ok><fl>017E 3122 </fl><fr>0184 3126 </fr>
0B 434 MLIT MCODE ROT <ok></ok><fl>0184 3126 </fl><fr>018A 312A </fr>
0B 300 MLIT MCODE DROP <ok></ok><fl>018A 312A </fl><fr>0190 312F </fr>
0B 43C MLIT MCODE 2SWAP <ok></ok><fl>0190 312F </fl><fr>0196 3135 </fr>
0B 60C MLIT MCODE 2OVER <ok></ok><fl>0196 3135 </fl><fr>019C 313B </fr>
0B 603 MLIT MCODE 2DUP <ok></ok><fl>019C 313B </fl><fr>01A2 3140 </fr>
0B 200 MLIT MCODE 2DROP <ok></ok><fl>01A2 3140 </fl><fr>01A8 3146 </fr>
08 000 MLIT MCODE NOOP <ok></ok><fl>01A8 3146 </fl><fr>01AE 314B </fr>
</sekt> 
 <ok></ok>
<sekt inhalt="ein Abschnitt für die Zeichenketten"> 
: B, ( b --> ) BZEIG @ ! 1 BZEIG +! ; <ok></ok><fl>01AE 314B </fl><fr>01B9 314E </fr>
: Z, ( badr n --> ) BZEIG @ LIT, DUP , <ok></ok><fl>01B9 314E </fl><fr>01C2 3151 </fr>
  BEGIN SWAP DUP @ B, 1+ SWAP 1- DUP 0= UNTIL <ok></ok><fl>01C2 3151 </fl><fr>01CC 3151 </fr>
  2DROP 20 B, ;  <ok></ok><fl>01CC 3151 </fl><fr>01D0 3151 </fr>
COMPILE: (WORD:) WORD STAT @ IF Z, R> COMPILE, END_IF ; <ok></ok><fl>01D0 3151 </fl><fr>01DC 3159 </fr>
: WORD: CREATE 1 STAT ! , COMPILE (WORD:) -1 CSP +! ; <ok></ok><fl>01DC 3159 </fl><fr>01EA 315F </fr>
22 WORD: " ; <ok></ok><fl>01EA 315F </fl><fr>01F0 3161 </fr>
22 WORD: ." TYPE ; <ok></ok><fl>01F0 3161 </fl><fr>01F7 3164 </fr>
</sekt> 
 <ok></ok>
<sekt inhalt="weiter mit Programmstrukturen"> 
: HERE DP @ ; <ok></ok><fl>01F7 3164 </fl><fr>01FE 3169 </fr>
: JRBIT 8 ; <ok></ok><fl>01FE 3169 </fl><fr>0204 316F </fr>
: JR0BIT 9 ; <ok></ok><fl>0204 316F </fl><fr>020A 3176 </fr>
( **** : XSETBT 1000 M* SWAP 0FFF AND OR ; <ok></ok>
: XSETBT 0 1000 ROT U* SWAP DROP SWAP 0FFF AND OR ; <ok></ok><fl>020A 3176 </fl><fr>0219 317D </fr>
: ALLOT DP +! ; <ok></ok><fl>0219 317D </fl><fr>0220 3183 </fr>
: BRANCH, HERE 1+ M- JRBIT XSETBT , ; <ok></ok><fl>0220 3183 </fl><fr>022B 318B </fr>
: 0BRANCH, HERE 1+ M- JR0BIT XSETBT , ; <ok></ok><fl>022B 318B </fl><fr>0236 3194 </fr>
IMMEDIATE: BEGIN HERE ; <ok></ok><fl>0236 3194 </fl><fr>023C 319A </fr>
IMMEDIATE: AGAIN BRANCH, ; <ok></ok><fl>023C 319A </fl><fr>0242 31A0 </fr>
IMMEDIATE: UNTIL 0BRANCH, ; <ok></ok><fl>0242 31A0 </fl><fr>0248 31A6 </fr>
IMMEDIATE: IF JR0BIT 1 ALLOT HERE ; <ok></ok><fl>0248 31A6 </fl><fr>0251 31A9 </fr>
IMMEDIATE: END_IF HERE OVER M- ROT XSETBT SWAP 1- ! ; <ok></ok><fl>0251 31A9 </fl><fr>025E 31B0 </fr>
IMMEDIATE: ELSE 1 ALLOT COMPILE END_IF JRBIT HERE ; <ok></ok><fl>025E 31B0 </fl><fr>0268 31B5 </fr>
IMMEDIATE: WHILE COMPILE IF ; <ok></ok><fl>0268 31B5 </fl><fr>026E 31BB </fr>
IMMEDIATE: REPEAT ROT COMPILE AGAIN COMPILE END_IF ; <ok></ok><fl>026E 31BB </fl><fr>0276 31C2 </fr>
</sekt> 
 <ok></ok>
<sekt inhalt="etliche kleinere Funktionen"> 
: C@ @ ; <ok></ok><fl>0276 31C2 </fl><fr>027C 31C5 </fr>
: C! ! ; <ok></ok><fl>027C 31C5 </fl><fr>0282 31C8 </fr>
: 1+ ( a --> a+1 ) 1 M+ ; <ok></ok><fl>0282 31C8 </fl><fr>0289 31CB </fr>
: 1- ( a --> a+1 ) -1 M+ ; <ok></ok><fl>0289 31CB </fl><fr>0290 31CE </fr>
: M- MINUS M+ ; <ok></ok><fl>0290 31CE </fl><fr>0297 31D1 </fr>
: = M- 0= ; <ok></ok><fl>0297 31D1 </fl><fr>029E 31D3 </fr>
: LT ( a b --> r ) M- 0LT ; <ok></ok><fl>029E 31D3 </fl><fr>02A5 31D6 </fr>
: > ( a b --> r ) SWAP LT ; <ok></ok><fl>02A5 31D6 </fl><fr>02AC 31D8 </fr>
: M* ( a b --> a*b ) 0 ROT ROT U* SWAP DROP ; <ok></ok><fl>02AC 31D8 </fl><fr>02B7 31DB </fr>
: BYE BEGIN ." BYE " AGAIN ; <ok></ok><fl>02B7 31DB </fl><fr>02C0 31E4 </fr>
: +! ( a adr --> adr+1 ) SWAP OVER @ M+ SWAP ! ; <ok></ok><fl>02C0 31E4 </fl><fr>02CB 31E7 </fr>
: R> RP @ 1+ @ RP @ 1+ RP 2DUP @ @ SWAP ! ! ; <ok></ok><fl>02CB 31E7 </fl><fr>02DE 31EA </fr>
: >R RP @ DUP 1- RP 2DUP @ @ SWAP DUP 1- RP ! ! ! ! ;  <ok></ok><fl>02DE 31EA </fl><fr>02F3 31ED </fr>
: R RP @ 1+ @ ; ( bei R> >R nicht unterhalb RP speichern wegen INTXY ) <ok></ok><fl>02F3 31ED </fl><fr>02FC 31EF </fr>
: , DP @ ! 1 DP +! ; <ok></ok><fl>02FC 31EF </fl><fr>0307 31F1 </fr>
: EXECUTE PC ! ; <ok></ok><fl>0307 31F1 </fl><fr>030E 31F9 </fr>
: KEY BEGIN NOOP KEYCODE2 NOT WHILE DROP REPEAT ; <ok></ok><fl>030E 31F9 </fl><fr>0319 31FD </fr>
: EMIT ' EMITCODE EXECUTE ; <ok></ok><fl>0319 31FD </fl><fr>0320 3202 </fr>
: SHL16 ( a --> t a' ) <ok></ok><fl>0320 3202 </fl><fr>0324 3208 </fr>
  0 SWAP 10 U* SWAP ; ( t a' = SHL a ) <ok></ok><fl>0324 3208 </fl><fr>032A 3208 </fr>
: DIG ( n --> c ) <ok></ok><fl>032A 3208 </fl><fr>032E 320C </fr>
  DUP 0A LT IF ELSE 7 M+ END_IF 30 M+ ; <ok></ok><fl>032E 320C </fl><fr>0338 320C </fr>
: TYPE <ok></ok><fl>0338 320C </fl><fr>033C 3211 </fr>
  BEGIN DUP WHILE <ok></ok><fl>033C 3211 </fl><fr>033E 3211 </fr>
    SWAP DUP C@ EMIT 1+ <ok></ok><fl>033E 3211 </fl><fr>0343 3211 </fr>
    SWAP 1- REPEAT <ok></ok><fl>0343 3211 </fl><fr>0346 3211 </fr>
  2DROP ; <ok></ok><fl>0346 3211 </fl><fr>0348 3211 </fr>
: HG. SHL16 DIG EMIT SHL16 DIG EMIT SHL16 DIG EMIT <ok></ok><fl>0348 3211 </fl><fr>0355 3215 </fr>
  SHL16 DIG EMIT DROP ; <ok></ok><fl>0355 3215 </fl><fr>035A 3215 </fr>
: M. HG. 20 EMIT ; <ok></ok><fl>035A 3215 </fl><fr>0362 3218 </fr>
: M? @ M. ; <ok></ok><fl>0362 3218 </fl><fr>0369 321B </fr>
: CR  <ok></ok><fl>0369 321B </fl><fr>036D 321E </fr>
  CRDP @ DP @ M- STAT @ 0= NOT OR XBIT @ 0= NOT AND IF  <ok></ok><fl>036D 321E </fl><fr>037D 321E </fr>
    3C EMIT ." fl>" CRDP @ M. CRBZEIG @ M. 3C EMIT ." /fl>" <ok></ok><fl>037D 321E </fl><fr>038D 3227 </fr>
    3C EMIT ." fr>" DP @ M. BZEIG @ M. 3C EMIT ." /fr>" <ok></ok><fl>038D 3227 </fl><fr>039D 3230 </fr>
    DP @ CRDP ! BZEIG @ CRBZEIG !  <ok></ok><fl>039D 3230 </fl><fr>03A5 3230 </fr>
    END_IF <ok></ok><fl>03A5 3230 </fl><fr>03A5 3230 </fr>
  0A EMIT ; <ok></ok><fl>03A5 3230 </fl><fr>03A8 3230 </fr>
: FEHLERTEXT ( n --> n ) ; <ok></ok><fl>03A8 3230 </fl><fr>03AD 323B </fr>
: DISABLE  <ok></ok><fl>03AD 323B </fl><fr>03B1 3243 </fr>
  CR ." weiter nach Taste ESCAPE " <ok></ok><fl>03B1 3243 </fl><fr>03B5 325D </fr>
  BEGIN 20 EMIT 8 EMIT KEY 1B = UNTIL ;  <ok></ok><fl>03B5 325D </fl><fr>03BE 325D </fr>
: ERROR <ok></ok><fl>03BE 325D </fl><fr>03C2 3263 </fr>
  DUP ERRORNR ! <ok></ok><fl>03C2 3263 </fl><fr>03C5 3263 </fr>
  0 STAT ! <ok></ok><fl>03C5 3263 </fl><fr>03C8 3263 </fr>
  CR IN1 @ IN3 @ IN1 @ M- 1- TYPE ." ???" <ok></ok><fl>03C8 3263 </fl><fr>03D5 3267 </fr>
  " FEHLERTEXT" INTERPRET <ok></ok><fl>03D5 3267 </fl><fr>03D9 3272 </fr>
  CR ." ERROR - Fehler Nummer " M.  <ok></ok><fl>03D9 3272 </fl><fr>03DE 3289 </fr>
  DISABLE QUIT ; <ok></ok><fl>03DE 3289 </fl><fr>03E1 3289 </fr>
: CSP! SP @ CSP ! ; <ok></ok><fl>03E1 3289 </fl><fr>03EA 328E </fr>
: CSP? SP @ CSP @ M- IF 9 ERROR END_IF ; <ok></ok><fl>03EA 328E </fl><fr>03F7 3293 </fr>
</sekt> 
 <ok></ok>
<sekt inhalt="lokale Variablen"> 
: LOCAL ( n --> ) 1+ LOCALADRESSE @ OVER M- DUP LOCALADRESSE ! ! ; <ok></ok><fl>03F7 3293 </fl><fr>0405 3299 </fr>
: END_LOCAL ( --> ) LOCALADRESSE @ DUP @ M+ LOCALADRESSE ! ; <ok></ok><fl>0405 3299 </fl><fr>0411 32A3 </fr>
: L0 LOCALADRESSE @ 1+ ; <ok></ok><fl>0411 32A3 </fl><fr>0419 32A6 </fr>
: L1 LOCALADRESSE @ 2 M+ ; <ok></ok><fl>0419 32A6 </fl><fr>0422 32A9 </fr>
: L2 LOCALADRESSE @ 3 M+ ; <ok></ok><fl>0422 32A9 </fl><fr>042B 32AC </fr>
: L3 LOCALADRESSE @ 4 M+ ; <ok></ok><fl>042B 32AC </fl><fr>0434 32AF </fr>
: L4 LOCALADRESSE @ 5 M+ ; <ok></ok><fl>0434 32AF </fl><fr>043D 32B2 </fr>
: L5 LOCALADRESSE @ 6 M+ ; <ok></ok><fl>043D 32B2 </fl><fr>0446 32B5 </fr>
: L6 LOCALADRESSE @ 7 M+ ; <ok></ok><fl>0446 32B5 </fl><fr>044F 32B8 </fr>
: L7 LOCALADRESSE @ 8 M+ ; ( soviele reichen schon ) <ok></ok><fl>044F 32B8 </fl><fr>0458 32BB </fr>
</sekt> 
 <ok></ok>
<sekt inhalt="alles zu KEY"> 
IMMEDIATE: ' ( /name/ --> --> pfa )  <ok></ok><fl>0458 32BB </fl><fr>045C 32BD </fr>
  20 WORD FIND LCFA DROP 1+ STAT @ IF LIT, END_IF ;  <ok></ok><fl>045C 32BD </fl><fr>0467 32BD </fr>
 <ok></ok>
: INCR4 ( adr --> ) <ok></ok><fl>0467 32BD </fl><fr>046B 32C3 </fr>
  DUP @ 1+ <ok></ok><fl>046B 32C3 </fl><fr>046E 32C3 </fr>
  DUP 3FF AND 000 = IF -400 M+ END_IF  <ok></ok><fl>046E 32C3 </fl><fr>0476 32C3 </fr>
  SWAP ! <ok></ok><fl>0476 32C3 </fl><fr>0478 32C3 </fr>
  ; <ok></ok><fl>0478 32C3 </fl><fr>0479 32C3 </fr>
 <ok></ok>
: KEY_INT ( --> ) <ok></ok><fl>0479 32C3 </fl><fr>047D 32CB </fr>
  KEYADR @  <ok></ok><fl>047D 32CB </fl><fr>047F 32CB </fr>
  DUP 08 LT IF  <ok></ok><fl>047F 32CB </fl><fr>0483 32CB </fr>
    18 M+ @ DUP IF DUP EXECUTE END_IF <ok></ok><fl>0483 32CB </fl><fr>048A 32CB </fr>
    DROP <ok></ok><fl>048A 32CB </fl><fr>048B 32CB </fr>
    ELSE <ok></ok><fl>048B 32CB </fl><fr>048C 32CB </fr>
      IRAMADR @ !  <ok></ok><fl>048C 32CB </fl><fr>048F 32CB </fr>
      IRAMADR INCR4 <ok></ok><fl>048F 32CB </fl><fr>0491 32CB </fr>
      IRAMADR @ JRAMADR @ M- 3FF AND  <ok></ok><fl>0491 32CB </fl><fr>0498 32CB </fr>
      80 > IF XOFF @ 0= IF -1 XOFF ! 13 EMIT END_IF END_IF  <ok></ok><fl>0498 32CB </fl><fr>04A4 32CB </fr>
      END_IF <ok></ok><fl>04A4 32CB </fl><fr>04A4 32CB </fr>
  0 KEYADR ! <ok></ok><fl>04A4 32CB </fl><fr>04A7 32CB </fr>
  ; <ok></ok><fl>04A7 32CB </fl><fr>04A8 32CB </fr>
 <ok></ok>
: KEYCODE2 ( --> c f ) <ok></ok><fl>04A8 32CB </fl><fr>04AC 32D4 </fr>
  JRAMADR @ IRAMADR @ = IF 0 0  <ok></ok><fl>04AC 32D4 </fl><fr>04B4 32D4 </fr>
    ELSE JRAMADR @ @ -1 <ok></ok><fl>04B4 32D4 </fl><fr>04B9 32D4 </fr>
    JRAMADR INCR4 <ok></ok><fl>04B9 32D4 </fl><fr>04BB 32D4 </fr>
    IRAMADR @ JRAMADR @ M- 3FF AND <ok></ok><fl>04BB 32D4 </fl><fr>04C2 32D4 </fr>
    20 LT IF XOFF @ IF 0 XOFF ! 11 EMIT END_IF END_IF <ok></ok><fl>04C2 32D4 </fl><fr>04CD 32D4 </fr>
    END_IF <ok></ok><fl>04CD 32D4 </fl><fr>04CD 32D4 </fr>
  ; <ok></ok><fl>04CD 32D4 </fl><fr>04CE 32D4 </fr>
 <ok></ok>
' KEY_INT 04 000 MLIT OR 12 ! <ok></ok>
</sekt> 
 <ok></ok>
<sekt inhalt="es folgt der Interpreter"> 
( ESCAPE durch EXPECT durchlaufen lassen ) <ok></ok>
( und 7F in 08 umwandeln ) <ok></ok>
( und nach n Zeichen kein 0D mehr lesen ) <ok></ok>
: EXPECT ( /text/  adr n --> adr m ) <ok></ok><fl>04CE 32D4 </fl><fr>04D2 32DB </fr>
  5 LOCAL <ok></ok><fl>04D2 32DB </fl><fr>04D4 32DB </fr>
  L2 ! L1 ! L1 @ L4 ! <ok></ok><fl>04D4 32DB </fl><fr>04DC 32DB </fr>
  BEGIN <ok></ok><fl>04DC 32DB </fl><fr>04DC 32DB </fr>
    KEY <ok></ok><fl>04DC 32DB </fl><fr>04DD 32DB </fr>
    DUP 14 ( 20 ) ( =^T, ^R=18 ) = IF  <ok></ok><fl>04DD 32DB </fl><fr>04E1 32DB </fr>
      DROP L1 @ C@ END_IF <ok></ok><fl>04E1 32DB </fl><fr>04E5 32DB </fr>
    DUP 7F = IF DROP 08 END_IF <ok></ok><fl>04E5 32DB </fl><fr>04EB 32DB </fr>
    DUP 08 = IF L4 @ L1 @ LT IF <ok></ok><fl>04EB 32DB </fl><fr>04F5 32DB </fr>
      -1 L1 +! <ok></ok><fl>04F5 32DB </fl><fr>04F8 32DB </fr>
      1 L2 +! <ok></ok><fl>04F8 32DB </fl><fr>04FB 32DB </fr>
      8 EMIT 20 ( 32 ) EMIT 8 EMIT <ok></ok><fl>04FB 32DB </fl><fr>0501 32DB </fr>
      END_IF END_IF <ok></ok><fl>0501 32DB </fl><fr>0501 32DB </fr>
(    DUP 20 ( 32 ] LT NOT OVER 08 = OR OVER 1B = OR L2 @ 0= NOT AND WHILE <ok></ok><fl>0501 32DB </fl><fr>0501 32DB </fr>
      DUP 20 LT IF ( DROP ) ELSE <ok></ok><fl>0501 32DB </fl><fr>0506 32DB </fr>
        -1 L2 +! <ok></ok><fl>0506 32DB </fl><fr>0509 32DB </fr>
        L2 @ 0LT IF 6 ERROR END_IF <ok></ok><fl>0509 32DB </fl><fr>050F 32DB </fr>
        DUP EMIT <ok></ok><fl>050F 32DB </fl><fr>0511 32DB </fr>
        DUP L1 @ C! 1 L1 +! <ok></ok><fl>0511 32DB </fl><fr>0518 32DB </fr>
        END_IF  <ok></ok><fl>0518 32DB </fl><fr>0518 32DB </fr>
    DUP 20 LT OVER 08 = NOT AND SWAP 1B = NOT AND L2 @ 0= OR UNTIL <ok></ok><fl>0518 32DB </fl><fr>052A 32DB </fr>
(      REPEAT <ok></ok><fl>052A 32DB </fl><fr>052A 32DB </fr>
  20 ( 32 ) EMIT <ok></ok><fl>052A 32DB </fl><fr>052C 32DB </fr>
  L4 @ L1 @ L4 @ M- <ok></ok><fl>052C 32DB </fl><fr>0533 32DB </fr>
  2DUP M+ 0 SWAP C! <ok></ok><fl>0533 32DB </fl><fr>0538 32DB </fr>
  END_LOCAL <ok></ok><fl>0538 32DB </fl><fr>0539 32DB </fr>
  ; <ok></ok><fl>0539 32DB </fl><fr>053A 32DB </fr>
 <ok></ok>
 <ok></ok>
: DIGIT ( z --> d r ) ( r=-1 wenn gueltig ) <ok></ok><fl>053A 32DB </fl><fr>053E 32E1 </fr>
  ( vorher r=0 wenn gueltig!!! ) <ok></ok><fl>053E 32E1 </fl><fr>053E 32E1 </fr>
  DUP 30 ( 30 48 ) LT NOT OVER 3A ( 3A 58 ) LT AND <ok></ok><fl>053E 32E1 </fl><fr>0546 32E1 </fr>
  OVER 41 ( 41 65 ) LT NOT OR  <ok></ok><fl>0546 32E1 </fl><fr>054B 32E1 </fr>
  DUP IF ( z -1 wenn gueltig ) <ok></ok><fl>054B 32E1 </fl><fr>054D 32E1 </fr>
    SWAP 30 ( 30 48 ) M- <ok></ok><fl>054D 32E1 </fl><fr>0550 32E1 </fr>
    DUP 0A LT NOT IF 7 M- END_IF <ok></ok><fl>0550 32E1 </fl><fr>0557 32E1 </fr>
    DUP BASE @ LT NOT IF DROP DROP 0 0 END_IF <ok></ok><fl>0557 32E1 </fl><fr>0561 32E1 </fr>
    SWAP END_IF ; <ok></ok><fl>0561 32E1 </fl><fr>0563 32E1 </fr>
 <ok></ok>
: NUMBER ( badr n --> a r ) <ok></ok><fl>0563 32E1 </fl><fr>0567 32E8 </fr>
  7 LOCAL ( L3 L4 nicht verwendet ) <ok></ok><fl>0567 32E8 </fl><fr>0569 32E8 </fr>
  L1 ! L0 ! <ok></ok><fl>0569 32E8 </fl><fr>056D 32E8 </fr>
  0 L1 @ IF <ok></ok><fl>056D 32E8 </fl><fr>0571 32E8 </fr>
    DUP L2 ! 1 L5 ! ( Vorzeichen ) <ok></ok><fl>0571 32E8 </fl><fr>0577 32E8 </fr>
    BEGIN ( M23 Vorzeichen gucken ) <ok></ok><fl>0577 32E8 </fl><fr>0577 32E8 </fr>
      -1 L6 !  <ok></ok><fl>0577 32E8 </fl><fr>057A 32E8 </fr>
      L0 @ L2 @ M+ C@ <ok></ok><fl>057A 32E8 </fl><fr>0580 32E8 </fr>
      2B ( 43 2B ) = IF L2 @ 1+ L2 ! 0 L6 ! ELSE <ok></ok><fl>0580 32E8 </fl><fr>058C 32E8 </fr>
        L0 @ L2 @ M+ C@ <ok></ok><fl>058C 32E8 </fl><fr>0592 32E8 </fr>
        2D ( 45 2D ) = IF L2 @ 1+ L2 ! <ok></ok><fl>0592 32E8 </fl><fr>059A 32E8 </fr>
          0 L6 ! <ok></ok><fl>059A 32E8 </fl><fr>059D 32E8 </fr>
          L5 @ MINUS L5 ! END_IF <ok></ok><fl>059D 32E8 </fl><fr>05A2 32E8 </fr>
        END_IF <ok></ok><fl>05A2 32E8 </fl><fr>05A2 32E8 </fr>
      L6 @ UNTIL <ok></ok><fl>05A2 32E8 </fl><fr>05A5 32E8 </fr>
    L2 @ L1 @ LT IF <ok></ok><fl>05A5 32E8 </fl><fr>05AB 32E8 </fr>
      BEGIN <ok></ok><fl>05AB 32E8 </fl><fr>05AB 32E8 </fr>
        L0 @ L2 @ M+ C@ <ok></ok><fl>05AB 32E8 </fl><fr>05B1 32E8 </fr>
        DUP IF ( oo L1 auf Bytes ) <ok></ok><fl>05B1 32E8 </fl><fr>05B3 32E8 </fr>
          DIGIT NOT IF DROP L1 @ MINUS L1 ! ELSE <ok></ok><fl>05B3 32E8 </fl><fr>05BD 32E8 </fr>
            SWAP BASE @ M* M+ <ok></ok><fl>05BD 32E8 </fl><fr>05C2 32E8 </fr>
            L2 @ 1+ L2 !  <ok></ok><fl>05C2 32E8 </fl><fr>05C7 32E8 </fr>
            END_IF <ok></ok><fl>05C7 32E8 </fl><fr>05C7 32E8 </fr>
          ELSE DROP L2 @ L1 ! END_IF <ok></ok><fl>05C7 32E8 </fl><fr>05CD 32E8 </fr>
        L2 @ L1 @ LT NOT UNTIL <ok></ok><fl>05CD 32E8 </fl><fr>05D4 32E8 </fr>
      END_IF ( M19 ) <ok></ok><fl>05D4 32E8 </fl><fr>05D4 32E8 </fr>
    END_IF ( M19 ) <ok></ok><fl>05D4 32E8 </fl><fr>05D4 32E8 </fr>
  L5 @ 0LT IF MINUS END_IF <ok></ok><fl>05D4 32E8 </fl><fr>05D9 32E8 </fr>
  L2 @ L1 @ M- ( oo noch kein fadr ) <ok></ok><fl>05D9 32E8 </fl><fr>05DE 32E8 </fr>
  END_LOCAL <ok></ok><fl>05DE 32E8 </fl><fr>05DF 32E8 </fr>
  ; <ok></ok><fl>05DF 32E8 </fl><fr>05E0 32E8 </fr>
 <ok></ok>
: WORD ( b --> adr n ) <ok></ok><fl>05E0 32E8 </fl><fr>05E4 32ED </fr>
  >R <ok></ok><fl>05E4 32ED </fl><fr>05E5 32ED </fr>
  IN3 @ IN2 ! <ok></ok><fl>05E5 32ED </fl><fr>05E9 32ED </fr>
  BEGIN  <ok></ok><fl>05E9 32ED </fl><fr>05E9 32ED </fr>
    IN3 @ C@ R = IN3 @ IN4 @ LT AND WHILE <ok></ok><fl>05E9 32ED </fl><fr>05F5 32ED </fr>
      1 IN3 +! REPEAT <ok></ok><fl>05F5 32ED </fl><fr>05F9 32ED </fr>
  IN3 @ IN2 ! <ok></ok><fl>05F9 32ED </fl><fr>05FD 32ED </fr>
  BEGIN  <ok></ok><fl>05FD 32ED </fl><fr>05FD 32ED </fr>
    IN3 @ C@ 3C = IF IN3 @ IN4 ! END_IF ( alles nach 3C ist Kommentar ) <ok></ok><fl>05FD 32ED </fl><fr>0607 32ED </fr>
    IN3 @ C@ R = NOT IN3 @ IN4 @ LT AND WHILE <ok></ok><fl>0607 32ED </fl><fr>0614 32ED </fr>
      1 IN3 +! REPEAT <ok></ok><fl>0614 32ED </fl><fr>0618 32ED </fr>
  IN2 @ IN3 @ OVER M- <ok></ok><fl>0618 32ED </fl><fr>061E 32ED </fr>
  DUP IF 1 IN3 +! END_IF <ok></ok><fl>061E 32ED </fl><fr>0623 32ED </fr>
  R> DROP <ok></ok><fl>0623 32ED </fl><fr>0625 32ED </fr>
  ; <ok></ok><fl>0625 32ED </fl><fr>0626 32ED </fr>
 <ok></ok>
: Z= ( adr1 n1 adr2 n2 --> r ) <ok></ok><fl>0626 32ED </fl><fr>062A 32F0 </fr>
  >R OVER R M- IF R> DROP DROP DROP DROP 0 ELSE <ok></ok><fl>062A 32F0 </fl><fr>0636 32F0 </fr>
    R> DROP SWAP 0 BEGIN 2DUP M- WHILE >R >R <ok></ok><fl>0636 32F0 </fl><fr>063F 32F0 </fr>
      OVER C@ OVER C@ M- IF DROP DROP 0 0 END_IF <ok></ok><fl>063F 32F0 </fl><fr>0649 32F0 </fr>
      DUP IF 1+ SWAP 1+ SWAP END_IF <ok></ok><fl>0649 32F0 </fl><fr>064F 32F0 </fr>
      R> R> 1+ REPEAT 2DROP ( neu bei 16 BIT ohne DO LOOP ) <ok></ok><fl>064F 32F0 </fl><fr>0654 32F0 </fr>
    DROP IF -1 ELSE 0 END_IF <ok></ok><fl>0654 32F0 </fl><fr>0659 32F0 </fr>
    END_IF ; <ok></ok><fl>0659 32F0 </fl><fr>065A 32F0 </fr>
( : Z= DROP SWAP DROP SWAP @ SWAP @ = ; <ok></ok>
 <ok></ok>
: FIND ( adr n --> lfa r ) <ok></ok><fl>065A 32F0 </fl><fr>065E 32F5 </fr>
  >R >R 0 ( heisst noch nicht gefunden ) <ok></ok><fl>065E 32F5 </fl><fr>0661 32F5 </fr>
  LFA @  <ok></ok><fl>0661 32F5 </fl><fr>0663 32F5 </fr>
  SMUDGEBIT @ IF DUP @ M+ END_IF <ok></ok><fl>0663 32F5 </fl><fr>0669 32F5 </fr>
  BEGIN <ok></ok><fl>0669 32F5 </fl><fr>0669 32F5 </fr>
    DUP 1+ DUP @ ( lfa nfa adr ) <ok></ok><fl>0669 32F5 </fl><fr>066D 32F5 </fr>
    SWAP 1+ @ ( lfa adr n1 ) <ok></ok><fl>066D 32F5 </fl><fr>0670 32F5 </fr>
    ( 2DUP CR B. 2DUP TYPE <ok></ok><fl>0670 32F5 </fl><fr>0670 32F5 </fr>
    ( BEGIN 2DUP M+ 1 M- C@ 0= WHILE 1 M- REPEAT ( ??? momentan nicht ) <ok></ok><fl>0670 32F5 </fl><fr>0670 32F5 </fr>
    R> R> 2DUP >R >R ( 0 lfa adr1 n1 adr2 n2 ) <ok></ok><fl>0670 32F5 </fl><fr>0675 32F5 </fr>
    Z= IF SWAP 0= SWAP END_IF ( heisst gefunden ) <ok></ok><fl>0675 32F5 </fl><fr>067A 32F5 </fr>
    OVER 0= OVER @ 0= NOT AND  <ok></ok><fl>067A 32F5 </fl><fr>0681 32F5 </fr>
    OVER DUP @ M+ LFA @ = NOT AND WHILE ( wegen 2xladen ) <ok></ok><fl>0681 32F5 </fl><fr>068B 32F5 </fr>
      DUP @ M+ REPEAT <ok></ok><fl>068B 32F5 </fl><fr>068F 32F5 </fr>
  R> DROP R> <ok></ok><fl>068F 32F5 </fl><fr>0692 32F5 </fr>
  ROT 0= IF DROP DROP 0 0 END_IF <ok></ok><fl>0692 32F5 </fl><fr>0699 32F5 </fr>
  ( OVER LFA @ SWAP LT IF M." *" OVER M. LFA @ M. END_IF ( vref wenn gebraucht ) <ok></ok><fl>0699 32F5 </fl><fr>0699 32F5 </fr>
  ; <ok></ok><fl>0699 32F5 </fl><fr>069A 32F5 </fr>
 <ok></ok>
: LCFA ( lfa r --> cfa r ) SWAP 3 M+ SWAP ; <ok></ok><fl>069A 32F5 </fl><fr>06A3 32FA </fr>
 <ok></ok>
: COMPILE, ( adr --> ) 04 000 MLIT OR , ; <ok></ok><fl>06A3 32FA </fl><fr>06AD 3303 </fr>
 <ok></ok>
: CREATE ( /name/  --> ) <ok></ok><fl>06AD 3303 </fl><fr>06B1 330A </fr>
  CSP! ( Stapelbalance prüfen in ; ) <ok></ok><fl>06B1 330A </fl><fr>06B2 330A </fr>
  DP @ LFA @ OVER M- , LFA ! <ok></ok><fl>06B2 330A </fl><fr>06BB 330A </fr>
  20 WORD Z, <ok></ok><fl>06BB 330A </fl><fr>06BE 330A </fr>
  1 SMUDGEBIT ! ( HERE 2 M- DUP @ MINUS SWAP ! ( UNSMUDGE ) <ok></ok><fl>06BE 330A </fl><fr>06C1 330A </fr>
  ; <ok></ok><fl>06C1 330A </fl><fr>06C2 330A </fr>
 <ok></ok>
: INTERPRET ( adr n --> ... ) <ok></ok><fl>06C2 330A </fl><fr>06C6 3314 </fr>
  IN1 @ >R IN2 @ >R IN3 @ >R IN4 @ >R <ok></ok><fl>06C6 3314 </fl><fr>06D2 3314 </fr>
  OVER M+ IN4 ! <ok></ok><fl>06D2 3314 </fl><fr>06D6 3314 </fr>
  DUP IN1 ! DUP IN2 ! IN3 ! <ok></ok><fl>06D6 3314 </fl><fr>06DE 3314 </fr>
  BEGIN <ok></ok><fl>06DE 3314 </fl><fr>06DE 3314 </fr>
  ( ... qstack? Stapelpruefen ) <ok></ok><fl>06DE 3314 </fl><fr>06DE 3314 </fr>
  20 WORD <ok></ok><fl>06DE 3314 </fl><fr>06E0 3314 </fr>
  DUP WHILE <ok></ok><fl>06E0 3314 </fl><fr>06E2 3314 </fr>
    2DUP FIND  <ok></ok><fl>06E2 3314 </fl><fr>06E4 3314 </fr>
    DUP IF ( gefunden ) <ok></ok><fl>06E4 3314 </fl><fr>06E6 3314 </fr>
      >R >R 2DROP R> R> LCFA DROP EXECUTE <ok></ok><fl>06E6 3314 </fl><fr>06EE 3314 </fr>
      ELSE ( nicht gefunden ) <ok></ok><fl>06EE 3314 </fl><fr>06EF 3314 </fr>
        2DROP <ok></ok><fl>06EF 3314 </fl><fr>06F0 3314 </fr>
        2DUP NUMBER IF ( keine Zahl ) <ok></ok><fl>06F0 3314 </fl><fr>06F3 3314 </fr>
          2DROP DROP <ok></ok><fl>06F3 3314 </fl><fr>06F5 3314 </fr>
          3 ERROR <ok></ok><fl>06F5 3314 </fl><fr>06F7 3314 </fr>
         ( DROP BNUMBER <ok></ok><fl>06F7 3314 </fl><fr>06F7 3314 </fr>
         ( DUP IF DUP IN2 ! END_IF <ok></ok><fl>06F7 3314 </fl><fr>06F7 3314 </fr>
         ( IF 3 ERROR END_IF <ok></ok><fl>06F7 3314 </fl><fr>06F7 3314 </fr>
         ( STAT @ IF SWAP LIT, LIT, END_IF <ok></ok><fl>06F7 3314 </fl><fr>06F7 3314 </fr>
          ELSE ( eine Zahl ) <ok></ok><fl>06F7 3314 </fl><fr>06F8 3314 </fr>
            ROT DROP SWAP DROP <ok></ok><fl>06F8 3314 </fl><fr>06FC 3314 </fr>
            STAT @ IF LIT, END_IF ( oo LIT, fuer gr ) <ok></ok><fl>06FC 3314 </fl><fr>0700 3314 </fr>
            END_IF <ok></ok><fl>0700 3314 </fl><fr>0700 3314 </fr>
        END_IF <ok></ok><fl>0700 3314 </fl><fr>0700 3314 </fr>
    REPEAT 2DROP <ok></ok><fl>0700 3314 </fl><fr>0702 3314 </fr>
  R> IN4 ! R> IN3 ! R> IN2 ! R> IN1 ! <ok></ok><fl>0702 3314 </fl><fr>070E 3314 </fr>
  ; <ok></ok><fl>070E 3314 </fl><fr>070F 3314 </fr>
 <ok></ok>
: QUIT <ok></ok><fl>070F 3314 </fl><fr>0713 3319 </fr>
  RP0 @ RP !  <ok></ok><fl>0713 3319 </fl><fr>0717 3319 </fr>
  XBIT @ IF 3C EMIT ." /ok>" ELSE ." ok" END_IF <ok></ok><fl>0717 3319 </fl><fr>0723 3321 </fr>
  BEGIN ( im Prinzip nur BEGIN CR TIB @ 100 EXPECT INTERPRET AGAIN ) <ok></ok><fl>0723 3321 </fl><fr>0723 3321 </fr>
    CR  <ok></ok><fl>0723 3321 </fl><fr>0724 3321 </fr>
    TIB @ 100 EXPECT <ok></ok><fl>0724 3321 </fl><fr>0728 3321 </fr>
    OVER @ 3C = IF 2DROP ELSE ( xml am Zeilenanfang gleich überlesen ) <ok></ok><fl>0728 3321 </fl><fr>072F 3321 </fr>
      XBIT @ IF  <ok></ok><fl>072F 3321 </fl><fr>0732 3321 </fr>
        3C EMIT ." ok>"  <ok></ok><fl>0732 3321 </fl><fr>0737 3325 </fr>
        INTERPRET  <ok></ok><fl>0737 3325 </fl><fr>0738 3325 </fr>
        3C EMIT ." /ok>"  <ok></ok><fl>0738 3325 </fl><fr>073D 332A </fr>
        ELSE <ok></ok><fl>073D 332A </fl><fr>073E 332A </fr>
          1B EMIT 5B EMIT 33 EMIT 36 EMIT 6D EMIT <ok></ok><fl>073E 332A </fl><fr>0748 332A </fr>
          INTERPRET  <ok></ok><fl>0748 332A </fl><fr>0749 332A </fr>
          STAT @ 0= IF ." ok" END_IF  <ok></ok><fl>0749 332A </fl><fr>0750 332D </fr>
          1B EMIT 5B EMIT 33 EMIT 39 EMIT 6D EMIT <ok></ok><fl>0750 332D </fl><fr>075A 332D </fr>
          END_IF  <ok></ok><fl>075A 332D </fl><fr>075A 332D </fr>
      END_IF <ok></ok><fl>075A 332D </fl><fr>075A 332D </fr>
    AGAIN  <ok></ok><fl>075A 332D </fl><fr>075B 332D </fr>
  ; <ok></ok><fl>075B 332D </fl><fr>075C 332D </fr>
 <ok></ok>
 <ok></ok>
: START ." FORTY-FORTH" CR CR QUIT ; <ok></ok><fl>075C 332D </fl><fr>0767 333F </fr>
 <ok></ok>
 <ok></ok>
: SMUDGE 0 SMUDGEBIT ! ( LFA @ 1+ DUP @ DUP 0LT IF MINUS END_IF SWAP ! ) ; <ok></ok><fl>0767 333F </fl><fr>076F 3346 </fr>
 <ok></ok>
: (IMMEDIATE:) R> >R ; <ok></ok><fl>076F 3346 </fl><fr>0776 3353 </fr>
:   (COMPILE:) R> COMPILE, ; <ok></ok><fl>0776 3353 </fl><fr>077D 335E </fr>
:          (:) R> STAT @ IF COMPILE, ELSE >R END_IF ; <ok></ok><fl>077D 335E </fl><fr>0789 3362 </fr>
 <ok></ok>
: IMMEDIATE: CREATE 1 STAT ! COMPILE (IMMEDIATE:) ; <ok></ok><fl>0789 3362 </fl><fr>0793 336D </fr>
:   COMPILE: CREATE 1 STAT ! COMPILE (COMPILE:) ; <ok></ok><fl>0793 336D </fl><fr>079D 3376 </fr>
:          : CREATE 1 STAT ! COMPILE (:) ; <ok></ok><fl>079D 3376 </fl><fr>07A7 3378 </fr>
 <ok></ok>
( das hier jetzt mit dem neuen CREATE: ) <ok></ok>
IMMEDIATE: ; 0 STAT ! CSP? RETURN , SMUDGE { SMUDGE } ;  <ok></ok><fl>07A7 3378 </fl><fr>07B3 337A </fr>
( tatsaechlich { SMUDGE } wegen 2x laden!!! )  <ok></ok>
( Ende der Axiome. Hiermit enden die Axiome. ) <ok></ok>
</sekt> 
 <ok></ok>
<sekt inhalt="neues Vokabular abkoppeln und Programm neu starten"> 
0 DPMERK @ ! ( abkoppeln ) <ok></ok>
HERE M. BZEIG M? <ok>07B3 337A </ok>
 <ok></ok>
START <ok>FORTY-FORTH

</ok>
</sekt> 
</sekt> 
</AXIOME> 
 <ok></ok>
<FFINIT2> 
<sekt inhalt="bis Adresse 0800H passt noch DUMPZ drauf (inzwischen nicht mehr)"> 
( erste Forth Erweiterungen ) <ok></ok>
( - DUMPZ ) <ok></ok>
( RAMB-Inhaltsausgabe erzeugen: ) <ok></ok>
: LG. ( n --> ) <ok></ok><fl>07B3 337A </fl><fr>07B7 337E </fr>
  DUBIT @ IF SHL16 DROP SHL16 DROP  <ok></ok><fl>07B7 337E </fl><fr>07BE 337E </fr>
    ELSE SHL16 DIG EMIT SHL16 DIG EMIT END_IF  <ok></ok><fl>07BE 337E </fl><fr>07C5 337E </fr>
  SHL16 DIG EMIT SHL16 DIG EMIT DROP ; <ok></ok><fl>07C5 337E </fl><fr>07CD 337E </fr>
: NG. ( n --> ) <ok></ok><fl>07CD 337E </fl><fr>07D1 3382 </fr>
  ." x" 22 EMIT LG. 22 EMIT ." ," ;  <ok></ok><fl>07D1 3382 </fl><fr>07DD 3386 </fr>
: DUMPZ ( bis+1 von dubit --> ) <ok></ok><fl>07DD 3386 </fl><fr>07E1 338C </fr>
  DUBIT ! XBIT @ >R 0 XBIT ! <ok></ok><fl>07E1 338C </fl><fr>07E9 338C </fr>
  " ' START " INTERPRET 04 000 MLIT OR 10 ! <ok></ok><fl>07E9 338C </fl><fr>07F3 3395 </fr>
  CR 3C EMIT ." DUMPZ>" <ok></ok><fl>07F3 3395 </fl><fr>07F9 339C </fr>
  BEGIN <ok></ok><fl>07F9 339C </fl><fr>07F9 339C </fr>
    CR ."   " <ok></ok><fl>07F9 339C </fl><fr>07FD 339F </fr>
    0000 BEGIN <ok></ok><fl>07FD 339F </fl><fr>07FE 339F </fr>
      2DUP M+ <ok></ok><fl>07FE 339F </fl><fr>0800 339F </fr>
      DUP IRAMADR = IF DROP JRAMADR END_IF <ok></ok><fl>0800 339F </fl><fr>0806 339F </fr>
      DUP LOCALADRESSE = IF DROP 2F00 2F80 ! 2F80 END_IF <ok></ok><fl>0806 339F </fl><fr>080F 339F </fr>
      @ NG. 1+ DUP 10 = <ok></ok><fl>080F 339F </fl><fr>0815 339F </fr>
      UNTIL DROP <ok></ok><fl>0815 339F </fl><fr>0817 339F </fr>
    ."  -- " DUP HG. ." -" DUP 0F M+ HG. <ok></ok><fl>0817 339F </fl><fr>0823 33A6 </fr>
    10 M+ <ok></ok><fl>0823 33A6 </fl><fr>0825 33A6 </fr>
    2DUP > NOT UNTIL 2DROP <ok></ok><fl>0825 33A6 </fl><fr>082A 33A6 </fr>
  CR 3C EMIT ." /DUMPZ>" <ok></ok><fl>082A 33A6 </fl><fr>0830 33AE </fr>
  R> XBIT ! <ok></ok><fl>0830 33AE </fl><fr>0833 33AE </fr>
  ; <ok></ok><fl>0833 33AE </fl><fr>0834 33AE </fr>
 <ok></ok>
HERE M. BZEIG M? <ok>0834 33AE </ok>
</sekt> 
 <ok></ok>
<sekt inhalt="ProgRAM und ByteRAM für Step_9 und Step_10 erstellen"> 
HERE 0 0 DUMPZ          ( generiert ProgRAM für P20_FFP.vhd Step_10 ) <ok>
<DUMPZ>
  x"4010",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 0000-000F
  x"4760",x"A003",x"447D",x"A003",x"4000",x"A003",x"4000",x"A003",x"4000",x"A003",x"4000",x"A003",x"4000",x"A003",x"0010",x"A003", -- 0010-001F
  x"0000",x"3000",x"0001",x"4773",x"0029",x"45E4",x"B200",x"A003",x"FFF8",x"3002",x"0001",x"4773",x"0000",x"2F10",x"A009",x"A003", -- 0020-002F
  x"FFF8",x"3004",x"0001",x"4781",x"0001",x"2F10",x"A009",x"A003",x"FFF8",x"3006",x"0007",x"4773",x"0020",x"45E4",x"465E",x"469E", -- 0030-003F
  x"B300",x"46A7",x"A003",x"FFF5",x"300E",x"0004",x"4781",x"B412",x"1000",x"A002",x"B412",x"B300",x"A003",x"FFF6",x"3013",x"0003", -- 0040-004F
  x"4781",x"B501",x"A00F",x"9001",x"A000",x"A003",x"FFF7",x"3017",x"0004",x"4781",x"B501",x"4051",x"0004",x"0000",x"4047",x"A008", -- 0050-005F
  x"9002",x"0111",x"43C2",x"4300",x"A003",x"FFF1",x"301C",x"000B",x"477A",x"42CF",x"A00A",x"2F10",x"A00A",x"9001",x"405A",x"A003", -- 0060-006F
  x"FFF5",x"3028",x"0008",x"4781",x"46B1",x"4068",x"4300",x"476B",x"A003",x"FFF7",x"3031",x"0006",x"4069",x"2800",x"FFFB",x"3038", -- 0070-007F
  x"0002",x"4069",x"2801",x"FFFB",x"303B",x"0002",x"4069",x"2802",x"FFFB",x"303E",x"0002",x"4069",x"2803",x"FFFB",x"3041",x"0004", -- 0080-008F
  x"4069",x"2F00",x"FFFB",x"3046",x"0009",x"4069",x"2F01",x"FFFB",x"3050",x"0003",x"4069",x"2F02",x"FFFB",x"3054",x"0007",x"4069", -- 0090-009F
  x"2F03",x"FFFB",x"305C",x"0007",x"4069",x"2F04",x"FFFB",x"3064",x"0004",x"4069",x"2F05",x"FFFB",x"3069",x"0007",x"4069",x"2F06", -- 00A0-00AF
  x"FFFB",x"3071",x"0004",x"4069",x"2F07",x"FFFB",x"3076",x"0004",x"4069",x"2F08",x"FFFB",x"307B",x"0003",x"4069",x"2F09",x"FFFB", -- 00B0-00BF
  x"307F",x"0003",x"4069",x"2F0A",x"FFFB",x"3083",x"0003",x"4069",x"2F0B",x"FFFB",x"3087",x"0003",x"4069",x"2F0C",x"FFFB",x"308B", -- 00C0-00CF
  x"0003",x"4069",x"2F0D",x"FFFB",x"308F",x"0007",x"4069",x"2F0E",x"FFFB",x"3097",x"0002",x"4069",x"2F0F",x"FFFB",x"309A",x"0004", -- 00D0-00DF
  x"4069",x"2F10",x"FFFB",x"309F",x"0003",x"4069",x"2F11",x"FFFB",x"30A3",x"0004",x"4069",x"2F12",x"FFFB",x"30A8",x"0005",x"4069", -- 00E0-00EF
  x"2F13",x"FFFB",x"30AE",x"0006",x"4069",x"2F14",x"FFFB",x"30B5",x"0003",x"4069",x"2F15",x"FFFB",x"30B9",x"0005",x"4069",x"2F16", -- 00F0-00FF
  x"FFFB",x"30BF",x"000C",x"4069",x"2F17",x"FFFB",x"30CC",x"0007",x"4069",x"01C9",x"FFFB",x"30D4",x"0006",x"4781",x"000A",x"0003", -- 0100-010F
  x"4047",x"A003",x"FFF8",x"30DB",x"0008",x"477A",x"42CF",x"2F10",x"A00A",x"9003",x"A00A",x"4300",x"8001",x"430B",x"A003",x"FFF3", -- 0110-011F
  x"30E4",x"0005",x"4781",x"46B1",x"4115",x"4300",x"410E",x"4300",x"476B",x"A003",x"FFF5",x"30EA",x"0005",x"4116",x"A000",x"A003", -- 0120-012F
  x"FFFA",x"30F0",x"0002",x"4116",x"A001",x"A003",x"FFFA",x"30F3",x"0002",x"4116",x"A002",x"A003",x"FFFA",x"30F6",x"0002",x"4116", -- 0130-013F
  x"A00D",x"A003",x"FFFA",x"30F9",x"0003",x"4116",x"A00F",x"A003",x"FFFA",x"30FD",x"0008",x"4116",x"A005",x"A003",x"FFFA",x"3106", -- 0140-014F
  x"0003",x"4116",x"A00B",x"A003",x"FFFA",x"310A",x"0003",x"4116",x"A008",x"A003",x"FFFA",x"310E",x"0002",x"4116",x"A00E",x"A003", -- 0150-015F
  x"FFFA",x"3111",x"0002",x"4116",x"A007",x"A003",x"FFFA",x"3114",x"0001",x"4116",x"A009",x"A003",x"FFFA",x"3116",x"0001",x"4116", -- 0160-016F
  x"A00A",x"A003",x"FFFA",x"3118",x"0004",x"4116",x"B412",x"A003",x"FFFA",x"311D",x"0004",x"4116",x"B502",x"A003",x"FFFA",x"3122", -- 0170-017F
  x"0003",x"4116",x"B501",x"A003",x"FFFA",x"3126",x"0003",x"4116",x"B434",x"A003",x"FFFA",x"312A",x"0004",x"4116",x"B300",x"A003", -- 0180-018F
  x"FFFA",x"312F",x"0005",x"4116",x"B43C",x"A003",x"FFFA",x"3135",x"0005",x"4116",x"B60C",x"A003",x"FFFA",x"313B",x"0004",x"4116", -- 0190-019F
  x"B603",x"A003",x"FFFA",x"3140",x"0005",x"4116",x"B200",x"A003",x"FFFA",x"3146",x"0004",x"4116",x"8000",x"A003",x"FFFA",x"314B", -- 01A0-01AF
  x"0002",x"4781",x"2F13",x"A00A",x"A009",x"0001",x"2F13",x"42C4",x"A003",x"FFF5",x"314E",x"0002",x"4781",x"2F13",x"A00A",x"405A", -- 01B0-01BF
  x"B501",x"4300",x"B412",x"B501",x"A00A",x"41B2",x"4286",x"B412",x"428D",x"B501",x"A00D",x"9FF6",x"B200",x"0020",x"41B2",x"A003", -- 01C0-01CF
  x"FFE9",x"3151",x"0007",x"477A",x"45E4",x"2F10",x"A00A",x"9003",x"41BD",x"42CF",x"46A7",x"A003",x"FFF4",x"3159",x"0005",x"4781", -- 01D0-01DF
  x"46B1",x"0001",x"2F10",x"A009",x"4300",x"41D3",x"FFFF",x"2F15",x"42C4",x"A003",x"FFF2",x"315F",x"0001",x"0022",x"41D4",x"A003", -- 01E0-01EF
  x"FFFA",x"3161",x"0002",x"0022",x"41D4",x"433C",x"A003",x"FFF9",x"3164",x"0004",x"4781",x"2F0F",x"A00A",x"A003",x"FFF9",x"3169", -- 01F0-01FF
  x"0005",x"4781",x"0008",x"A003",x"FFFA",x"316F",x"0006",x"4781",x"0009",x"A003",x"FFFA",x"3176",x"0006",x"4781",x"0000",x"1000", -- 0200-020F
  x"B434",x"A002",x"B412",x"B300",x"B412",x"0FFF",x"A008",x"A00E",x"A003",x"FFF1",x"317D",x"0005",x"4781",x"2F0F",x"42C4",x"A003", -- 0210-021F
  x"FFF9",x"3183",x"0007",x"4781",x"41FB",x"4286",x"4294",x"4202",x"420E",x"4300",x"A003",x"FFF5",x"318B",x"0008",x"4781",x"41FB", -- 0220-022F
  x"4286",x"4294",x"4208",x"420E",x"4300",x"A003",x"FFF5",x"3194",x"0005",x"4773",x"41FB",x"A003",x"FFFA",x"319A",x"0005",x"4773", -- 0230-023F
  x"4224",x"A003",x"FFFA",x"31A0",x"0005",x"4773",x"422F",x"A003",x"FFFA",x"31A6",x"0002",x"4773",x"4208",x"0001",x"421D",x"41FB", -- 0240-024F
  x"A003",x"FFF7",x"31A9",x"0006",x"4773",x"41FB",x"B502",x"4294",x"B434",x"420E",x"B412",x"428D",x"A009",x"A003",x"FFF3",x"31B0", -- 0250-025F
  x"0004",x"4773",x"0001",x"421D",x"4254",x"4202",x"41FB",x"A003",x"FFF6",x"31B5",x"0005",x"4773",x"424B",x"A003",x"FFFA",x"31BB", -- 0260-026F
  x"0006",x"4773",x"B434",x"423F",x"4254",x"A003",x"FFF8",x"31C2",x"0002",x"4781",x"A00A",x"A003",x"FFFA",x"31C5",x"0002",x"4781", -- 0270-027F
  x"A009",x"A003",x"FFFA",x"31C8",x"0002",x"4781",x"0001",x"A007",x"A003",x"FFF9",x"31CB",x"0002",x"4781",x"FFFF",x"A007",x"A003", -- 0280-028F
  x"FFF9",x"31CE",x"0002",x"4781",x"A000",x"A007",x"A003",x"FFF9",x"31D1",x"0001",x"4781",x"4294",x"A00D",x"A003",x"FFF9",x"31D3", -- 0290-029F
  x"0002",x"4781",x"4294",x"A00F",x"A003",x"FFF9",x"31D6",x"0001",x"4781",x"B412",x"42A2",x"A003",x"FFF9",x"31D8",x"0002",x"4781", -- 02A0-02AF
  x"0000",x"B434",x"B434",x"A002",x"B412",x"B300",x"A003",x"FFF5",x"31DB",x"0003",x"4781",x"31DF",x"0004",x"41F5",x"8FFC",x"A003", -- 02B0-02BF
  x"FFF7",x"31E4",x"0002",x"4781",x"B412",x"B502",x"A00A",x"A007",x"B412",x"A009",x"A003",x"FFF5",x"31E7",x"0002",x"4781",x"2802", -- 02C0-02CF
  x"A00A",x"4286",x"A00A",x"2802",x"A00A",x"4286",x"2802",x"B603",x"A00A",x"A00A",x"B412",x"A009",x"A009",x"A003",x"FFED",x"31EA", -- 02D0-02DF
  x"0002",x"4781",x"2802",x"A00A",x"B501",x"428D",x"2802",x"B603",x"A00A",x"A00A",x"B412",x"B501",x"428D",x"2802",x"A009",x"A009", -- 02E0-02EF
  x"A009",x"A009",x"A003",x"FFEB",x"31ED",x"0001",x"4781",x"2802",x"A00A",x"4286",x"A00A",x"A003",x"FFF7",x"31EF",x"0001",x"4781", -- 02F0-02FF
  x"2F0F",x"A00A",x"A009",x"0001",x"2F0F",x"42C4",x"A003",x"FFF5",x"31F1",x"0007",x"4781",x"2803",x"A009",x"A003",x"FFF9",x"31F9", -- 0300-030F
  x"0003",x"4781",x"8000",x"44AC",x"A00B",x"9002",x"B300",x"8FFA",x"A003",x"FFF5",x"31FD",x"0004",x"4781",x"014C",x"430B",x"A003", -- 0310-031F
  x"FFF9",x"3202",x"0005",x"4781",x"0000",x"B412",x"0010",x"A002",x"B412",x"A003",x"FFF6",x"3208",x"0003",x"4781",x"B501",x"000A", -- 0320-032F
  x"42A2",x"9001",x"8002",x"0007",x"A007",x"0030",x"A007",x"A003",x"FFF2",x"320C",x"0004",x"4781",x"B501",x"9008",x"B412",x"B501", -- 0330-033F
  x"427A",x"431D",x"4286",x"B412",x"428D",x"8FF6",x"B200",x"A003",x"FFF0",x"3211",x"0003",x"4781",x"4324",x"432E",x"431D",x"4324", -- 0340-034F
  x"432E",x"431D",x"4324",x"432E",x"431D",x"4324",x"432E",x"431D",x"B300",x"A003",x"FFEE",x"3215",x"0002",x"4781",x"434C",x"0020", -- 0350-035F
  x"431D",x"A003",x"FFF8",x"3218",x"0002",x"4781",x"A00A",x"435E",x"A003",x"FFF9",x"321B",x"0002",x"4781",x"2F07",x"A00A",x"2F0F", -- 0360-036F
  x"A00A",x"4294",x"2F10",x"A00A",x"A00D",x"A00B",x"A00E",x"2F00",x"A00A",x"A00D",x"A00B",x"A008",x"9028",x"003C",x"431D",x"321E", -- 0370-037F
  x"0003",x"41F5",x"2F07",x"A00A",x"435E",x"2F06",x"A00A",x"435E",x"003C",x"431D",x"3222",x"0004",x"41F5",x"003C",x"431D",x"3227", -- 0380-038F
  x"0003",x"41F5",x"2F0F",x"A00A",x"435E",x"2F13",x"A00A",x"435E",x"003C",x"431D",x"322B",x"0004",x"41F5",x"2F0F",x"A00A",x"2F07", -- 0390-039F
  x"A009",x"2F13",x"A00A",x"2F06",x"A009",x"000A",x"431D",x"A003",x"FFC1",x"3230",x"000A",x"4781",x"A003",x"FFFB",x"323B",x"0007", -- 03A0-03AF
  x"4781",x"436D",x"3243",x"0019",x"41F5",x"0020",x"431D",x"0008",x"431D",x"4312",x"001B",x"429B",x"9FF8",x"A003",x"FFEF",x"325D", -- 03B0-03BF
  x"0005",x"4781",x"B501",x"2F0E",x"A009",x"0000",x"2F10",x"A009",x"436D",x"2F0A",x"A00A",x"2F0C",x"A00A",x"2F0A",x"A00A",x"4294", -- 03C0-03CF
  x"428D",x"433C",x"3263",x"0003",x"41F5",x"3267",x"000A",x"41EF",x"46C6",x"436D",x"3272",x"0016",x"41F5",x"435E",x"43B1",x"4713", -- 03D0-03DF
  x"A003",x"FFDD",x"3289",x"0004",x"4781",x"2801",x"A00A",x"2F15",x"A009",x"A003",x"FFF7",x"328E",x"0004",x"4781",x"2801",x"A00A", -- 03E0-03EF
  x"2F15",x"A00A",x"4294",x"9002",x"0009",x"43C2",x"A003",x"FFF3",x"3293",x"0005",x"4781",x"4286",x"2F17",x"A00A",x"B502",x"4294", -- 03F0-03FF
  x"B501",x"2F17",x"A009",x"A009",x"A003",x"FFF2",x"3299",x"0009",x"4781",x"2F17",x"A00A",x"B501",x"A00A",x"A007",x"2F17",x"A009", -- 0400-040F
  x"A003",x"FFF4",x"32A3",x"0002",x"4781",x"2F17",x"A00A",x"4286",x"A003",x"FFF8",x"32A6",x"0002",x"4781",x"2F17",x"A00A",x"0002", -- 0410-041F
  x"A007",x"A003",x"FFF7",x"32A9",x"0002",x"4781",x"2F17",x"A00A",x"0003",x"A007",x"A003",x"FFF7",x"32AC",x"0002",x"4781",x"2F17", -- 0420-042F
  x"A00A",x"0004",x"A007",x"A003",x"FFF7",x"32AF",x"0002",x"4781",x"2F17",x"A00A",x"0005",x"A007",x"A003",x"FFF7",x"32B2",x"0002", -- 0430-043F
  x"4781",x"2F17",x"A00A",x"0006",x"A007",x"A003",x"FFF7",x"32B5",x"0002",x"4781",x"2F17",x"A00A",x"0007",x"A007",x"A003",x"FFF7", -- 0440-044F
  x"32B8",x"0002",x"4781",x"2F17",x"A00A",x"0008",x"A007",x"A003",x"FFF7",x"32BB",x"0001",x"4773",x"0020",x"45E4",x"465E",x"469E", -- 0450-045F
  x"B300",x"4286",x"2F10",x"A00A",x"9001",x"405A",x"A003",x"FFF1",x"32BD",x"0005",x"4781",x"B501",x"A00A",x"4286",x"B501",x"03FF", -- 0460-046F
  x"A008",x"0000",x"429B",x"9002",x"FC00",x"A007",x"B412",x"A009",x"A003",x"FFEE",x"32C3",x"0007",x"4781",x"2800",x"A00A",x"B501", -- 0470-047F
  x"0008",x"42A2",x"9009",x"0018",x"A007",x"A00A",x"B501",x"9002",x"B501",x"430B",x"B300",x"8018",x"2F03",x"A00A",x"A009",x"2F03", -- 0480-048F
  x"446B",x"2F03",x"A00A",x"2F04",x"A00A",x"4294",x"03FF",x"A008",x"0080",x"42A9",x"9009",x"2F05",x"A00A",x"A00D",x"9005",x"FFFF", -- 0490-049F
  x"2F05",x"A009",x"0013",x"431D",x"0000",x"2800",x"A009",x"A003",x"FFD1",x"32CB",x"0008",x"4781",x"2F04",x"A00A",x"2F03",x"A00A", -- 04A0-04AF
  x"429B",x"9003",x"0000",x"0000",x"8018",x"2F04",x"A00A",x"A00A",x"FFFF",x"2F04",x"446B",x"2F03",x"A00A",x"2F04",x"A00A",x"4294", -- 04B0-04BF
  x"03FF",x"A008",x"0020",x"42A2",x"9008",x"2F05",x"A00A",x"9005",x"0000",x"2F05",x"A009",x"0011",x"431D",x"A003",x"FFDA",x"32D4", -- 04C0-04CF
  x"0006",x"4781",x"0005",x"43FB",x"4426",x"A009",x"441D",x"A009",x"441D",x"A00A",x"4438",x"A009",x"4312",x"B501",x"0014",x"429B", -- 04D0-04DF
  x"9004",x"B300",x"441D",x"A00A",x"427A",x"B501",x"007F",x"429B",x"9002",x"B300",x"0008",x"B501",x"0008",x"429B",x"9012",x"4438", -- 04E0-04EF
  x"A00A",x"441D",x"A00A",x"42A2",x"900C",x"FFFF",x"441D",x"42C4",x"0001",x"4426",x"42C4",x"0008",x"431D",x"0020",x"431D",x"0008", -- 04F0-04FF
  x"431D",x"B501",x"0020",x"42A2",x"9001",x"8012",x"FFFF",x"4426",x"42C4",x"4426",x"A00A",x"A00F",x"9002",x"0006",x"43C2",x"B501", -- 0500-050F
  x"431D",x"B501",x"441D",x"A00A",x"4280",x"0001",x"441D",x"42C4",x"B501",x"0020",x"42A2",x"B502",x"0008",x"429B",x"A00B",x"A008", -- 0510-051F
  x"B412",x"001B",x"429B",x"A00B",x"A008",x"4426",x"A00A",x"A00D",x"A00E",x"9FB2",x"0020",x"431D",x"4438",x"A00A",x"441D",x"A00A", -- 0520-052F
  x"4438",x"A00A",x"4294",x"B603",x"A007",x"0000",x"B412",x"4280",x"4409",x"A003",x"FF94",x"32DB",x"0005",x"4781",x"B501",x"0030", -- 0530-053F
  x"42A2",x"A00B",x"B502",x"003A",x"42A2",x"A008",x"B502",x"0041",x"42A2",x"A00B",x"A00E",x"B501",x"9015",x"B412",x"0030",x"4294", -- 0540-054F
  x"B501",x"000A",x"42A2",x"A00B",x"9002",x"0007",x"4294",x"B501",x"2F08",x"A00A",x"42A2",x"A00B",x"9004",x"B300",x"B300",x"0000", -- 0550-055F
  x"0000",x"B412",x"A003",x"FFD7",x"32E1",x"0006",x"4781",x"0007",x"43FB",x"441D",x"A009",x"4415",x"A009",x"0000",x"441D",x"A00A", -- 0560-056F
  x"9063",x"B501",x"4426",x"A009",x"0001",x"4441",x"A009",x"FFFF",x"444A",x"A009",x"4415",x"A00A",x"4426",x"A00A",x"A007",x"427A", -- 0570-057F
  x"002B",x"429B",x"9009",x"4426",x"A00A",x"4286",x"4426",x"A009",x"0000",x"444A",x"A009",x"8016",x"4415",x"A00A",x"4426",x"A00A", -- 0580-058F
  x"A007",x"427A",x"002D",x"429B",x"900D",x"4426",x"A00A",x"4286",x"4426",x"A009",x"0000",x"444A",x"A009",x"4441",x"A00A",x"A000", -- 0590-059F
  x"4441",x"A009",x"444A",x"A00A",x"9FD2",x"4426",x"A00A",x"441D",x"A00A",x"42A2",x"9029",x"4415",x"A00A",x"4426",x"A00A",x"A007", -- 05A0-05AF
  x"427A",x"B501",x"9015",x"453E",x"A00B",x"9007",x"B300",x"441D",x"A00A",x"A000",x"441D",x"A009",x"800A",x"B412",x"2F08",x"A00A", -- 05B0-05BF
  x"42B0",x"A007",x"4426",x"A00A",x"4286",x"4426",x"A009",x"8005",x"B300",x"4426",x"A00A",x"441D",x"A009",x"4426",x"A00A",x"441D", -- 05C0-05CF
  x"A00A",x"42A2",x"A00B",x"9FD7",x"4441",x"A00A",x"A00F",x"9001",x"A000",x"4426",x"A00A",x"441D",x"A00A",x"4294",x"4409",x"A003", -- 05D0-05DF
  x"FF83",x"32E8",x"0004",x"4781",x"42E2",x"2F0C",x"A00A",x"2F0B",x"A009",x"2F0C",x"A00A",x"427A",x"42F7",x"429B",x"2F0C",x"A00A", -- 05E0-05EF
  x"2F0D",x"A00A",x"42A2",x"A008",x"9004",x"0001",x"2F0C",x"42C4",x"8FF0",x"2F0C",x"A00A",x"2F0B",x"A009",x"2F0C",x"A00A",x"427A", -- 05F0-05FF
  x"003C",x"429B",x"9004",x"2F0C",x"A00A",x"2F0D",x"A009",x"2F0C",x"A00A",x"427A",x"42F7",x"429B",x"A00B",x"2F0C",x"A00A",x"2F0D", -- 0600-060F
  x"A00A",x"42A2",x"A008",x"9004",x"0001",x"2F0C",x"42C4",x"8FE5",x"2F0B",x"A00A",x"2F0C",x"A00A",x"B502",x"4294",x"B501",x"9003", -- 0610-061F
  x"0001",x"2F0C",x"42C4",x"42CF",x"B300",x"A003",x"FFBA",x"32ED",x"0002",x"4781",x"42E2",x"B502",x"42F7",x"4294",x"9007",x"42CF", -- 0620-062F
  x"B300",x"B300",x"B300",x"B300",x"0000",x"8023",x"42CF",x"B300",x"B412",x"0000",x"B603",x"4294",x"9016",x"42E2",x"42E2",x"B502", -- 0630-063F
  x"427A",x"B502",x"427A",x"4294",x"9004",x"B300",x"B300",x"0000",x"0000",x"B501",x"9004",x"4286",x"B412",x"4286",x"B412",x"42CF", -- 0640-064F
  x"42CF",x"4286",x"8FE7",x"B200",x"B300",x"9002",x"FFFF",x"8001",x"0000",x"A003",x"FFCC",x"32F0",x"0004",x"4781",x"42E2",x"42E2", -- 0650-065F
  x"0000",x"2F11",x"A00A",x"2F01",x"A00A",x"9003",x"B501",x"A00A",x"A007",x"B501",x"4286",x"B501",x"A00A",x"B412",x"4286",x"A00A", -- 0660-066F
  x"42CF",x"42CF",x"B603",x"42E2",x"42E2",x"462A",x"9003",x"B412",x"A00D",x"B412",x"B502",x"A00D",x"B502",x"A00A",x"A00D",x"A00B", -- 0670-067F
  x"A008",x"B502",x"B501",x"A00A",x"A007",x"2F11",x"A00A",x"429B",x"A00B",x"A008",x"9004",x"B501",x"A00A",x"A007",x"8FDA",x"42CF", -- 0680-068F
  x"B300",x"42CF",x"B434",x"A00D",x"9004",x"B300",x"B300",x"0000",x"0000",x"A003",x"FFC0",x"32F5",x"0004",x"4781",x"B412",x"0003", -- 0690-069F
  x"A007",x"B412",x"A003",x"FFF7",x"32FA",x"0008",x"4781",x"0004",x"0000",x"4047",x"A00E",x"4300",x"A003",x"FFF6",x"3303",x"0006", -- 06A0-06AF
  x"4781",x"43E5",x"2F0F",x"A00A",x"2F11",x"A00A",x"B502",x"4294",x"4300",x"2F11",x"A009",x"0020",x"45E4",x"41BD",x"0001",x"2F01", -- 06B0-06BF
  x"A009",x"A003",x"FFEB",x"330A",x"0009",x"4781",x"2F0A",x"A00A",x"42E2",x"2F0B",x"A00A",x"42E2",x"2F0C",x"A00A",x"42E2",x"2F0D", -- 06C0-06CF
  x"A00A",x"42E2",x"B502",x"A007",x"2F0D",x"A009",x"B501",x"2F0A",x"A009",x"B501",x"2F0B",x"A009",x"2F0C",x"A009",x"0020",x"45E4", -- 06D0-06DF
  x"B501",x"901F",x"B603",x"465E",x"B501",x"9009",x"42E2",x"42E2",x"B200",x"42CF",x"42CF",x"469E",x"B300",x"430B",x"8011",x"B200", -- 06E0-06EF
  x"B603",x"4567",x"9005",x"B200",x"B300",x"0003",x"43C2",x"8008",x"B434",x"B300",x"B412",x"B300",x"2F10",x"A00A",x"9001",x"405A", -- 06F0-06FF
  x"8FDD",x"B200",x"42CF",x"2F0D",x"A009",x"42CF",x"2F0C",x"A009",x"42CF",x"2F0B",x"A009",x"42CF",x"2F0A",x"A009",x"A003",x"FFB3", -- 0700-070F
  x"3314",x"0004",x"4781",x"2F02",x"A00A",x"2802",x"A009",x"2F00",x"A00A",x"9006",x"003C",x"431D",x"3319",x"0004",x"41F5",x"8003", -- 0710-071F
  x"331E",x"0002",x"41F5",x"436D",x"2F09",x"A00A",x"0100",x"44D2",x"B502",x"A00A",x"003C",x"429B",x"9002",x"B200",x"802B",x"2F00", -- 0720-072F
  x"A00A",x"900C",x"003C",x"431D",x"3321",x"0003",x"41F5",x"46C6",x"003C",x"431D",x"3325",x"0004",x"41F5",x"801C",x"001B",x"431D", -- 0730-073F
  x"005B",x"431D",x"0033",x"431D",x"0036",x"431D",x"006D",x"431D",x"46C6",x"2F10",x"A00A",x"A00D",x"9003",x"332A",x"0002",x"41F5", -- 0740-074F
  x"001B",x"431D",x"005B",x"431D",x"0033",x"431D",x"0039",x"431D",x"006D",x"431D",x"8FC8",x"A003",x"FFB3",x"332D",x"0005",x"4781", -- 0750-075F
  x"3333",x"000B",x"41F5",x"436D",x"436D",x"4713",x"A003",x"FFF5",x"333F",x"0006",x"4781",x"0000",x"2F01",x"A009",x"A003",x"FFF8", -- 0760-076F
  x"3346",x"000C",x"4781",x"42CF",x"42E2",x"A003",x"FFF9",x"3353",x"000A",x"4781",x"42CF",x"46A7",x"A003",x"FFF9",x"335E",x"0003", -- 0770-077F
  x"4781",x"42CF",x"2F10",x"A00A",x"9002",x"46A7",x"8001",x"42E2",x"A003",x"FFF4",x"3362",x"000A",x"4781",x"46B1",x"0001",x"2F10", -- 0780-078F
  x"A009",x"4772",x"A003",x"FFF6",x"336D",x"0008",x"4781",x"46B1",x"0001",x"2F10",x"A009",x"4779",x"A003",x"FFF6",x"3376",x"0001", -- 0790-079F
  x"4781",x"46B1",x"0001",x"2F10",x"A009",x"4780",x"A003",x"FFF6",x"3378",x"0001",x"4773",x"0000",x"2F10",x"A009",x"43EE",x"410E", -- 07A0-07AF
  x"4300",x"476B",x"A003",x"FFF4",x"337A",x"0003",x"4781",x"2F16",x"A00A",x"9005",x"4324",x"B300",x"4324",x"B300",x"8006",x"4324", -- 07B0-07BF
  x"432E",x"431D",x"4324",x"432E",x"431D",x"4324",x"432E",x"431D",x"4324",x"432E",x"431D",x"B300",x"A003",x"FFE6",x"337E",x"0003", -- 07C0-07CF
  x"4781",x"3382",x"0001",x"41F5",x"0022",x"431D",x"47B7",x"0022",x"431D",x"3384",x"0001",x"41F5",x"A003",x"FFF0",x"3386",x"0005", -- 07D0-07DF
  x"4781",x"2F16",x"A009",x"2F00",x"A00A",x"42E2",x"0000",x"2F00",x"A009",x"338C",x"0008",x"41EF",x"46C6",x"0004",x"0000",x"4047", -- 07E0-07EF
  x"A00E",x"0010",x"A009",x"436D",x"003C",x"431D",x"3395",x"0006",x"41F5",x"436D",x"339C",x"0002",x"41F5",x"0000",x"B603",x"A007", -- 07F0-07FF
  x"B501",x"2F03",x"429B",x"9002",x"B300",x"2F04",x"B501",x"2F17",x"429B",x"9005",x"B300",x"2F00",x"2F80",x"A009",x"2F80",x"A00A", -- 0800-080F
  x"47D1",x"4286",x"B501",x"0010",x"429B",x"9FE8",x"B300",x"339F",x"0004",x"41F5",x"B501",x"434C",x"33A4",x"0001",x"41F5",x"B501", -- 0810-081F
  x"000F",x"A007",x"434C",x"0010",x"A007",x"B603",x"42A9",x"A00B",x"9FD0",x"B200",x"436D",x"003C",x"431D",x"33A6",x"0007",x"41F5", -- 0820-082F
  x"42CF",x"2F00",x"A009",x"A003",x"FFA9",x"33AE",x"0005",x"4069",x"2F20",x"FFFB",x"33B4",x"0008",x"4781",x"2F20",x"A00A",x"B501", -- 0830-083F
</DUMPZ></ok>
BZEIG @ 3000 -1 DUMPZ   ( generiert ByteRAM für P20_FFP.vhd Step_10 ) <ok>
<DUMPZ>
  x"28",x"20",x"7B",x"20",x"7D",x"20",x"43",x"4F",x"4D",x"50",x"49",x"4C",x"45",x"20",x"4D",x"4C", -- 3000-300F
  x"49",x"54",x"20",x"41",x"42",x"53",x"20",x"4C",x"49",x"54",x"2C",x"20",x"28",x"43",x"4F",x"4E", -- 3010-301F
  x"53",x"54",x"41",x"4E",x"54",x"3A",x"29",x"20",x"43",x"4F",x"4E",x"53",x"54",x"41",x"4E",x"54", -- 3020-302F
  x"20",x"4B",x"45",x"59",x"41",x"44",x"52",x"20",x"53",x"50",x"20",x"52",x"50",x"20",x"50",x"43", -- 3030-303F
  x"20",x"58",x"42",x"49",x"54",x"20",x"53",x"4D",x"55",x"44",x"47",x"45",x"42",x"49",x"54",x"20", -- 3040-304F
  x"52",x"50",x"30",x"20",x"49",x"52",x"41",x"4D",x"41",x"44",x"52",x"20",x"4A",x"52",x"41",x"4D", -- 3050-305F
  x"41",x"44",x"52",x"20",x"58",x"4F",x"46",x"46",x"20",x"43",x"52",x"42",x"5A",x"45",x"49",x"47", -- 3060-306F
  x"20",x"43",x"52",x"44",x"50",x"20",x"42",x"41",x"53",x"45",x"20",x"54",x"49",x"42",x"20",x"49", -- 3070-307F
  x"4E",x"31",x"20",x"49",x"4E",x"32",x"20",x"49",x"4E",x"33",x"20",x"49",x"4E",x"34",x"20",x"45", -- 3080-308F
  x"52",x"52",x"4F",x"52",x"4E",x"52",x"20",x"44",x"50",x"20",x"53",x"54",x"41",x"54",x"20",x"4C", -- 3090-309F
  x"46",x"41",x"20",x"42",x"41",x"4E",x"46",x"20",x"42",x"5A",x"45",x"49",x"47",x"20",x"44",x"50", -- 30A0-30AF
  x"4D",x"45",x"52",x"4B",x"20",x"43",x"53",x"50",x"20",x"44",x"55",x"42",x"49",x"54",x"20",x"4C", -- 30B0-30BF
  x"4F",x"43",x"41",x"4C",x"41",x"44",x"52",x"45",x"53",x"53",x"45",x"20",x"56",x"45",x"52",x"53", -- 30C0-30CF
  x"49",x"4F",x"4E",x"20",x"52",x"45",x"54",x"55",x"52",x"4E",x"20",x"28",x"4D",x"43",x"4F",x"44", -- 30D0-30DF
  x"45",x"3A",x"29",x"20",x"4D",x"43",x"4F",x"44",x"45",x"20",x"4D",x"49",x"4E",x"55",x"53",x"20", -- 30E0-30EF
  x"55",x"2B",x"20",x"55",x"2A",x"20",x"30",x"3D",x"20",x"30",x"4C",x"54",x"20",x"45",x"4D",x"49", -- 30F0-30FF
  x"54",x"43",x"4F",x"44",x"45",x"20",x"4E",x"4F",x"54",x"20",x"41",x"4E",x"44",x"20",x"4F",x"52", -- 3100-310F
  x"20",x"4D",x"2B",x"20",x"21",x"20",x"40",x"20",x"53",x"57",x"41",x"50",x"20",x"4F",x"56",x"45", -- 3110-311F
  x"52",x"20",x"44",x"55",x"50",x"20",x"52",x"4F",x"54",x"20",x"44",x"52",x"4F",x"50",x"20",x"32", -- 3120-312F
  x"53",x"57",x"41",x"50",x"20",x"32",x"4F",x"56",x"45",x"52",x"20",x"32",x"44",x"55",x"50",x"20", -- 3130-313F
  x"32",x"44",x"52",x"4F",x"50",x"20",x"4E",x"4F",x"4F",x"50",x"20",x"42",x"2C",x"20",x"5A",x"2C", -- 3140-314F
  x"20",x"28",x"57",x"4F",x"52",x"44",x"3A",x"29",x"20",x"57",x"4F",x"52",x"44",x"3A",x"20",x"22", -- 3150-315F
  x"20",x"2E",x"22",x"20",x"48",x"45",x"52",x"45",x"20",x"4A",x"52",x"42",x"49",x"54",x"20",x"4A", -- 3160-316F
  x"52",x"30",x"42",x"49",x"54",x"20",x"58",x"53",x"45",x"54",x"42",x"54",x"20",x"41",x"4C",x"4C", -- 3170-317F
  x"4F",x"54",x"20",x"42",x"52",x"41",x"4E",x"43",x"48",x"2C",x"20",x"30",x"42",x"52",x"41",x"4E", -- 3180-318F
  x"43",x"48",x"2C",x"20",x"42",x"45",x"47",x"49",x"4E",x"20",x"41",x"47",x"41",x"49",x"4E",x"20", -- 3190-319F
  x"55",x"4E",x"54",x"49",x"4C",x"20",x"49",x"46",x"20",x"45",x"4E",x"44",x"5F",x"49",x"46",x"20", -- 31A0-31AF
  x"45",x"4C",x"53",x"45",x"20",x"57",x"48",x"49",x"4C",x"45",x"20",x"52",x"45",x"50",x"45",x"41", -- 31B0-31BF
  x"54",x"20",x"43",x"40",x"20",x"43",x"21",x"20",x"31",x"2B",x"20",x"31",x"2D",x"20",x"4D",x"2D", -- 31C0-31CF
  x"20",x"3D",x"20",x"4C",x"54",x"20",x"3E",x"20",x"4D",x"2A",x"20",x"42",x"59",x"45",x"20",x"42", -- 31D0-31DF
  x"59",x"45",x"20",x"20",x"2B",x"21",x"20",x"52",x"3E",x"20",x"3E",x"52",x"20",x"52",x"20",x"2C", -- 31E0-31EF
  x"20",x"45",x"58",x"45",x"43",x"55",x"54",x"45",x"20",x"4B",x"45",x"59",x"20",x"45",x"4D",x"49", -- 31F0-31FF
  x"54",x"20",x"53",x"48",x"4C",x"31",x"36",x"20",x"44",x"49",x"47",x"20",x"54",x"59",x"50",x"45", -- 3200-320F
  x"20",x"48",x"47",x"2E",x"20",x"4D",x"2E",x"20",x"4D",x"3F",x"20",x"43",x"52",x"20",x"66",x"6C", -- 3210-321F
  x"3E",x"20",x"2F",x"66",x"6C",x"3E",x"20",x"66",x"72",x"3E",x"20",x"2F",x"66",x"72",x"3E",x"20", -- 3220-322F
  x"46",x"45",x"48",x"4C",x"45",x"52",x"54",x"45",x"58",x"54",x"20",x"44",x"49",x"53",x"41",x"42", -- 3230-323F
  x"4C",x"45",x"20",x"77",x"65",x"69",x"74",x"65",x"72",x"20",x"6E",x"61",x"63",x"68",x"20",x"54", -- 3240-324F
  x"61",x"73",x"74",x"65",x"20",x"45",x"53",x"43",x"41",x"50",x"45",x"20",x"20",x"45",x"52",x"52", -- 3250-325F
  x"4F",x"52",x"20",x"3F",x"3F",x"3F",x"20",x"46",x"45",x"48",x"4C",x"45",x"52",x"54",x"45",x"58", -- 3260-326F
  x"54",x"20",x"45",x"52",x"52",x"4F",x"52",x"20",x"2D",x"20",x"46",x"65",x"68",x"6C",x"65",x"72", -- 3270-327F
  x"20",x"4E",x"75",x"6D",x"6D",x"65",x"72",x"20",x"20",x"43",x"53",x"50",x"21",x"20",x"43",x"53", -- 3280-328F
  x"50",x"3F",x"20",x"4C",x"4F",x"43",x"41",x"4C",x"20",x"45",x"4E",x"44",x"5F",x"4C",x"4F",x"43", -- 3290-329F
  x"41",x"4C",x"20",x"4C",x"30",x"20",x"4C",x"31",x"20",x"4C",x"32",x"20",x"4C",x"33",x"20",x"4C", -- 32A0-32AF
  x"34",x"20",x"4C",x"35",x"20",x"4C",x"36",x"20",x"4C",x"37",x"20",x"27",x"20",x"49",x"4E",x"43", -- 32B0-32BF
  x"52",x"34",x"20",x"4B",x"45",x"59",x"5F",x"49",x"4E",x"54",x"20",x"4B",x"45",x"59",x"43",x"4F", -- 32C0-32CF
  x"44",x"45",x"32",x"20",x"45",x"58",x"50",x"45",x"43",x"54",x"20",x"44",x"49",x"47",x"49",x"54", -- 32D0-32DF
  x"20",x"4E",x"55",x"4D",x"42",x"45",x"52",x"20",x"57",x"4F",x"52",x"44",x"20",x"5A",x"3D",x"20", -- 32E0-32EF
  x"46",x"49",x"4E",x"44",x"20",x"4C",x"43",x"46",x"41",x"20",x"43",x"4F",x"4D",x"50",x"49",x"4C", -- 32F0-32FF
  x"45",x"2C",x"20",x"43",x"52",x"45",x"41",x"54",x"45",x"20",x"49",x"4E",x"54",x"45",x"52",x"50", -- 3300-330F
  x"52",x"45",x"54",x"20",x"51",x"55",x"49",x"54",x"20",x"2F",x"6F",x"6B",x"3E",x"20",x"6F",x"6B", -- 3310-331F
  x"20",x"6F",x"6B",x"3E",x"20",x"2F",x"6F",x"6B",x"3E",x"20",x"6F",x"6B",x"20",x"53",x"54",x"41", -- 3320-332F
  x"52",x"54",x"20",x"46",x"4F",x"52",x"54",x"59",x"2D",x"46",x"4F",x"52",x"54",x"48",x"20",x"53", -- 3330-333F
  x"4D",x"55",x"44",x"47",x"45",x"20",x"28",x"49",x"4D",x"4D",x"45",x"44",x"49",x"41",x"54",x"45", -- 3340-334F
  x"3A",x"29",x"20",x"28",x"43",x"4F",x"4D",x"50",x"49",x"4C",x"45",x"3A",x"29",x"20",x"28",x"3A", -- 3350-335F
  x"29",x"20",x"49",x"4D",x"4D",x"45",x"44",x"49",x"41",x"54",x"45",x"3A",x"20",x"43",x"4F",x"4D", -- 3360-336F
  x"50",x"49",x"4C",x"45",x"3A",x"20",x"3A",x"20",x"3B",x"20",x"4C",x"47",x"2E",x"20",x"4E",x"47", -- 3370-337F
  x"2E",x"20",x"78",x"20",x"2C",x"20",x"44",x"55",x"4D",x"50",x"5A",x"20",x"27",x"20",x"53",x"54", -- 3380-338F
  x"41",x"52",x"54",x"20",x"20",x"44",x"55",x"4D",x"50",x"5A",x"3E",x"20",x"20",x"20",x"20",x"20", -- 3390-339F
  x"2D",x"2D",x"20",x"20",x"2D",x"20",x"2F",x"44",x"55",x"4D",x"50",x"5A",x"3E",x"20",x"52",x"41", -- 33A0-33AF
</DUMPZ></ok>
</sekt> 
 <ok></ok>
<sekt inhalt="Variablen"> 
2F20 CONSTANT RAMP1 RAMP1 1+ RAMP1 ! ( bis 2F17 sind neu BASE TIB ... ) <ok></ok><fl>0834 33AE </fl><fr>0839 33B4 </fr>
: VARIABLE RAMP1 @ DUP CONSTANT DUP 1+ RAMP1 ! ! ; <ok></ok><fl>0839 33B4 </fl><fr>0847 33BD </fr>
</sekt> 
 <ok></ok>
<sekt inhalt="noch paar hilfreiche Funktionen"> 
: MOVE ( adr1 adr2 n --> ) <ok></ok><fl>0847 33BD </fl><fr>084B 33C2 </fr>
  BEGIN DUP WHILE >R OVER @ OVER ! SWAP 1+ SWAP 1+ R> 1- REPEAT DROP 2DROP ; <ok></ok><fl>084B 33C2 </fl><fr>085C 33C2 </fr>
: FILL ( adr n b --> ) <ok></ok><fl>085C 33C2 </fl><fr>0860 33C7 </fr>
  ROT ROT BEGIN DUP WHILE >R 2DUP ! 1+ R> 1- REPEAT DROP 2DROP ; <ok></ok><fl>0860 33C7 </fl><fr>086E 33C7 </fr>
 <ok></ok>
: DUMP ( addr n --> ) <ok></ok><fl>086E 33C7 </fl><fr>0872 33CC </fr>
  BEGIN SWAP ( CR DUP M. ) DUP @ M. 1+ SWAP 1- DUP 0= UNTIL DROP ; <ok></ok><fl>0872 33CC </fl><fr>087E 33CC </fr>
 <ok></ok>
: MAX ( a b --> c ) <ok></ok><fl>087E 33CC </fl><fr>0882 33D0 </fr>
  2DUP LT IF SWAP END_IF DROP ; <ok></ok><fl>0882 33D0 </fl><fr>0888 33D0 </fr>
: MIN ( a b --> c ) <ok></ok><fl>0888 33D0 </fl><fr>088C 33D4 </fr>
  2DUP > IF SWAP END_IF DROP ; <ok></ok><fl>088C 33D4 </fl><fr>0892 33D4 </fr>
</sekt> 
 <ok></ok>
<sekt inhalt="Rechenoperationen zu verschiedenen Datentypen"> 
( leere Tabellenfelder sind nicht in Verwendung ) <ok></ok>
<table border="1"> 
  <tr><th>Rechenoperation</th>        <th>16-Bit-Arithmetik</th>        <th>große ganze Zahlen</th></tr> <ok></ok>
  <tr><td>absoluter Betrag</td>       <td>ABS ( a --> |a| ) </td>       <td>ABS ( n --> |n| )</td></tr> <ok></ok>
  <tr><td>Addition</td>               <td>M+ ( a b --> a+b ) </td>      <td>+ ( m n --> m+n ) </td></tr> <ok></ok>
  <tr><td>Subtraktion</td>            <td>M- ( a b --> a-b ) </td>      <td>- ( m n --> m-n ) </td></tr> <ok></ok>
  <tr><td>Stapelspitze ausgeben</td>  <td>M. ( a -->  /string/ )</td>   <td>. ( m -->  /string/ )</td></tr> <ok></ok>
  <tr><td>Speicherinhalt ausgeben</td><td>M? ( adr -->  /string/ )</td> <td>? ( adr -->  /string/ )</td></tr> <ok></ok>
  <tr><td>Inkrementieren</td>         <td>1+ ( a --> a+1 ) </td>        <td></td></tr> <ok></ok>
  <tr><td>Dekrementieren</td>         <td>1- ( a --> a+1 ) </td>        <td></td></tr> <ok></ok>
  <tr><td>kleiner als "&lt;"</td>     <td>LT ( a b --> a&lt;b )</td>    <td></td></tr> <ok></ok>
  <tr><td>größer als</td>             <td>> ( a b --> a>b )</td>        <td></td></tr> <ok></ok>
  <tr><td>Maximum</td>                <td>MAX ( a b --> max )</td>      <td></td></tr> <ok></ok>
  <tr><td>Minimum</td>                <td>MIN ( a b --> min )</td>      <td></td></tr> <ok></ok>
  <tr><td>Division mit Rest</td>      <td>M/MOD ( a b --> q r )</td>    <td>/MOD ( m n --> q r )</td></tr> <ok></ok>
  <tr><td>Division</td>               <td></td>                         <td>/ ( m n --> q )</td></tr> <ok></ok>
  <tr><td>Rest</td>                   <td></td>                         <td>MOD ( m n --> r )</td></tr> <ok></ok>
  <tr><td>Multiplikation</td>         <td></td>                         <td>* ( m n --> m*n )</td></tr> <ok></ok>
  <tr><td>größter gemeinsamer Teiler</td><td></td>                      <td>GGT ( m n --> ggt )</td></tr> <ok></ok>
  <tr><td>Kürzen</td>                 <td></td>                         <td>BK ( m n --> m/ggt n/ggt )</td></tr> <ok></ok>
  <tr><td>Potenzieren</td>            <td></td>                         <td>^ ( m n --> m^n )</td></tr> <ok></ok>
  <tr><td>Addition mit Übertrag</td>  <td>U+ ( u a b --> u' a+b+u ) </td><td></td></tr> <ok></ok>
  <tr><td>Multiplikation mit Übertrag</td><td>U* ( u a b --> u' a*b+u ) </td><td></td></tr> <ok></ok>
  </table> <ok></ok>
</sekt> 
 <ok></ok>
<sekt inhalt="Multiplikation"> 
A017 MCODE MULT_I <ok></ok><fl>0892 33D4 </fl><fr>0898 33DB </fr>
A018 MCODE MULT_II <ok></ok><fl>0898 33DB </fl><fr>089E 33E3 </fr>
: SUPERMULT ( a u adrc adrb n --> a u' adrc' adrb' ) <ok></ok><fl>089E 33E3 </fl><fr>08A2 33ED </fr>
  >R <ok></ok><fl>08A2 33ED </fl><fr>08A3 33ED </fr>
  BEGIN MULT_I MULT_II UNTIL <ok></ok><fl>08A3 33ED </fl><fr>08A6 33ED </fr>
  R> DROP ; ( /;> ) <ok></ok><fl>08A6 33ED </fl><fr>08A9 33ED </fr>
 <ok></ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
1401 CONSTANT A <ok></ok><fl>08A9 33ED </fl><fr>08AE 33EF </fr>
1601 CONSTANT B <ok></ok><fl>08AE 33EF </fl><fr>08B3 33F1 </fr>
1801 CONSTANT C <ok></ok><fl>08B3 33F1 </fl><fr>08B8 33F3 </fr>
A 1FF 1111 FILL <ok></ok>
B 1FF 1111 FILL <ok></ok>
C 3FF 0000 FILL <ok></ok>
 <ok></ok>
1111 0 C B 4 SUPERMULT M. M. M. M. <ok>1605 1805 0123 1111 </ok>
C 8 DUMP <ok>4321 4444 4444 4444 0000 0000 0000 0000 </ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
: SMUL ( s1 l1 x1 s2 l2 x2 x3 --> s3 l3 x3) <ok></ok><fl>08B8 33F3 </fl><fr>08BC 33F8 </fr>
       ( L0 L1 L2 L3 L4 L5 L6 ) <ok></ok><fl>08BC 33F8 </fl><fr>08BC 33F8 </fr>
  7 LOCAL <ok></ok><fl>08BC 33F8 </fl><fr>08BE 33F8 </fr>
  L6 ! L5 ! L4 ! L3 ! L2 ! L1 ! L0 ! <ok></ok><fl>08BE 33F8 </fl><fr>08CC 33F8 </fr>
  L0 @ L3 @ IF NOT END_IF <ok></ok><fl>08CC 33F8 </fl><fr>08D2 33F8 </fr>
  L1 @ L4 @ M+ 1+ <ok></ok><fl>08D2 33F8 </fl><fr>08D8 33F8 </fr>
  L6 @ OVER 0 FILL <ok></ok><fl>08D8 33F8 </fl><fr>08DD 33F8 </fr>
  L6 @  <ok></ok><fl>08DD 33F8 </fl><fr>08DF 33F8 </fr>
  DUP L2 @ L1 @ BEGIN <ok></ok><fl>08DF 33F8 </fl><fr>08E4 33F8 </fr>
    0 2OVER @ ROT ROT L5 @ L4 @ ( ... a u  adrc  adrb n ) <ok></ok><fl>08E4 33F8 </fl><fr>08ED 33F8 </fr>
    SUPERMULT                   ( ... a u' adrc' adrb' ) <ok></ok><fl>08ED 33F8 </fl><fr>08EE 33F8 </fr>
    DROP ! DROP <ok></ok><fl>08EE 33F8 </fl><fr>08F1 33F8 </fr>
 <ok></ok><fl>08F1 33F8 </fl><fr>08F1 33F8 </fr>
(    vorher: ) <ok></ok><fl>08F1 33F8 </fl><fr>08F1 33F8 </fr>
(    L4 @ 0  <ok></ok><fl>08F1 33F8 </fl><fr>08F1 33F8 </fr>
(    BEGIN OVER WHILE SWAP 1- SWAP <ok></ok><fl>08F1 33F8 </fl><fr>08F1 33F8 </fr>
(      0 SWAP  <ok></ok><fl>08F1 33F8 </fl><fr>08F1 33F8 </fr>
(      L6 @ @ L5 @ @ L2 @ @ U* D+  <ok></ok><fl>08F1 33F8 </fl><fr>08F1 33F8 </fr>
(      L6 @ DUP 1+ L6 ! ! <ok></ok><fl>08F1 33F8 </fl><fr>08F1 33F8 </fr>
(      L5 @ 1+ L5 ! <ok></ok><fl>08F1 33F8 </fl><fr>08F1 33F8 </fr>
(      REPEAT <ok></ok><fl>08F1 33F8 </fl><fr>08F1 33F8 </fr>
(    L6 @ ! DROP <ok></ok><fl>08F1 33F8 </fl><fr>08F1 33F8 </fr>
 <ok></ok><fl>08F1 33F8 </fl><fr>08F1 33F8 </fr>
    ROT 1+ ROT 1+ ROT 1- ( 1 L2 +! 1 L6 +! <ok></ok><fl>08F1 33F8 </fl><fr>08F7 33F8 </fr>
    DUP 0= UNTIL DROP 2DROP <ok></ok><fl>08F7 33F8 </fl><fr>08FC 33F8 </fr>
  END_LOCAL <ok></ok><fl>08FC 33F8 </fl><fr>08FD 33F8 </fr>
  ; <ok></ok><fl>08FD 33F8 </fl><fr>08FE 33F8 </fr>
 <ok></ok>
C 8 0 FILL <ok></ok>
0 2 A 0 2 B C SMUL M. M. M. <ok>1801 0005 0000 </ok>
C 8 DUMP <ok>4321 8765 4567 0123 0000 0000 0000 0000 </ok>
 <ok></ok>
C 201 0 FILL <ok></ok>
0 100 A 0 100 B C SMUL M. M. M. <ok>1801 0201 0000 </ok>
C 8 DUMP <ok>4321 8765 CBA9 0FED 5432 9876 DCBA 20FE </ok>
 <ok></ok>
C 101 0 FILL <ok></ok>
0 80 A 0 80 B C SMUL M. M. M. <ok>1801 0101 0000 </ok>
C 8 DUMP <ok>4321 8765 CBA9 0FED 5432 9876 DCBA 20FE </ok>
 <ok></ok>
( C 2001 0 FILL <ok></ok>
( 0 1000 A 0 1000 B C SMUL M. M. M. <ok></ok>
( C 8 DUMP <ok></ok>
</sekt> 
 <ok></ok>
<sekt inhalt="Addition">  
: ADDIER ( s1 l1 x1 s2 l2 x2 x3 --> s3 l3 x3 ) <ok></ok><fl>08FE 33F8 </fl><fr>0902 33FF </fr>
         ( L0 L1 L2 L3 L4 L5 L6 ) <ok></ok><fl>0902 33FF </fl><fr>0902 33FF </fr>
  7 LOCAL <ok></ok><fl>0902 33FF </fl><fr>0904 33FF </fr>
  L6 ! L5 ! L4 ! L3 ! L2 ! L1 ! L0 ! <ok></ok><fl>0904 33FF </fl><fr>0912 33FF </fr>
  L0 @ L1 @ L4 @ MAX 1+ L6 @ <ok></ok><fl>0912 33FF </fl><fr>091C 33FF </fr>
  L0 @ L3 @ = IF <ok></ok><fl>091C 33FF </fl><fr>0922 33FF </fr>
    0 L1 @ L4 @ MAX 0 BEGIN ROT <ok></ok><fl>0922 33FF </fl><fr>092A 33FF </fr>
                 ( hier ist mal ! @ gewesen!!! ) <ok></ok><fl>092A 33FF </fl><fr>092A 33FF </fr>
      OVER DUP L1 @ LT IF L2 @ DUP @ SWAP 1+ L2 ! ELSE 0 END_IF <ok></ok><fl>092A 33FF </fl><fr>093A 33FF </fr>
      SWAP L4 @ LT IF L5 @ DUP @ SWAP 1+ L5 ! ELSE 0 END_IF <ok></ok><fl>093A 33FF </fl><fr>0949 33FF </fr>
      U+ L6 @ DUP 1+ L6 ! ! <ok></ok><fl>0949 33FF </fl><fr>0951 33FF </fr>
      ROT ROT 1+ 2DUP M- 0= UNTIL 2DROP L6 @ ! <ok></ok><fl>0951 33FF </fl><fr>095C 33FF </fr>
    ELSE SWAP 1 M- SWAP <ok></ok><fl>095C 33FF </fl><fr>0961 33FF </fr>
      1 L1 @ L4 @ MAX 0 BEGIN ROT <ok></ok><fl>0961 33FF </fl><fr>0969 33FF </fr>
        OVER DUP L1 @ LT IF L2 @ DUP @ SWAP 1+ L2 ! ELSE 0 END_IF <ok></ok><fl>0969 33FF </fl><fr>0979 33FF </fr>
        SWAP L4 @ LT IF L5 @ DUP @ SWAP 1+ L5 ! NOT ELSE -1 END_IF <ok></ok><fl>0979 33FF </fl><fr>0989 33FF </fr>
        U+ L6 @ DUP 1+ L6 ! ! <ok></ok><fl>0989 33FF </fl><fr>0991 33FF </fr>
        ROT ROT 1+ 2DUP M- 0= UNTIL 2DROP ( DUP M. <ok></ok><fl>0991 33FF </fl><fr>0999 33FF </fr>
        0= IF DUP L6 ! <ok></ok><fl>0999 33FF </fl><fr>099E 33FF </fr>
          ROT NOT ROT ROT <ok></ok><fl>099E 33FF </fl><fr>09A2 33FF </fr>
          1 L1 @ L4 @ MAX 0 BEGIN ROT <ok></ok><fl>09A2 33FF </fl><fr>09AA 33FF </fr>
            0 L6 @ @ NOT U+  <ok></ok><fl>09AA 33FF </fl><fr>09B0 33FF </fr>
            L6 @ DUP 1+ L6 ! ! <ok></ok><fl>09B0 33FF </fl><fr>09B7 33FF </fr>
            ROT ROT 1+ 2DUP M- 0= UNTIL 2DROP DROP <ok></ok><fl>09B7 33FF </fl><fr>09C0 33FF </fr>
          END_IF <ok></ok><fl>09C0 33FF </fl><fr>09C0 33FF </fr>
      END_IF  <ok></ok><fl>09C0 33FF </fl><fr>09C0 33FF </fr>
  END_LOCAL ; <ok></ok><fl>09C0 33FF </fl><fr>09C2 33FF </fr>
 <ok></ok>
 <ok></ok>
C 8 0 FILL <ok></ok>
0 2 A 0 2 B C ADDIER M. M. M. <ok>1801 0003 0000 </ok>
C 8 DUMP <ok>2222 2222 0000 0000 0000 0000 0000 0000 </ok>
 <ok></ok>
C 8 0 FILL <ok></ok>
0 5 A 0 7 B C ADDIER M. M. M. <ok>1801 0008 0000 </ok>
C 8 DUMP <ok>2222 2222 2222 2222 2222 1111 1111 0000 </ok>
 <ok></ok>
C 8 0 FILL <ok></ok>
0 7 A 0 3 B C ADDIER M. M. M. <ok>1801 0008 0000 </ok>
C 8 DUMP <ok>2222 2222 2222 1111 1111 1111 1111 0000 </ok>
 <ok></ok>
A 8 FFFF FILL <ok></ok>
C 8 0 FILL <ok></ok>
0 2 A 0 2 B C ADDIER M. M. M. <ok>1801 0003 0000 </ok>
C 8 DUMP ( 1110 1111 0001 0000 ) <ok>1110 1111 0001 0000 0000 0000 0000 0000 </ok>
 <ok></ok>
 <ok></ok>
A 8 2222 FILL <ok></ok>
C 8 0 FILL <ok></ok>
0 2 A -1 2 B C ADDIER M. M. M. <ok>1801 0002 0000 </ok>
C 8 DUMP <ok>1111 1111 0000 0000 0000 0000 0000 0000 </ok>
 <ok></ok>
C 8 0 FILL <ok></ok>
-1 2 A 0 2 B C ADDIER M. M. M. <ok>1801 0002 FFFF </ok>
C 8 DUMP <ok>1111 1111 0000 0000 0000 0000 0000 0000 </ok>
 <ok></ok>
C 8 0 FILL <ok></ok>
0 2 B -1 2 A C ADDIER M. M. M. <ok>1801 0002 FFFF </ok>
C 8 DUMP <ok>1111 1111 0000 0000 0000 0000 0000 0000 </ok>
 <ok></ok>
C 8 0 FILL <ok></ok>
-1 2 B 0 2 A C ADDIER M. M. M. <ok>1801 0002 0000 </ok>
C 8 DUMP <ok>1111 1111 0000 0000 0000 0000 0000 0000 </ok>
</sekt> 
 <ok></ok>
<sekt inhalt="Division"> 
A014 MCODE DI32  <ok></ok><fl>09C2 33FF </fl><fr>09C8 3404 </fr>
: DIV32 ( a b d --> r q ) <ok></ok><fl>09C8 3404 </fl><fr>09CC 340A </fr>
  10 BEGIN >R DI32 R> 1- DUP 0= UNTIL 2DROP ; <ok></ok><fl>09CC 340A </fl><fr>09D6 340A </fr>
: M/MOD ( b d --> r q ) 0 ROT ROT DIV32 ; <ok></ok><fl>09D6 340A </fl><fr>09DF 3410 </fr>
 <ok></ok>
 <ok></ok>
 <ok></ok>
: SDIV ( s1 l1 x1 s2 l2 x2 x3 --> s3 l3 x3 s4 l4 r4 ) <ok></ok><fl>09DF 3410 </fl><fr>09E3 3415 </fr>
       ( L0 L1 L2 L3 L4 L5 L6 ) <ok></ok><fl>09E3 3415 </fl><fr>09E3 3415 </fr>
  7 LOCAL <ok></ok><fl>09E3 3415 </fl><fr>09E5 3415 </fr>
  L6 ! L5 ! L4 ! L3 ! L2 ! L1 ! L0 ! <ok></ok><fl>09E5 3415 </fl><fr>09F3 3415 </fr>
L1 @ L4 @ LT IF L0 @ L1 @ L2 @ 0 0 0 ELSE <ok></ok><fl>09F3 3415 </fl><fr>0A03 3415 </fr>
  L1 @ 0 BEGIN <ok></ok><fl>0A03 3415 </fl><fr>0A06 3415 </fr>
    L2 @ OVER M+ @ NOT OVER L6 @ M+ ! <ok></ok><fl>0A06 3415 </fl><fr>0A11 3415 </fr>
    1+ 2DUP M- 0= UNTIL 2DROP <ok></ok><fl>0A11 3415 </fl><fr>0A17 3415 </fr>
  L6 @ L1 @ M+ L4 @ M- L2 ! <ok></ok><fl>0A17 3415 </fl><fr>0A21 3415 </fr>
  -1 L6 @ L1 @ M+ ! 1 L1 +! <ok></ok><fl>0A21 3415 </fl><fr>0A2B 3415 </fr>
  L1 @ L4 @ M- 0 BEGIN <ok></ok><fl>0A2B 3415 </fl><fr>0A31 3415 </fr>
    L2 @ L4 @ M+ @ NOT <ok></ok><fl>0A31 3415 </fl><fr>0A38 3415 </fr>
    L2 @ L4 @ M+ 1- @ NOT <ok></ok><fl>0A38 3415 </fl><fr>0A40 3415 </fr>
    L5 @ L4 @ M+ 1- @      ( a b c ) <ok></ok><fl>0A40 3415 </fl><fr>0A47 3415 </fr>
    DIV32  <ok></ok><fl>0A47 3415 </fl><fr>0A48 3415 </fr>
    SWAP DROP              ( q ) <ok></ok><fl>0A48 3415 </fl><fr>0A4A 3415 </fr>
    DUP L2 @ L4 @ M+ 1+ ! <ok></ok><fl>0A4A 3415 </fl><fr>0A52 3415 </fr>
    0 L2 @ L5 @ L4 @       ( c ü adrc adrb n ) <ok></ok><fl>0A52 3415 </fl><fr>0A59 3415 </fr>
    SUPERMULT <ok></ok><fl>0A59 3415 </fl><fr>0A5A 3415 </fr>
    2DROP SWAP DROP <ok></ok><fl>0A5A 3415 </fl><fr>0A5D 3415 </fr>
    0 L2 @ L4 @ M+ @ U+ L2 @ L4 @ M+ ! <ok></ok><fl>0A5D 3415 </fl><fr>0A6B 3415 </fr>
BEGIN WHILE <ok></ok><fl>0A6B 3415 </fl><fr>0A6C 3415 </fr>
 1 L4 @ 0 BEGIN ROT <ok></ok><fl>0A6C 3415 </fl><fr>0A71 3415 </fr>
   OVER L2 @ OVER M+ @ <ok></ok><fl>0A71 3415 </fl><fr>0A77 3415 </fr>
   SWAP L5 @ M+ @ NOT <ok></ok><fl>0A77 3415 </fl><fr>0A7D 3415 </fr>
   U+ SWAP >R OVER L2 @ M+ ! R> <ok></ok><fl>0A7D 3415 </fl><fr>0A86 3415 </fr>
   ROT ROT 1+ 2DUP M- 0= UNTIL 2DROP <ok></ok><fl>0A86 3415 </fl><fr>0A8E 3415 </fr>
(   0 L2 @ L4 @ M+ @ U+ L2 @ L4 @ M+ ! <ok></ok><fl>0A8E 3415 </fl><fr>0A8E 3415 </fr>
(   DUP M. 7 EMIT <ok></ok><fl>0A8E 3415 </fl><fr>0A8E 3415 </fr>
 -1 L2 @ L4 @ M+ 1+ +! <ok></ok><fl>0A8E 3415 </fl><fr>0A96 3415 </fr>
REPEAT <ok></ok><fl>0A96 3415 </fl><fr>0A97 3415 </fr>
    -1 L2 +! <ok></ok><fl>0A97 3415 </fl><fr>0A9A 3415 </fr>
    1+ 2DUP M- 0= UNTIL 2DROP <ok></ok><fl>0A9A 3415 </fl><fr>0AA0 3415 </fr>
  L4 @ 0 BEGIN <ok></ok><fl>0AA0 3415 </fl><fr>0AA3 3415 </fr>
    L6 @ OVER M+ @ NOT OVER L6 @ M+ ! <ok></ok><fl>0AA3 3415 </fl><fr>0AAE 3415 </fr>
    1+ 2DUP M- 0= UNTIL 2DROP <ok></ok><fl>0AAE 3415 </fl><fr>0AB4 3415 </fr>
  L4 @ L6 @ 1- ! <ok></ok><fl>0AB4 3415 </fl><fr>0ABA 3415 </fr>
  L1 @ L4 @ M- L6 @ L4 @ M+ ! <ok></ok><fl>0ABA 3415 </fl><fr>0AC5 3415 </fr>
( CR ." ++" L6 @ L1 @ 1+ DUMP ." ++" <ok></ok><fl>0AC5 3415 </fl><fr>0AC5 3415 </fr>
  L0 @ L4 @ L6 @ <ok></ok><fl>0AC5 3415 </fl><fr>0ACB 3415 </fr>
  L0 @ L3 @ IF NOT END_IF <ok></ok><fl>0ACB 3415 </fl><fr>0AD1 3415 </fr>
  L1 @ L4 @ M- <ok></ok><fl>0AD1 3415 </fl><fr>0AD6 3415 </fr>
  L6 @ L4 @ M+ 1+ <ok></ok><fl>0AD6 3415 </fl><fr>0ADC 3415 </fr>
 END_IF <ok></ok><fl>0ADC 3415 </fl><fr>0ADC 3415 </fr>
  END_LOCAL <ok></ok><fl>0ADC 3415 </fl><fr>0ADD 3415 </fr>
  ; <ok></ok><fl>0ADD 3415 </fl><fr>0ADE 3415 </fr>
 <ok></ok>
( 333333 4 ^ 10 * VARIABLE NA <ok></ok>
( 333333 DUP * 10 * VARIABLE NB <ok></ok>
( NA @ 10 DUMP <ok></ok>
( NA @ NB @ 2OPERANDEN->2SLX OVER M. DUP M. SDIV <ok></ok>
 <ok></ok>
654321 A ! <ok></ok>
234567 A 1+ ! <ok></ok>
000001 A 2 M+ ! <ok></ok>
432101 B ! <ok></ok>
A98765 B 1+ ! <ok></ok>
 <ok></ok>
0 3 A 0 2 B C SMUL M. M. M. <ok>1801 0006 0000 </ok>
C 8 DUMP <ok>8421 7813 0017 AC1A 0000 0000 0000 0000 </ok>
 <ok></ok>
0 4 C 0 2 B A SDIV M. M. M. M. M. M. <ok>1404 0003 0000 1401 0002 0000 </ok>
A 8 DUMP <ok>0000 0000 0003 4321 4567 0001 2222 2222 </ok>
</sekt> 
 <ok></ok>
<sekt inhalt="Zahlenspeicher"> 
0 VARIABLE OPERAND1 <ok></ok><fl>0ADE 3415 </fl><fr>0AE3 341E </fr>
0 VARIABLE OPERAND2 <ok></ok><fl>0AE3 341E </fl><fr>0AE8 3427 </fr>
1400 VARIABLE ERGEBNIS <ok></ok><fl>0AE8 3427 </fl><fr>0AED 3430 </fr>
1400 VARIABLE ZAHLENSPEICHER <ok></ok><fl>0AED 3430 </fl><fr>0AF2 343F </fr>
2000 VARIABLE SPEICHERENDE <ok></ok><fl>0AF2 343F </fl><fr>0AF7 344C </fr>
0 VARIABLE SCHIEB <ok></ok><fl>0AF7 344C </fl><fr>0AFC 3453 </fr>
 <ok></ok>
 <ok></ok>
: SLX->ERGEBNIS ( sz lz az --> z ) <ok></ok><fl>0AFC 3453 </fl><fr>0B00 3461 </fr>
  OVER 0= IF 2DROP DROP 0 ELSE ( 0 bei 1/7 ) <ok></ok><fl>0B00 3461 </fl><fr>0B07 3461 </fr>
    2DUP M+ BEGIN 1- DUP @ 0= NOT UNTIL  <ok></ok><fl>0B07 3461 </fl><fr>0B0F 3461 </fr>
    1+ OVER MAX ( sz lz az ez ) <ok></ok><fl>0B0F 3461 </fl><fr>0B12 3461 </fr>
    ( DUP ERGEBNIS ! ( nicht wegen 0 1 OPERAND1 ) <ok></ok><fl>0B12 3461 </fl><fr>0B12 3461 </fr>
    2DUP = IF 2DROP 2DROP 0 ELSE <ok></ok><fl>0B12 3461 </fl><fr>0B19 3461 </fr>
      OVER M- ( sz lz az lneu ) <ok></ok><fl>0B19 3461 </fl><fr>0B1B 3461 </fr>
      OVER @ 0C 000 MLIT AND 0= <ok></ok><fl>0B1B 3461 </fl><fr>0B22 3461 </fr>
      OVER 1 = AND IF <ok></ok><fl>0B22 3461 </fl><fr>0B27 3461 </fr>
        DROP @ ELSE ( warum war da -1 ERGEBNIS +! ) <ok></ok><fl>0B27 3461 </fl><fr>0B2A 3461 </fr>
          OVER 1- ! <ok></ok><fl>0B2A 3461 </fl><fr>0B2D 3461 </fr>
          1- 04 000 MLIT OR <ok></ok><fl>0B2D 3461 </fl><fr>0B32 3461 </fr>
          END_IF  <ok></ok><fl>0B32 3461 </fl><fr>0B32 3461 </fr>
      SWAP DROP  <ok></ok><fl>0B32 3461 </fl><fr>0B34 3461 </fr>
      SWAP IF MINUS END_IF <ok></ok><fl>0B34 3461 </fl><fr>0B37 3461 </fr>
      END_IF <ok></ok><fl>0B37 3461 </fl><fr>0B37 3461 </fr>
    END_IF <ok></ok><fl>0B37 3461 </fl><fr>0B37 3461 </fr>
  ; <ok></ok><fl>0B37 3461 </fl><fr>0B38 3461 </fr>
0 8 C SLX->ERGEBNIS M. <ok>5800 </ok>
 <ok></ok>
: OPERAND->SLX ( op --> sx lx ax ) <ok></ok><fl>0B38 3461 </fl><fr>0B3C 346E </fr>
  DUP @ ( op x ) <ok></ok><fl>0B3C 346E </fl><fr>0B3E 346E </fr>
  DUP 0LT IF MINUS -1 ELSE 0 END_IF <ok></ok><fl>0B3E 346E </fl><fr>0B45 346E </fr>
  ROT ROT ( sx op xabs ) <ok></ok><fl>0B45 346E </fl><fr>0B47 346E </fr>
  DUP 04 000 MLIT AND IF <ok></ok><fl>0B47 346E </fl><fr>0B4D 346E </fr>
    SWAP DROP <ok></ok><fl>0B4D 346E </fl><fr>0B4F 346E </fr>
    3FFF AND <ok></ok><fl>0B4F 346E </fl><fr>0B51 346E </fr>
    DUP @ SWAP 1+ <ok></ok><fl>0B51 346E </fl><fr>0B55 346E </fr>
    ELSE <ok></ok><fl>0B55 346E </fl><fr>0B56 346E </fr>
      OVER ! 1 SWAP  <ok></ok><fl>0B56 346E </fl><fr>0B5A 346E </fr>
      END_IF <ok></ok><fl>0B5A 346E </fl><fr>0B5A 346E </fr>
  ; <ok></ok><fl>0B5A 346E </fl><fr>0B5B 346E </fr>
 <ok></ok>
77 OPERAND1 ! <ok></ok>
OPERAND1 OPERAND->SLX M. M. M. <ok>2F21 0001 0000 </ok>
-77 OPERAND1 ! <ok></ok>
OPERAND1 OPERAND->SLX M. M. M. <ok>2F21 0001 FFFF </ok>
5800 OPERAND1 ! <ok></ok>
OPERAND1 OPERAND->SLX M. M. M. <ok>1801 0004 0000 </ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
: SPEICHERHOL ( l --> addr ) <ok></ok><fl>0B5B 346E </fl><fr>0B5F 347A </fr>
  ERGEBNIS @ 2DUP ! <ok></ok><fl>0B5F 347A </fl><fr>0B63 347A </fr>
  1+ 2DUP M+ ERGEBNIS ! <ok></ok><fl>0B63 347A </fl><fr>0B68 347A </fr>
  2DUP SWAP 0 FILL <ok></ok><fl>0B68 347A </fl><fr>0B6C 347A </fr>
  SWAP DROP <ok></ok><fl>0B6C 347A </fl><fr>0B6E 347A </fr>
ERGEBNIS @ SPEICHERENDE @ LT NOT IF 0369 ERROR END_IF <ok></ok><fl>0B6E 347A </fl><fr>0B77 347A </fr>
  ; <ok></ok><fl>0B77 347A </fl><fr>0B78 347A </fr>
 <ok></ok>
 <ok></ok>
: 2OPERANDEN->2SLX ( op1 op2 --> sx lx ax sy ly ay az ) <ok></ok><fl>0B78 347A </fl><fr>0B7C 348B </fr>
  OPERAND2 ! <ok></ok><fl>0B7C 348B </fl><fr>0B7E 348B </fr>
  OPERAND1 ! <ok></ok><fl>0B7E 348B </fl><fr>0B80 348B </fr>
  OPERAND1 OPERAND->SLX <ok></ok><fl>0B80 348B </fl><fr>0B82 348B </fr>
  OVER >R <ok></ok><fl>0B82 348B </fl><fr>0B84 348B </fr>
  OPERAND2 OPERAND->SLX <ok></ok><fl>0B84 348B </fl><fr>0B86 348B </fr>
  OVER R> M+ 1+ <ok></ok><fl>0B86 348B </fl><fr>0B8A 348B </fr>
  SPEICHERHOL <ok></ok><fl>0B8A 348B </fl><fr>0B8B 348B </fr>
  ; <ok></ok><fl>0B8B 348B </fl><fr>0B8C 348B </fr>
 <ok></ok>
77 88 2OPERANDEN->2SLX M. M. M. M. M. M. M. <ok>1401 2F22 0001 0000 2F21 0001 0000 </ok>
77 5800 2OPERANDEN->2SLX M. M. M. M. M. M. M. <ok>1405 1801 0004 0000 2F21 0001 0000 </ok>
</sekt> 
 <ok></ok>
<sekt inhalt="+ - * /MOD ."> 
: + ( x y --> z ) <ok></ok><fl>0B8C 348B </fl><fr>0B90 348D </fr>
  2OPERANDEN->2SLX ADDIER SLX->ERGEBNIS ; <ok></ok><fl>0B90 348D </fl><fr>0B94 348D </fr>
: - ( x y --> z ) <ok></ok><fl>0B94 348D </fl><fr>0B98 348F </fr>
  MINUS + ; <ok></ok><fl>0B98 348F </fl><fr>0B9B 348F </fr>
: * ( x y --> z ) <ok></ok><fl>0B9B 348F </fl><fr>0B9F 3491 </fr>
  2OPERANDEN->2SLX SMUL SLX->ERGEBNIS ; <ok></ok><fl>0B9F 3491 </fl><fr>0BA3 3491 </fr>
 <ok></ok>
 <ok></ok>
IMMEDIATE: RECURSE LFA @ 4 M+ COMPILE, ; <ok></ok><fl>0BA3 3491 </fl><fr>0BAD 3499 </fr>
: /MOD ( x y --> r q ) <ok></ok><fl>0BAD 3499 </fl><fr>0BB1 349E </fr>
  DUP 0= IF 0 ERROR END_IF <ok></ok><fl>0BB1 349E </fl><fr>0BB6 349E </fr>
  DUP OPERAND1 ! <ok></ok><fl>0BB6 349E </fl><fr>0BB9 349E </fr>
  OPERAND1 OPERAND->SLX  <ok></ok><fl>0BB9 349E </fl><fr>0BBB 349E </fr>
  ROT DROP OVER M+ 1- @ ( ly ty ) <ok></ok><fl>0BBB 349E </fl><fr>0BC1 349E </fr>
  SWAP 1 > IF <ok></ok><fl>0BC1 349E </fl><fr>0BC5 349E </fr>
    1 BEGIN OVER 0LT NOT WHILE  <ok></ok><fl>0BC5 349E </fl><fr>0BCA 349E </fr>
      SWAP DUP M+ SWAP DUP + REPEAT <ok></ok><fl>0BCA 349E </fl><fr>0BD1 349E </fr>
    SWAP DROP DUP SCHIEB ! <ok></ok><fl>0BD1 349E </fl><fr>0BD6 349E </fr>
    ROT OVER * <ok></ok><fl>0BD6 349E </fl><fr>0BD9 349E </fr>
    ROT ROT * <ok></ok><fl>0BD9 349E </fl><fr>0BDC 349E </fr>
    ELSE DROP 1 SCHIEB ! END_IF  <ok></ok><fl>0BDC 349E </fl><fr>0BE1 349E </fr>
  2OPERANDEN->2SLX SDIV <ok></ok><fl>0BE1 349E </fl><fr>0BE3 349E </fr>
  SLX->ERGEBNIS >R  <ok></ok><fl>0BE3 349E </fl><fr>0BE5 349E </fr>
  SLX->ERGEBNIS R> <ok></ok><fl>0BE5 349E </fl><fr>0BE7 349E </fr>
  SCHIEB @ 1- IF  <ok></ok><fl>0BE7 349E </fl><fr>0BEB 349E </fr>
    SWAP SCHIEB @ RECURSE SWAP DROP <ok></ok><fl>0BEB 349E </fl><fr>0BF1 349E </fr>
    SWAP END_IF <ok></ok><fl>0BF1 349E </fl><fr>0BF2 349E </fr>
  ; <ok></ok><fl>0BF2 349E </fl><fr>0BF3 349E </fr>
 <ok></ok>
: HG0. ( n -->  /hexstring/ ) <ok></ok><fl>0BF3 349E </fl><fr>0BF7 34A3 </fr>
  0 >R <ok></ok><fl>0BF7 34A3 </fl><fr>0BF9 34A3 </fr>
  SHL16 DUP IF DIG EMIT R> DROP -1 >R ELSE DROP END_IF <ok></ok><fl>0BF9 34A3 </fl><fr>0C04 34A3 </fr>
  SHL16 DUP R OR IF DIG EMIT R> DROP -1 >R ELSE DROP END_IF <ok></ok><fl>0C04 34A3 </fl><fr>0C11 34A3 </fr>
  SHL16 DUP R OR IF DIG EMIT ELSE DROP END_IF <ok></ok><fl>0C11 34A3 </fl><fr>0C1A 34A3 </fr>
  SHL16 DIG EMIT DROP R> DROP ; <ok></ok><fl>0C1A 34A3 </fl><fr>0C21 34A3 </fr>
 <ok></ok>
: . ( n --> ) ( erstmal nur hexadezimale Ausgabe ) <ok></ok><fl>0C21 34A3 </fl><fr>0C25 34A5 </fr>
  OPERAND1 ! <ok></ok><fl>0C25 34A5 </fl><fr>0C27 34A5 </fr>
  OPERAND1 OPERAND->SLX ( sx lx ax ) <ok></ok><fl>0C27 34A5 </fl><fr>0C29 34A5 </fr>
  ROT IF ." -" END_IF <ok></ok><fl>0C29 34A5 </fl><fr>0C2E 34A7 </fr>
  OVER M+  <ok></ok><fl>0C2E 34A7 </fl><fr>0C30 34A7 </fr>
  1- DUP @ HG0. SWAP 1- SWAP <ok></ok><fl>0C30 34A7 </fl><fr>0C37 34A7 </fr>
  BEGIN OVER WHILE 1- DUP @ HG. SWAP 1- SWAP REPEAT DROP <ok></ok><fl>0C37 34A7 </fl><fr>0C42 34A7 </fr>
  DROP  <ok></ok><fl>0C42 34A7 </fl><fr>0C43 34A7 </fr>
  20 EMIT <ok></ok><fl>0C43 34A7 </fl><fr>0C45 34A7 </fr>
  ; <ok></ok><fl>0C45 34A7 </fl><fr>0C46 34A7 </fr>
 <ok></ok>
1111 1111 * . <ok>1234321 </ok>
 <ok></ok>
: B. SWAP . . ; <ok></ok><fl>0C46 34A7 </fl><fr>0C4E 34AA </fr>
 <ok></ok>
 <ok></ok>
 <ok></ok>
7 3 /MOD . .  <ok>2 1 </ok>
3333 DUP * DUP * 10 * DUP . <ok>68D9E840B77E910 </ok>
3333 DUP * 10 * DUP . <ok>A3D5C290 </ok>
/MOD B. <ok>0 A3D5C29 </ok>
3333 DUP * . <ok>A3D5C29 </ok>
 <ok></ok>
1111 DUP * 8 * DUP . <ok>91A1908 </ok>
1111 8 * DUP . <ok>8888 </ok>
/MOD B. <ok>0 1111 </ok>
 <ok></ok>
1111 DUP * DUP . <ok>1234321 </ok>
1111 DUP . <ok>1111 </ok>
/MOD B. <ok>0 1111 </ok>
</sekt> 
 <ok></ok>
<sekt inhalt="Zwischenergebnisse nicht unnötig speichern"> 
ZAHLENSPEICHER @ VARIABLE BLOCKANFANG <ok></ok><fl>0C4E 34AA </fl><fr>0C53 34B6 </fr>
ZAHLENSPEICHER @ VARIABLE BLOCKENDE <ok></ok><fl>0C53 34B6 </fl><fr>0C58 34C0 </fr>
: NEBENRECHNUNG ( --> erg ) ERGEBNIS @ ; <ok></ok><fl>0C58 34C0 </fl><fr>0C5F 34CE </fr>
: HAUPTRECHNUNG ( erg --> ) ERGEBNIS ! ; <ok></ok><fl>0C5F 34CE </fl><fr>0C66 34DC </fr>
: RECHENBLOCK BLOCKENDE @ BLOCKANFANG ! <ok></ok><fl>0C66 34DC </fl><fr>0C6E 34E8 </fr>
  ERGEBNIS @ BLOCKENDE ! ; <ok></ok><fl>0C6E 34E8 </fl><fr>0C73 34E8 </fr>
: INIT ZAHLENSPEICHER @ ERGEBNIS ! RECHENBLOCK RECHENBLOCK ; <ok></ok><fl>0C73 34E8 </fl><fr>0C7E 34ED </fr>
INIT <ok></ok>
ERGEBNIS M? <ok>1400 </ok>
: A+0 ( a --> a+0 )  <ok></ok><fl>0C7E 34ED </fl><fr>0C82 34F1 </fr>
  DUP OPERAND1 ! <ok></ok><fl>0C82 34F1 </fl><fr>0C85 34F1 </fr>
  OPERAND1 OPERAND->SLX <ok></ok><fl>0C85 34F1 </fl><fr>0C87 34F1 </fr>
  DUP OPERAND1 M- IF <ok></ok><fl>0C87 34F1 </fl><fr>0C8B 34F1 </fr>
    OVER ERGEBNIS @ 1+ SWAP MOVE ( SPEICHERHOL will hier nicht gehen ) <ok></ok><fl>0C8B 34F1 </fl><fr>0C91 34F1 </fr>
    ERGEBNIS @ 1+ OVER 1+ ERGEBNIS +! ( noch nicht ganz ) <ok></ok><fl>0C91 34F1 </fl><fr>0C98 34F1 </fr>
    ERGEBNIS @ SPEICHERENDE @ LT NOT IF 0369 ERROR END_IF ( da ist es passiert ) <ok></ok><fl>0C98 34F1 </fl><fr>0CA1 34F1 </fr>
    SLX->ERGEBNIS SWAP DROP <ok></ok><fl>0CA1 34F1 </fl><fr>0CA4 34F1 </fr>
    ELSE 2DROP DROP END_IF <ok></ok><fl>0CA4 34F1 </fl><fr>0CA7 34F1 </fr>
  ; <ok></ok><fl>0CA7 34F1 </fl><fr>0CA8 34F1 </fr>
: B+0 ( a b --> a+0 b+0 ) <ok></ok><fl>0CA8 34F1 </fl><fr>0CAC 34F5 </fr>
  SWAP A+0 SWAP A+0 ; <ok></ok><fl>0CAC 34F5 </fl><fr>0CB1 34F5 </fr>
</sekt> 
 <ok></ok>
 <ok></ok>
 <ok></ok>
<sekt inhalt="Anwenden in / MOD GGT BK..."> 
: / ( b d --> q ) <ok></ok><fl>0CB1 34F5 </fl><fr>0CB5 34F7 </fr>
  NEBENRECHNUNG ROT ROT  <ok></ok><fl>0CB5 34F7 </fl><fr>0CB8 34F7 </fr>
  /MOD SWAP DROP <ok></ok><fl>0CB8 34F7 </fl><fr>0CBB 34F7 </fr>
  SWAP HAUPTRECHNUNG A+0 <ok></ok><fl>0CBB 34F7 </fl><fr>0CBE 34F7 </fr>
  ; <ok></ok><fl>0CBE 34F7 </fl><fr>0CBF 34F7 </fr>
: MOD ( b d --> r )  <ok></ok><fl>0CBF 34F7 </fl><fr>0CC3 34FB </fr>
  NEBENRECHNUNG ROT ROT  <ok></ok><fl>0CC3 34FB </fl><fr>0CC6 34FB </fr>
  /MOD DROP  <ok></ok><fl>0CC6 34FB </fl><fr>0CC8 34FB </fr>
  SWAP HAUPTRECHNUNG A+0 <ok></ok><fl>0CC8 34FB </fl><fr>0CCB 34FB </fr>
  ; <ok></ok><fl>0CCB 34FB </fl><fr>0CCC 34FB </fr>
 <ok></ok>
: GGT ( a b --> ggt ) <ok></ok><fl>0CCC 34FB </fl><fr>0CD0 34FF </fr>
  NEBENRECHNUNG ROT ROT <ok></ok><fl>0CD0 34FF </fl><fr>0CD3 34FF </fr>
  BEGIN DUP WHILE <ok></ok><fl>0CD3 34FF </fl><fr>0CD5 34FF </fr>
    SWAP OVER MOD REPEAT DROP  <ok></ok><fl>0CD5 34FF </fl><fr>0CDA 34FF </fr>
  SWAP HAUPTRECHNUNG A+0 ; <ok></ok><fl>0CDA 34FF </fl><fr>0CDE 34FF </fr>
: BK ( a b --> a/ggt b/ggt )  <ok></ok><fl>0CDE 34FF </fl><fr>0CE2 3502 </fr>
  NEBENRECHNUNG ROT ROT <ok></ok><fl>0CE2 3502 </fl><fr>0CE5 3502 </fr>
  2DUP GGT ROT OVER / ROT ROT /  <ok></ok><fl>0CE5 3502 </fl><fr>0CED 3502 </fr>
  ROT HAUPTRECHNUNG B+0 ; <ok></ok><fl>0CED 3502 </fl><fr>0CF1 3502 </fr>
 <ok></ok>
 <ok></ok>
 <ok></ok>
777 99 BK B. <ok>27D 33 </ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
( je einmal * und + in NNUMBER ) <ok></ok>
: NNUMBER ( baddr n --> a faddr ) <ok></ok><fl>0CF1 3502 </fl><fr>0CF5 350A </fr>
  NEBENRECHNUNG ROT ROT <ok></ok><fl>0CF5 350A </fl><fr>0CF8 350A </fr>
  7 LOCAL ( L3 L4 nicht verwendet <ok></ok><fl>0CF8 350A </fl><fr>0CFA 350A </fr>
  L1 ! L0 ! <ok></ok><fl>0CFA 350A </fl><fr>0CFE 350A </fr>
  0 L1 @ IF <ok></ok><fl>0CFE 350A </fl><fr>0D02 350A </fr>
    DUP L2 ! 1 L5 ! ( Vorzeichen ) <ok></ok><fl>0D02 350A </fl><fr>0D08 350A </fr>
    BEGIN ( M23 Vorzeichen gucken ) <ok></ok><fl>0D08 350A </fl><fr>0D08 350A </fr>
      -1 L6 !  <ok></ok><fl>0D08 350A </fl><fr>0D0B 350A </fr>
      L0 @ L2 @ M+ C@ <ok></ok><fl>0D0B 350A </fl><fr>0D11 350A </fr>
      2B ( 43 2B ) = IF L2 @ 1+ L2 ! 0 L6 ! ELSE <ok></ok><fl>0D11 350A </fl><fr>0D1D 350A </fr>
        L0 @ L2 @ M+ C@ <ok></ok><fl>0D1D 350A </fl><fr>0D23 350A </fr>
        2D ( 45 2D ) = IF L2 @ 1+ L2 ! <ok></ok><fl>0D23 350A </fl><fr>0D2B 350A </fr>
          0 L6 ! <ok></ok><fl>0D2B 350A </fl><fr>0D2E 350A </fr>
          L5 @ MINUS L5 ! END_IF <ok></ok><fl>0D2E 350A </fl><fr>0D33 350A </fr>
        END_IF <ok></ok><fl>0D33 350A </fl><fr>0D33 350A </fr>
      L6 @ UNTIL <ok></ok><fl>0D33 350A </fl><fr>0D36 350A </fr>
    L2 @ L1 @ LT IF <ok></ok><fl>0D36 350A </fl><fr>0D3C 350A </fr>
      BEGIN <ok></ok><fl>0D3C 350A </fl><fr>0D3C 350A </fr>
        L0 @ L2 @ M+ C@ <ok></ok><fl>0D3C 350A </fl><fr>0D42 350A </fr>
        DUP IF ( oo L1 auf Bytes ) <ok></ok><fl>0D42 350A </fl><fr>0D44 350A </fr>
          DIGIT NOT IF DROP L1 @ MINUS L1 ! ELSE <ok></ok><fl>0D44 350A </fl><fr>0D4E 350A </fr>
            SWAP BASE @ * + <ok></ok><fl>0D4E 350A </fl><fr>0D53 350A </fr>
            L2 @ 1+ L2 !  <ok></ok><fl>0D53 350A </fl><fr>0D58 350A </fr>
            END_IF <ok></ok><fl>0D58 350A </fl><fr>0D58 350A </fr>
          ELSE DROP L2 @ L1 ! END_IF <ok></ok><fl>0D58 350A </fl><fr>0D5E 350A </fr>
        L2 @ L1 @ LT NOT UNTIL <ok></ok><fl>0D5E 350A </fl><fr>0D65 350A </fr>
      END_IF ( M19 ) <ok></ok><fl>0D65 350A </fl><fr>0D65 350A </fr>
    END_IF ( M19 ) <ok></ok><fl>0D65 350A </fl><fr>0D65 350A </fr>
  L5 @ 0LT IF MINUS END_IF <ok></ok><fl>0D65 350A </fl><fr>0D6A 350A </fr>
  L2 @ L1 @ M- ( oo noch kein fadr !!!!!!!!!!!! siehe NNUMBER ) <ok></ok><fl>0D6A 350A </fl><fr>0D6F 350A </fr>
  DUP IF DROP L0 @ L2 @ M+ END_IF ( jetzt faddr ) <ok></ok><fl>0D6F 350A </fl><fr>0D77 350A </fr>
  END_LOCAL <ok></ok><fl>0D77 350A </fl><fr>0D78 350A </fr>
  ROT HAUPTRECHNUNG SWAP A+0 SWAP <ok></ok><fl>0D78 350A </fl><fr>0D7D 350A </fr>
  ; <ok></ok><fl>0D7D 350A </fl><fr>0D7E 350A </fr>
 <ok></ok>
22 WORD: N" ( /number/  --> n ) NNUMBER DROP ; <ok></ok><fl>0D7E 350A </fl><fr>0D86 350D </fr>
 <ok></ok>
 <ok></ok>
 <ok></ok>
( REPLACE: NUMBER NNUMBER ; <ok></ok>
 <ok></ok>
N" 111111111111111" DUP * DUP . DUP M. <ok>123456789ABCDEFEDCBA987654321 5405 </ok>
N" 111111111111111" DUP . DUP M. <ok>111111111111111 540F </ok>
/MOD OVER M. DUP M. B. <ok>0000 5447 0 111111111111111 </ok>
 <ok></ok>
N" 0026D4346A00" DUP . <ok>26D4346A00 </ok>
N" 00000FC82800" DUP . <ok>FC82800 </ok>
2DUP /MOD B. <ok>D6A2200 275 </ok>
2DUP BK B.  <ok>3135 14 </ok>
( richtig wäre D6A2200 275 bei /MOD ) <ok></ok>
( richtig wäre 3135 14 bei BK ) <ok></ok>
 <ok></ok>
N" 00A7426290A8C945E959A780" DUP . <ok>A7426290A8C945E959A780 </ok>
N" 000002330657FDD698" DUP . <ok>2330657FDD698 </ok>
/MOD B.  <ok>158B5843D5ED0 4C0CF598D2 </ok>
( richtig wäre 158B5843D5ED0 4C0CF598D2 ) <ok></ok>
( und nicht   0325AF2C3F8838 4C0CF598D3 ) <ok></ok>
 <ok></ok>
( als vorlaeufigen Abschluss nochmal ) <ok></ok>
" 111111111111111" NNUMBER DROP DUP * . <ok>123456789ABCDEFEDCBA987654321 </ok>
 <ok></ok>
N" 000002330657FDD698" N" 4C0CF598D3" * . <ok>A7426290A9A396BD1A1F48 </ok>
N" 000002330657FDD698" N" 4C0CF598D2" * . <ok>A7426290A77090651C48B0 </ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
: ^ ( a n --> a^n ) <ok></ok><fl>0D86 350D </fl><fr>0D8A 350F </fr>
  NEBENRECHNUNG ROT ROT ( erg a n ) <ok></ok><fl>0D8A 350F </fl><fr>0D8D 350F </fr>
  4 LOCAL <ok></ok><fl>0D8D 350F </fl><fr>0D8F 350F </fr>
  DUP 0LT IF 12 ERROR END_IF     <ok></ok><fl>0D8F 350F </fl><fr>0D94 350F </fr>
  2           ( a n 2 )         <ok></ok><fl>0D94 350F </fl><fr>0D95 350F </fr>
  L3 ! L2 ! L1 !    (  R1-3: a  n  2 ) <ok></ok><fl>0D95 350F </fl><fr>0D9B 350F </fr>
  1           ( p=1          a  n  2 ) <ok></ok><fl>0D9B 350F </fl><fr>0D9C 350F </fr>
  BEGIN       ( p            a  n  2 ) <ok></ok><fl>0D9C 350F </fl><fr>0D9C 350F </fr>
    L2 @ L3 @ ( p n 2        a  n  2 ) <ok></ok><fl>0D9C 350F </fl><fr>0DA0 350F </fr>
    M/MOD     ( p r n/2      a  n  2 ) <ok></ok><fl>0DA0 350F </fl><fr>0DA1 350F </fr>
    L2 !      ( p r          a n/2 2 ) <ok></ok><fl>0DA1 350F </fl><fr>0DA3 350F </fr>
    IF        ( p            a n/2 2 ) <ok></ok><fl>0DA3 350F </fl><fr>0DA4 350F </fr>
      L1 @    ( p a          a n/2 2 ) <ok></ok><fl>0DA4 350F </fl><fr>0DA6 350F </fr>
      *      ( p*a          a n/2 2 ) <ok></ok><fl>0DA6 350F </fl><fr>0DA7 350F </fr>
      END_IF  ( p*a          a n/2 2 ) <ok></ok><fl>0DA7 350F </fl><fr>0DA7 350F </fr>
    L2 @      ( p*a n/2      a n/2 2 ) <ok></ok><fl>0DA7 350F </fl><fr>0DA9 350F </fr>
    WHILE     ( p*a          a n/2 2 ) <ok></ok><fl>0DA9 350F </fl><fr>0DAA 350F </fr>
      L1 @    ( p*a a        a n/2 2 ) <ok></ok><fl>0DAA 350F </fl><fr>0DAC 350F </fr>
      L1 @    ( p*a a a      a n/2 2 ) <ok></ok><fl>0DAC 350F </fl><fr>0DAE 350F </fr>
      *      ( p*a a*a      a n/2 2 ) <ok></ok><fl>0DAE 350F </fl><fr>0DAF 350F </fr>
      L1 !    ( p*a        a*a n/2 2 ) <ok></ok><fl>0DAF 350F </fl><fr>0DB1 350F </fr>
      REPEAT  ( p*a        a*a n/2 2 ) <ok></ok><fl>0DB1 350F </fl><fr>0DB2 350F </fr>
  END_LOCAL   ( a^n ) <ok></ok><fl>0DB2 350F </fl><fr>0DB3 350F </fr>
  SWAP HAUPTRECHNUNG A+0 <ok></ok><fl>0DB3 350F </fl><fr>0DB6 350F </fr>
  ;           ( a^n ) <ok></ok><fl>0DB6 350F </fl><fr>0DB7 350F </fr>
 <ok></ok>
 <ok></ok>
3333 2 ^ 10 * . <ok>A3D5C290 </ok>
1111 2 ^ . <ok>1234321 </ok>
 <ok></ok>
 <ok></ok>
10 20 ^ 10 10 ^ DUP -1 + SWAP 1 + * - . <ok>1 </ok>
</sekt> 
 <ok></ok>
<sekt inhalt="nochmal . für beliebige Zahlenbasis"> 
: . ( a -->  /zahl/ ) <ok></ok><fl>0DB7 350F </fl><fr>0DBB 3511 </fr>
  BASE @ 10 = IF . ELSE <ok></ok><fl>0DBB 3511 </fl><fr>0DC2 3511 </fr>
    NEBENRECHNUNG SWAP <ok></ok><fl>0DC2 3511 </fl><fr>0DC4 3511 </fr>
    DUP 0LT IF MINUS ." -" END_IF <ok></ok><fl>0DC4 3511 </fl><fr>0DCB 3513 </fr>
    DUP 0= IF ." 0 " DROP ELSE <ok></ok><fl>0DCB 3513 </fl><fr>0DD3 3516 </fr>
      -1 SWAP ( Stapelmarkierung ) <ok></ok><fl>0DD3 3516 </fl><fr>0DD5 3516 </fr>
      BEGIN DUP WHILE BASE @ /MOD REPEAT DROP <ok></ok><fl>0DD5 3516 </fl><fr>0DDC 3516 </fr>
      BEGIN DUP 0LT NOT WHILE 30 M+ DUP 39 > IF 7 M+ END_IF EMIT REPEAT <ok></ok><fl>0DDC 3516 </fl><fr>0DEA 3516 </fr>
      20 EMIT DROP END_IF <ok></ok><fl>0DEA 3516 </fl><fr>0DED 3516 </fr>
    HAUPTRECHNUNG <ok></ok><fl>0DED 3516 </fl><fr>0DEE 3516 </fr>
    END_IF <ok></ok><fl>0DEE 3516 </fl><fr>0DEE 3516 </fr>
  ; <ok></ok><fl>0DEE 3516 </fl><fr>0DEF 3516 </fr>
: B. SWAP . . ; <ok></ok><fl>0DEF 3516 </fl><fr>0DF7 3519 </fr>
 <ok></ok>
777 99 BK B. <ok>27D 33 </ok>
INIT <ok></ok>
</sekt> 
 <ok></ok>
<sekt inhalt="Array-Objekte"> 
: ZERLEG ( a --> adr i ) <ok></ok><fl>0DF7 3519 </fl><fr>0DFB 3520 </fr>
  3FFF AND DUP 1+ SWAP @ ; <ok></ok><fl>0DFB 3520 </fl><fr>0E02 3520 </fr>
 <ok></ok>
N" 111111111111111" DUP * DUP . <ok>123456789ABCDEFEDCBA987654321 </ok>
DUP ZERLEG SWAP M. M. <ok>1406 0008 </ok>
 <ok></ok>
: OBJ? ( a --> flag ) <ok></ok><fl>0E02 3520 </fl><fr>0E06 3525 </fr>
  ABS DUP 04 000 MLIT LT IF DROP 0 ELSE <ok></ok><fl>0E06 3525 </fl><fr>0E10 3525 </fr>
    ZERLEG SWAP DROP 04 000 MLIT LT IF 0 ELSE -1  <ok></ok><fl>0E10 3525 </fl><fr>0E1B 3525 </fr>
      END_IF END_IF <ok></ok><fl>0E1B 3525 </fl><fr>0E1B 3525 </fr>
  ; <ok></ok><fl>0E1B 3525 </fl><fr>0E1C 3525 </fr>
 <ok></ok>
: L ( a i -> b ) OVER OBJ? IF <ok></ok><fl>0E1C 3525 </fl><fr>0E23 3527 </fr>
    SWAP ZERLEG 3FFF AND ( i adr j ) <ok></ok><fl>0E23 3527 </fl><fr>0E27 3527 </fr>
    ROT 2DUP ( adr j i j i ) <ok></ok><fl>0E27 3527 </fl><fr>0E29 3527 </fr>
    > IF SWAP DROP M+ @ ELSE 2DROP DROP 0 END_IF <ok></ok><fl>0E29 3527 </fl><fr>0E33 3527 </fr>
    ELSE IF DROP 0 END_IF END_IF ; <ok></ok><fl>0E33 3527 </fl><fr>0E38 3527 </fr>
 <ok></ok>
: G ( a i -> a i b ) 2DUP L ; <ok></ok><fl>0E38 3527 </fl><fr>0E3F 3529 </fr>
 <ok></ok>
: H ( a i b --> a' ) <ok></ok><fl>0E3F 3529 </fl><fr>0E43 352B </fr>
  DUP >R <ok></ok><fl>0E43 352B </fl><fr>0E45 352B </fr>
  ROT ROT ( b a i ) <ok></ok><fl>0E45 352B </fl><fr>0E47 352B </fr>
  OVER OBJ? 0= OVER 0= AND R> OBJ? 0= AND IF 2DROP ELSE <ok></ok><fl>0E47 352B </fl><fr>0E54 352B </fr>
    OVER OBJ? 0= IF  <ok></ok><fl>0E54 352B </fl><fr>0E58 352B </fr>
      DUP 1+ SPEICHERHOL ( b a i addrneu ) <ok></ok><fl>0E58 352B </fl><fr>0E5B 352B </fr>
      ROT OVER ! ( b i addrneu ) <ok></ok><fl>0E5B 352B </fl><fr>0E5E 352B </fr>
(      OVER 1+ OVER 1- ! ( b i addrneu ( aha, macht schon SPEICHERHOL ) <ok></ok><fl>0E5E 352B </fl><fr>0E5E 352B </fr>
      04 000 MLIT OVER 1- +! ( das ist jetzt neu fuer OBJ? ) <ok></ok><fl>0E5E 352B </fl><fr>0E64 352B </fr>
      DUP >R M+ ! R> ( addrneu ) <ok></ok><fl>0E64 352B </fl><fr>0E69 352B </fr>
      1- 04 000 MLIT OR <ok></ok><fl>0E69 352B </fl><fr>0E6E 352B </fr>
      ELSE <ok></ok><fl>0E6E 352B </fl><fr>0E6F 352B </fr>
        OVER                 ( b a i a ) <ok></ok><fl>0E6F 352B </fl><fr>0E70 352B </fr>
        ZERLEG 3FFF AND      ( b a i addr j ) <ok></ok><fl>0E70 352B </fl><fr>0E73 352B </fr>
        ROT                  ( b a addr j i ) <ok></ok><fl>0E73 352B </fl><fr>0E74 352B </fr>
        2DUP > IF SWAP DROP ROT >R M+ ! R> ELSE <ok></ok><fl>0E74 352B </fl><fr>0E7F 352B </fr>
          DUP 1+ SPEICHERHOL ( b a addr j i addrneu ) <ok></ok><fl>0E7F 352B </fl><fr>0E82 352B </fr>
          SWAP >R DUP >R     ( b a addr j addrneu      addrneu i ) <ok></ok><fl>0E82 352B </fl><fr>0E86 352B </fr>
          SWAP MOVE DROP R>  ( b addrneu            i ) <ok></ok><fl>0E86 352B </fl><fr>0E8A 352B </fr>
(          R 1+ OVER 1- !    ( b addrneu                i ) <ok></ok><fl>0E8A 352B </fl><fr>0E8A 352B </fr>
          04 000 MLIT OVER 1- @ OR OVER 1- !   ( das ist jetzt neu fuer OBJ? ) <ok></ok><fl>0E8A 352B </fl><fr>0E94 352B </fr>
          SWAP OVER R> M+ !  ( addrneu ) <ok></ok><fl>0E94 352B </fl><fr>0E99 352B </fr>
          1- 04 000 MLIT OR  ( a' ) <ok></ok><fl>0E99 352B </fl><fr>0E9E 352B </fr>
          END_IF <ok></ok><fl>0E9E 352B </fl><fr>0E9E 352B </fr>
        ZERLEG 3FFF AND      ( adr l ) <ok></ok><fl>0E9E 352B </fl><fr>0EA1 352B </fr>
        BEGIN 2DUP M+ 1- @ 0= OVER 1 > AND WHILE 1- REPEAT ( adr lneu ) <ok></ok><fl>0EA1 352B </fl><fr>0EAD 352B </fr>
        OVER @ OBJ? 0= OVER 1 = AND IF DROP @ ELSE <ok></ok><fl>0EAD 352B </fl><fr>0EB9 352B </fr>
          SWAP 1- SWAP       ( addr-1 lneu ) <ok></ok><fl>0EB9 352B </fl><fr>0EBC 352B </fr>
          04 000 MLIT OR OVER ! 04 000 MLIT OR <ok></ok><fl>0EBC 352B </fl><fr>0EC6 352B </fr>
          END_IF   <ok></ok><fl>0EC6 352B </fl><fr>0EC6 352B </fr>
        END_IF <ok></ok><fl>0EC6 352B </fl><fr>0EC6 352B </fr>
    END_IF <ok></ok><fl>0EC6 352B </fl><fr>0EC6 352B </fr>
  ; <ok></ok><fl>0EC6 352B </fl><fr>0EC7 352B </fr>
   <ok></ok>
: . ( obj --> ) <ok></ok><fl>0EC7 352B </fl><fr>0ECB 352D </fr>
  DUP OBJ? IF <ok></ok><fl>0ECB 352D </fl><fr>0ECE 352D </fr>
    ." [ " <ok></ok><fl>0ECE 352D </fl><fr>0ED1 3530 </fr>
    ZERLEG 3FFF AND OVER M+ SWAP ( eadr+1 aadr ) <ok></ok><fl>0ED1 3530 </fl><fr>0ED7 3530 </fr>
    BEGIN 2DUP > WHILE DUP @ RECURSE 1+ REPEAT 2DROP <ok></ok><fl>0ED7 3530 </fl><fr>0EE0 3530 </fr>
     ." ] " <ok></ok><fl>0EE0 3530 </fl><fr>0EE3 3533 </fr>
    ELSE . END_IF <ok></ok><fl>0EE3 3533 </fl><fr>0EE5 3533 </fr>
  ; <ok></ok><fl>0EE5 3533 </fl><fr>0EE6 3533 </fr>
: B. SWAP . . ; <ok></ok><fl>0EE6 3533 </fl><fr>0EEE 3536 </fr>
 <ok></ok>
7 DUP . <ok>7 </ok>
2 9 H DUP . <ok>[ 7 0 9 ] </ok>
3 11 H DUP . <ok>[ 7 0 9 11 ] </ok>
1 4 1 6 H H DUP . <ok>[ 7 [ 4 6 ] 9 11 ] </ok>
1 G 2 88 H H DUP .  <ok>[ 7 [ 4 6 88 ] 9 11 ] </ok>
1 G 2 0 H H DUP . <ok>[ 7 [ 4 6 ] 9 11 ] </ok>
0 G 2 1987 H H DUP . <ok>[ [ 7 0 1987 ] [ 4 6 ] 9 11 ] </ok>
1 0 H DUP . <ok>[ [ 7 0 1987 ] 0 9 11 ] </ok>
3 0 H DUP . <ok>[ [ 7 0 1987 ] 0 9 ] </ok>
2 0 H DUP . <ok>[ [ 7 0 1987 ] ] </ok>
2 2444 H DUP . <ok>[ [ 7 0 1987 ] 0 2444 ] </ok>
0 N" 7777777" H DUP . <ok>[ 7777777 0 2444 ] </ok>
2 0 H DUP . <ok>7777777 </ok>
 <ok></ok>
 <ok></ok>
0 <ok></ok>
0 0 0 1 H 1 2 H 2 5 H H DUP . <ok>[ [ 1 2 5 ] ] </ok>
1 0 0 3 H 1 4 H 2 8 H H DUP . <ok>[ [ 1 2 5 ] [ 3 4 8 ] ] </ok>
2 0 0 9 H 1 2 H 2 1 H H CR DUP . <ok>
[ [ 1 2 5 ] [ 3 4 8 ] [ 9 2 1 ] ] </ok>
 <ok></ok>
0 1 4 H DUP . <ok>[ 0 4 ] </ok>
0 0 0 1 4 H H . <ok>[ [ 0 4 ] ] </ok>
 <ok></ok>
0  <ok></ok>
0 0 0 60 H 1 30 H 2 20 H H DUP . <ok>[ [ 60 30 20 ] ] </ok>
1 0 0 30 H 1 20 H 2 15 H H DUP . <ok>[ [ 60 30 20 ] [ 30 20 15 ] ] </ok>
2 0 0 20 H 1 15 H 2 12 H H CR DUP . <ok>
[ [ 60 30 20 ] [ 30 20 15 ] [ 20 15 12 ] ] </ok>
 <ok></ok>
0 VARIABLE SPMERK <ok></ok><fl>0EEE 3536 </fl><fr>0EF3 353D </fr>
: [ ( ---> spmerk ) <ok></ok><fl>0EF3 353D </fl><fr>0EF7 353F </fr>
  SPMERK @ SP @ SPMERK ! <ok></ok><fl>0EF7 353F </fl><fr>0EFD 353F </fr>
  ; <ok></ok><fl>0EFD 353F </fl><fr>0EFE 353F </fr>
 <ok></ok>
: ] ( spmerk a b c d ... z --> matrix ) <ok></ok><fl>0EFE 353F </fl><fr>0F02 3541 </fr>
  0 BEGIN SP @ 1- SPMERK @ M- WHILE <ok></ok><fl>0F02 3541 </fl><fr>0F0A 3541 </fr>
    SP @ 2 M- SPMERK @ M- ROT H REPEAT <ok></ok><fl>0F0A 3541 </fl><fr>0F14 3541 </fr>
  SWAP SPMERK ! <ok></ok><fl>0F14 3541 </fl><fr>0F17 3541 </fr>
  ; <ok></ok><fl>0F17 3541 </fl><fr>0F18 3541 </fr>
</sekt> 
 <ok></ok>
<sekt inhalt="Matrix invertieren"> 
: OBJ+0 ( obj --> obj+0 ) <ok></ok><fl>0F18 3541 </fl><fr>0F1C 3547 </fr>
  DUP OBJ? IF DUP >R <ok></ok><fl>0F1C 3547 </fl><fr>0F21 3547 </fr>
    ZERLEG 3FFF AND          ( adr n ) <ok></ok><fl>0F21 3547 </fl><fr>0F24 3547 </fr>
    SWAP OVER M+ 1- SWAP     ( eadr-1 n ) <ok></ok><fl>0F24 3547 </fl><fr>0F29 3547 </fr>
      BEGIN DUP WHILE SWAP   ( n eadr-1 ) <ok></ok><fl>0F29 3547 </fl><fr>0F2C 3547 </fr>
        DUP @ RECURSE OVER ! ( n eadr-1 ) <ok></ok><fl>0F2C 3547 </fl><fr>0F31 3547 </fr>
        1- SWAP 1-           ( eadr-1 n-1 ) <ok></ok><fl>0F31 3547 </fl><fr>0F34 3547 </fr>
        REPEAT               ( adr-1 0 ) <ok></ok><fl>0F34 3547 </fl><fr>0F35 3547 </fr>
    2DROP R>                 ( obj ) <ok></ok><fl>0F35 3547 </fl><fr>0F37 3547 </fr>
    ELSE A+0 END_IF <ok></ok><fl>0F37 3547 </fl><fr>0F39 3547 </fr>
  ; <ok></ok><fl>0F39 3547 </fl><fr>0F3A 3547 </fr>
 <ok></ok>
[ 12 18 1B ] OBJ+0 . <ok>[ 12 18 1B ] </ok>
 <ok></ok>
: OBJDUMP ( obj --> ) <ok></ok><fl>0F3A 3547 </fl><fr>0F3E 354F </fr>
  DUP OBJ? IF <ok></ok><fl>0F3E 354F </fl><fr>0F41 354F </fr>
    ZERLEG 3FFF AND                ( adr n ) <ok></ok><fl>0F41 354F </fl><fr>0F44 354F </fr>
      BEGIN DUP WHILE SWAP         ( n adr ) <ok></ok><fl>0F44 354F </fl><fr>0F47 354F </fr>
        CR OVER M. DUP M. DUP @  <ok></ok><fl>0F47 354F </fl><fr>0F4E 354F </fr>
        DUP M. DUP ABS 3FFF > NOT IF -1 M. -1 M. ELSE DUP ABS ZERLEG M. M. END_IF <ok></ok><fl>0F4E 354F </fl><fr>0F60 354F </fr>
        DUP . RECURSE             ( n adr ) <ok></ok><fl>0F60 354F </fl><fr>0F63 354F </fr>
        1+ SWAP 1-                 ( adr+1 n-1 ) <ok></ok><fl>0F63 354F </fl><fr>0F66 354F </fr>
        REPEAT                     ( adr+n 0 ) <ok></ok><fl>0F66 354F </fl><fr>0F67 354F </fr>
    2DROP                          ( ) <ok></ok><fl>0F67 354F </fl><fr>0F68 354F </fr>
    ELSE DROP END_IF <ok></ok><fl>0F68 354F </fl><fr>0F6A 354F </fr>
  ; <ok></ok><fl>0F6A 354F </fl><fr>0F6B 354F </fr>
 <ok></ok>
[ 12 18 1B ] OBJDUMP <ok>
0003 1473 0012 FFFF FFFF 12 
0002 1474 0018 FFFF FFFF 18 
0001 1475 001B FFFF FFFF 1B </ok>
[ [ 12 18 1B ] [ 1E 21 24 ] ] OBJDUMP <ok>
0002 147F 5476 4003 1477 [ 12 18 1B ] 
0003 1477 0012 FFFF FFFF 12 
0002 1478 0018 FFFF FFFF 18 
0001 1479 001B FFFF FFFF 1B 
0001 1480 547A 4003 147B [ 1E 21 24 ] 
0003 147B 001E FFFF FFFF 1E 
0002 147C 0021 FFFF FFFF 21 
0001 147D 0024 FFFF FFFF 24 </ok>
 <ok></ok>
: INVERTIEREN ( matrix dim --> invmat nenner ) <ok></ok><fl>0F6B 354F </fl><fr>0F6F 355B </fr>
  ( L0=nr L1=N L2=i L3=j L4=k L5=Y L6=Z L7=alternenner ) <ok></ok><fl>0F6F 355B </fl><fr>0F6F 355B </fr>
  8 LOCAL NEBENRECHNUNG L0 ! <ok></ok><fl>0F6F 355B </fl><fr>0F74 355B </fr>
  L1 ! 1 ( mat nenner ) <ok></ok><fl>0F74 355B </fl><fr>0F77 355B </fr>
  L1 @ L2 ! BEGIN -1 L2 +! ( CR L2 M? ERGEBNIS M? <ok></ok><fl>0F77 355B </fl><fr>0F7E 355B </fr>
    L7 ! ( mat ) 0 L5 ! 0 L6 ! <ok></ok><fl>0F7E 355B </fl><fr>0F86 355B </fr>
    DUP L2 @ L L2 @ L ( mat neuernenner ) <ok></ok><fl>0F86 355B </fl><fr>0F8D 355B </fr>
    L1 @ L3 ! BEGIN -1 L3 +! <ok></ok><fl>0F8D 355B </fl><fr>0F94 355B </fr>
      OVER L3 @ L L2 @ L L5 @ L3 @ ROT H L5 ! <ok></ok><fl>0F94 355B </fl><fr>0FA3 355B </fr>
      OVER L2 @ L L3 @ L L6 @ L3 @ ROT H L6 ! <ok></ok><fl>0FA3 355B </fl><fr>0FB2 355B </fr>
      L3 @ 0= UNTIL <ok></ok><fl>0FB2 355B </fl><fr>0FB6 355B </fr>
    L5 @ L2 @ L L7 @ + L5 @ L2 @ ROT H L5 ! <ok></ok><fl>0FB6 355B </fl><fr>0FC6 355B </fr>
    L6 @ L2 @ L L7 @ - L6 @ L2 @ ROT H L6 ! <ok></ok><fl>0FC6 355B </fl><fr>0FD6 355B </fr>
    L1 @ L3 ! BEGIN -1 L3 +! <ok></ok><fl>0FD6 355B </fl><fr>0FDD 355B </fr>
      OVER L3 @ L ( mat nenner mat[L3] ) <ok></ok><fl>0FDD 355B </fl><fr>0FE1 355B </fr>
      L1 @ L4 ! BEGIN -1 L4 +! ( CR L3 M? L4 M? ERGEBNIS M? <ok></ok><fl>0FE1 355B </fl><fr>0FE8 355B </fr>
        NEBENRECHNUNG ROT ROT SWAP ( mat erg mat[L3] nenner ) <ok></ok><fl>0FE8 355B </fl><fr>0FEC 355B </fr>
        OVER L4 @ L OVER * <ok></ok><fl>0FEC 355B </fl><fr>0FF2 355B </fr>
        L5 @ L3 @ L L6 @ L4 @ L * - <ok></ok><fl>0FF2 355B </fl><fr>0FFE 355B </fr>
        L7 @ / ( mat erg mat[L3] nenner bijneu ) <ok></ok><fl>0FFE 355B </fl><fr>1001 355B </fr>
        2SWAP SWAP ( mat nenner bijneu mat[L3] erg ) <ok></ok><fl>1001 355B </fl><fr>1003 355B </fr>
        HAUPTRECHNUNG SWAP A+0 ( mat nenner mat[L3] bijneu+0 ) <ok></ok><fl>1003 355B </fl><fr>1006 355B </fr>
        SWAP L4 @ ROT H ( mat nenner mat[L3]neu ) <ok></ok><fl>1006 355B </fl><fr>100B 355B </fr>
        L4 @ 0= UNTIL <ok></ok><fl>100B 355B </fl><fr>100F 355B </fr>
      ROT L3 @ ROT H SWAP ( matneu nenner ) <ok></ok><fl>100F 355B </fl><fr>1015 355B </fr>
      L3 @ 0= UNTIL <ok></ok><fl>1015 355B </fl><fr>1019 355B </fr>
    A+0 ( verschiebt nenner hinter matneu ) <ok></ok><fl>1019 355B </fl><fr>101A 355B </fr>
    ( RECHENBLOCK ) <ok></ok><fl>101A 355B </fl><fr>101A 355B </fr>
    ( CR ." vor 1. OBJ+0 " ERGEBNIS M? ( OVER OBJDUMP DUP . DUP ABS M. <ok></ok><fl>101A 355B </fl><fr>101A 355B </fr>
    L0 @ HAUPTRECHNUNG SWAP OBJ+0 SWAP A+0 <ok></ok><fl>101A 355B </fl><fr>1021 355B </fr>
    ( ." nach 1. OBJ+0 " ERGEBNIS M? ( OVER OBJDUMP DUP . DUP ABS M. <ok></ok><fl>1021 355B </fl><fr>1021 355B </fr>
    L2 @ 0= UNTIL <ok></ok><fl>1021 355B </fl><fr>1025 355B </fr>
  END_LOCAL <ok></ok><fl>1025 355B </fl><fr>1026 355B </fr>
  ; <ok></ok><fl>1026 355B </fl><fr>1027 355B </fr>
 <ok></ok>
( so und jetzt anwenden ) <ok></ok>
 <ok></ok>
[ [ 3C 1E 14 ] ( dezimal 60 30 20 ) <ok></ok>
  [ 1E 14 0F ] ( dezimal 30 20 15 ) <ok></ok>
  [ 14 0F 0C ] ( dezimal 20 15 12 ) <ok></ok>
  ] 3 <ok></ok>
OVER . DUP M. <ok>[ [ 3C 1E 14 ] [ 1E 14 F ] [ 14 F C ] ] 0003 </ok>
INVERTIEREN <ok></ok>
OVER . DUP . <ok>[ [ F -3C 32 ] [ -3C 140 -12C ] [ 32 -12C 12C ] ] 64 </ok>
( herauskommen muss dabei ) <ok></ok>
(             [ [ F -3C 32 ] [ -3C 140 -12C ] [ 32 -12C 12C ] ] 64 ) <ok></ok>
( dezimal        15 -60 ...                                      100 ) <ok></ok>
 <ok></ok>
 <ok></ok>
( paar Vandermonde-Matrizen invertieren: ) <ok></ok>
INIT <ok></ok>
[ [ 1 1 1 1 ] <ok></ok>
  [ 2 1 ^ 2 2 ^ 2 3 ^ 2 4 ^ ] <ok></ok>
  [ 3 1 ^ 3 2 ^ 3 3 ^ 3 4 ^ ] <ok></ok>
  [ 4 1 ^ 4 2 ^ 4 3 ^ 4 4 ^ ] <ok></ok>
  ] <ok></ok>
4 INVERTIEREN <ok></ok>
OVER . DUP . <ok>[ [ 480 -360 180 -48 ] [ -4E0 558 -2A0 84 ] [ 1B0 -240 150 -48 ] [ -30 48 -30 C ] ] 120 </ok>
ERGEBNIS M? <ok>1419 </ok>
( herauskommen soll [ [ 480 -360 180 -48 ] [ -4E0 558 -2A0 84 ] ... ] 120 ) <ok></ok>
 <ok></ok>
INIT <ok></ok>
[ [ 1 1 1 1 1 ] <ok></ok>
  [ 2 1 ^ 2 2 ^ 2 3 ^ 2 4 ^ 2 5 ^ ] <ok></ok>
  [ 3 1 ^ 3 2 ^ 3 3 ^ 3 4 ^ 3 5 ^ ] <ok></ok>
  [ 4 1 ^ 4 2 ^ 4 3 ^ 4 4 ^ 4 5 ^ ] <ok></ok>
  [ 5 1 ^ 5 2 ^ 5 3 ^ 5 4 ^ 5 5 ^ ] <ok></ok>
  ] <ok></ok>
5 INVERTIEREN <ok></ok>
OVER . DUP . <ok>[ [ 2A300 -2A300 1C200 -A8C0 1B00 ] [ -36240 4B3C0 -36D80 15720 -3840 ] [ 18F60 -297C0 22740 -E6A0 2760 ] [ -4EC0 9240 -8700 3DE0 -B40 ] [ 5A0 -B40 B40 -5A0 120 ] ] 8700 </ok>
ERGEBNIS M? <ok>144E </ok>
( herauskommen soll  [ [ 2A300 -2A300 ... ] ] 8700 ) <ok></ok>
 <ok></ok>
: VANDERMONDEMATRIX ( n --> mat ) <ok></ok><fl>1027 355B </fl><fr>102B 356D </fr>
  3 LOCAL <ok></ok><fl>102B 356D </fl><fr>102D 356D </fr>
  L0 ! <ok></ok><fl>102D 356D </fl><fr>102F 356D </fr>
  0  <ok></ok><fl>102F 356D </fl><fr>1030 356D </fr>
  L0 @ L1 ! BEGIN L1 @ DUP WHILE 1- L1 ! <ok></ok><fl>1030 356D </fl><fr>103B 356D </fr>
    L1 @ G <ok></ok><fl>103B 356D </fl><fr>103E 356D </fr>
    L0 @ L2 ! BEGIN L2 @ DUP WHILE 1- L2 ! <ok></ok><fl>103E 356D </fl><fr>1049 356D </fr>
      L2 @ L1 @ 1+ L2 @ 1+ ^  <ok></ok><fl>1049 356D </fl><fr>1052 356D </fr>
      H <ok></ok><fl>1052 356D </fl><fr>1053 356D </fr>
      REPEAT DROP <ok></ok><fl>1053 356D </fl><fr>1055 356D </fr>
    H <ok></ok><fl>1055 356D </fl><fr>1056 356D </fr>
    REPEAT DROP <ok></ok><fl>1056 356D </fl><fr>1058 356D </fr>
  END_LOCAL <ok></ok><fl>1058 356D </fl><fr>1059 356D </fr>
  ; <ok></ok><fl>1059 356D </fl><fr>105A 356D </fr>
 <ok></ok>
( 4 VANDERMONDEMATRIX DUP . <ok></ok>
 <ok></ok>
INIT <ok></ok>
4 VANDERMONDEMATRIX <ok></ok>
4 INVERTIEREN <ok></ok>
OVER . DUP . <ok>[ [ 480 -360 180 -48 ] [ -4E0 558 -2A0 84 ] [ 1B0 -240 150 -48 ] [ -30 48 -30 C ] ] 120 </ok>
ERGEBNIS M? <ok>1419 </ok>
( herauskommen soll [ [ 480 -360 180 -48 ] [ -4E0 558 -2A0 84 ] [ 1B0 -240 150 -48 ] [ -30 48 -30 C ] ] 120 <ok></ok>
( gekürzt [ [ 60 -48 20 -6 ] [ -68 72 -38 B ] [ 24 -30 1C -6 ] [ -4 6 -4 1 ] ] 18 ok <ok></ok>
 <ok></ok>
INIT <ok></ok>
5 VANDERMONDEMATRIX <ok></ok>
5 INVERTIEREN <ok></ok>
OVER . DUP . <ok>[ [ 2A300 -2A300 1C200 -A8C0 1B00 ] [ -36240 4B3C0 -36D80 15720 -3840 ] [ 18F60 -297C0 22740 -E6A0 2760 ] [ -4EC0 9240 -8700 3DE0 -B40 ] [ 5A0 -B40 B40 -5A0 120 ] ] 8700 </ok>
ERGEBNIS M? <ok>144E </ok>
( herauskommen soll [ [ 2A300 -2A300 1C200 -A8C0 1B00 ] [ -36240 4B3C0 -36D80 15720 -3840 ] [ 18F60 -297C0 22740 -E6A0 2760 ] [ -4EC0 9240 -8700 3DE0 -B40 ] [ 5A0 -B40 B40 -5A0 120 ] ] 8700 <ok></ok>
( gekürzt [ [ 258 -258 190 -96 18 ] [ -302 42E -30C 131 -32 ] ... [ 5 -A A -5 1 ] ] 78 ok <ok></ok>
 <ok></ok>
INIT <ok></ok>
6 VANDERMONDEMATRIX <ok></ok>
6 INVERTIEREN <ok></ok>
OVER . DUP . <ok>[ [ 8E62000 -B1FA800 9E34000 -58FD400 1C7A000 -3F4800 ] [ -CE74800 15B0EE00 -14EDD000 C3C6C00 -4012800 907E00 ] [ 72B2800 -E3E9500 F537000 -97C6B00 336A800 -76A700 ] [ -1EA6E00 43BB100 -4FC2C00 34E6300 -12C9600 2CD300 ] [ 3F4800 -964B00 BDD800 -867900 32A000 -7E900 ] [ -32A00 7E900 -A8C00 7E900 -32A00 8700 ] ] 17BB000 </ok>
ERGEBNIS M? <ok>14A1 </ok>
( herauskommen soll [ [ 8E62000 -B1FA800 9E34000 ... -32A00 8700 ] ] 17BB000 <ok></ok>
( gekürzt [ [ -10E0 1518 -12C0 A8C -360 78 ] ... [ 6 -F 14 -F 6 -1 ] ] -2D0 ok <ok></ok>
 <ok></ok>
INIT <ok></ok>
7 VANDERMONDEMATRIX <ok></ok>
ERGEBNIS M? <ok>1452 </ok>
7 INVERTIEREN <ok></ok>
OVER . DUP . <ok>[ [ CC65AF0000 -13298868000 154A9790000 -FF7F1AC000 7AA3690000 -2210F28000 42BDF0000 ] [ -1459356C000 281A9456000 -301BBE14000 25697808000 -12574BB4000 52A6ADE000 -A3848C000 ] [ CEFE230000 -1DE0593F000 277092A8000 -2040FF81000 104D98A0000 -4AFC775000 968A48000 ] [ -438629D000 ACC3A94000 -F72EC73000 D621620000 -708A45B000 21414E4000 -4421E5000 ] [ BF6B6B000 -20D97C2000 3215DE7000 -2DD3C02000 192F459000 -7B4986000 1038D5000 ] [ -11850F000 329CD6000 -511C29000 4DDD98000 -2CC5D1000 E467E000 -1F257000 ] [ A61D000 -1F257000 33E91000 -33E91000 1F257000 -A61D000 17BB000 ] ] 1D33190000 </ok>
ERGEBNIS M? <ok>1511 </ok>
( herauskommen soll [ [ CC65AF0000 -13298868000 ... 17BB000 ] ] 1D33190000  <ok></ok>
( gekürzt [ [ -89D0 CEB8 -E5B0 AC44 -52B0 16F8 -2D0 ]  ... [ -7 15 -23 23 -15 7 -1 ] ] -13B0 ok <ok></ok>
 <ok></ok>
INIT <ok></ok>
8 VANDERMONDEMATRIX <ok></ok>
ERGEBNIS M? <ok>147A </ok>
8 INVERTIEREN <ok></ok>
OVER . DUP . <ok>[ [ 8FB77F0C000000 -FB811E55000000 14F56D31C000000 -13A6165EA400000 C9341844000000 -53D5B4C7000000 1487ED94000000 -23EDDFC300000 ] [ -F6E288E0800000 22DCCFEB3600000 -31F9FCC1E800000 307D897DAC80000 -1FA9A063D800000 D5E0E67E200000 -34DE03C3800000 5D28C602C0000 ] [ AE2823BBE00000 -1C9EC2EB7F80000 2CBE3A40D600000 -2D711339F600000 1E82356CEA00000 -D1F6139B880000 3498AA68200000 -5D9D9266C0000 ] [ -41ABAB79C00000 BEBC9341DC0000 -140F7ACCE000000 156DB085D760000 -EE217721C00000 68E7E0455C0000 -1ABF4E66800000 3041418090000 ] [ E58C320880000 -2CA977ED100000 4FB7C878A80000 -5952EFDA200000 4065E96AD80000 -1D3145CE700000 79C292BF80000 -DF8F37680000 ] [ -1D247F7380000 5F69773080000 -B272C64880000 D096C4D6C0000 -9C17A72480000 490E580C80000 -138FBB3F80000 24BA45720000 ] [ 1FEFE3580000 -6C9604F80000 D2C8DC780000 -FF7F1AC00000 C60281880000 -5FCFAA080000 1A764EA80000 -33196BC0000 ] [ -E998C80000 33196BC0000 -6632D780000 7FBF8D60000 -6632D780000 33196BC0000 -E998C80000 1D33190000 ] ] 11F6EFE1800000 </ok>
ERGEBNIS M? <ok>15AD </ok>
( herauskommen soll [ [ 8FB77F0C000000 -FB811E55000000 ... 1D33190000 ] ] 11F6EFE1800000 <ok></ok>
( gekürzt [ [ 4EC00 -89D00 B7C00 -AC440 6E400 -2DF00 B400 -13B0 ] ... [ -( 1C -38 46 -38 1C -8 1 ] ] 9D80 ok <ok></ok>
 <ok></ok>
INIT <ok></ok>
9 VANDERMONDEMATRIX <ok></ok>
ERGEBNIS M? <ok>14AC </ok>
9 INVERTIEREN <ok></ok>
OVER . DUP . <okok>
ERGEBNIS M? <ok>1687 </ok>
( herauskommen soll [ [ 37F3F5B381040000000 ... 11F6EFE1800000 ] ] 6378D13F1E40000000 <ok></ok>
( gekürzt [ [ 31D580 -63AB00 9B0A00 -AE6B40 8B8900 -4D8500 1C7A00 -63AB0 9D80 ] ... [ 9 -24 54 -7E 7E -54 24 -9 1 ] ] 58980 ok <ok></ok>
 <ok></ok>
INIT <ok></ok>
0A VANDERMONDEMATRIX <ok></ok>
ERGEBNIS M? <ok>14E8 </ok>
0A INVERTIEREN <ok></ok>
OVER . DUP . <ok>[ [ D726B3E61B37C18000000000 -1E41714C5BD3D736000000000 35C9ACF986CDF060000000000 -4698B30780EE4B7E000000000 43C5CA969040EC50000000000 -2F10775A55F43254000000000 170D4A21CC0F1DE0000000000 -7905C5316F4F5CD800000000 17E7DB19913F158000000000 -226C97A9EFDFF6000000000 ] [ -19F0511AC532E7F5000000000 497D6F22699C7582400000000 -8B9D0D116EAA4014000000000 BD2030122BFDFA64C00000000 -B8F307A33690AA46000000000 82017F53A47DAB1F800000000 -4039A601B7D1F064000000000 15357E67C302F98DA00000000 -435CE129DFAF04D000000000 61628B533C3C86400000000 ] [ 155236F999AEEB03400000000 -4596FA9CA0ADDFED700000000 8E80714BABF93685000000000 -C8D53E66672214FE200000000 C933316EFC40BD8D800000000 -8FBDF1B95B56C5DFA00000000 47D7886BD189B509000000000 -17EEBCBE7CFEA779F00000000 4C88671F8FD35A1400000000 -6F3F2FB610B6EFF00000000 ] [ -9D75C110491FA6A200000000 23520D8993BB143F600000000 -4D2626669505D8DE800000000 7164F45E250C2F3EB00000000 -74D18948474E9BD7C00000000 551C85064554ACAEE00000000 -2B287ADE3A80264C800000000 E898B1E2964AC1E480000000 -2EE56BBA095BE33200000000 44A6ABF99DB28F800000000 ] [ 2D2123F081A354AB00000000 -AD4316F52A5E137240000000 18EE571E01042133C00000000 -2620460CB944EEA5980000000 2873B45C08A60478A00000000 -1E21969720CC8A31080000000 F8A62697B14DE98C00000000 -54E1CA941F44551EC0000000 114C9BB28744580300000000 -198C9890200838940000000 ] [ -85A71818F83562A80000000 21B484C61167F6A740000000 -50F72FD2E9D9FA4200000000 8047B863F4F7464A80000000 -8C1B53E53086AADB00000000 6AD6F97C39E5E56880000000 -3829D61B965BBA5A00000000 13794ABDA5BD357440000000 -4053831B9FCB3DE80000000 6009803D694B9840000000 ] [ 10044DAD4A466D200000000 -431D7ECD8A56DE480000000 A6DC9809800F5DC00000000 -110A4F4C1092CE9B00000000 131FE27ADA98DE0000000000 -EEEFF5954E4C48D00000000 8033E9A71A4BBA400000000 -2D3DD3C439EB39F80000000 97B8AF683DABAE00000000 -E57E9DC23F2A680000000 ] [ -133732CBE563F500000000 52EB283CE3514D80000000 -D40260FA26D92800000000 163B77486AEB4EE00000000 -19943EEAB792DC200000000 14707A0CE66CFA100000000 -B3396F02F940D000000000 407A2021D9AB9C00000000 -DC05FCD5DCA9100000000 1520C971C80CD80000000 ] [ D1D2D96123CF00000000 -39EB8956D08D240000000 978A0EC62815800000000 -10418082069B8980000000 131FE27ADA98DE00000000 -F9E4E4ABB0DE880000000 8BE1E640C28A000000000 -335CF28BC76EAC0000000 B2BD17FD6A5B00000000 -117C3CC8185140000000 ] [ -3E2B82C772E80000000 117C3CC8185140000000 -2EA0A215962E00000000 51991BA5C6D080000000 -61EAEDFA21C700000000 51991BA5C6D080000000 -2EA0A215962E00000000 117C3CC8185140000000 -3E2B82C772E80000000 6378D13F1E40000000 ] ] 1583DECA35EBF9C000000000 </ok>
ERGEBNIS M? <ok>17BE </ok>
( herauskommen soll [ [ D726B3E61B37C18000000000 ... 6378D13F1E40000000 ] ] 1583DECA35EBF9C000000000 <ok></ok>
( gekürzt [ [ -229B600 4DDD980 -8A6D800 B5AFB80 ... -D2 78 -2D A -1 ] ] -375F00 ok <ok></ok>
 <ok></ok>
INIT <ok></ok>
0B VANDERMONDEMATRIX <ok></ok>
ERGEBNIS M? <ok>1531 </ok>
0B INVERTIEREN <ok></ok>
OVER . DUP . <ok>[ [ 2331530F3797CA8619C400000000000 -57FB4FA60AFB7A4F406A00000000000 AFF69F4C15F6F49E80D400000000000 -107F1EEF220F26EEDC13E00000000000 1279E534C9FC7D866720800000000000 -F659456A852689AAB45C00000000000 96D363F812D3AD1A254800000000000 -41FC7BBC883C9BBB704F80000000000 138D2E24E5FEFEBC473400000000000 -384EEB4B8C2610D68FA00000000000 4A750CD1E9FB539EE400000000000 ] [ -4715BAF84A661AABC5E780000000000 DDB3FB3FBF7CFFD50EF7C0000000000 -1D8BBBBB6D7F87DC488BD80000000000 2DB186D7BC6B39B3A9D36C0000000000 -3419B9862F0C659F4D99F00000000000 2BEE2814D77C02D6B54F680000000000 -1B1EDC0214EFD4FD2026700000000000 BF05AAD682B47A461557A0000000000 -38DEE638F5C60DB1745980000000000 A469CBB7A85F39D3F11C0000000000 -DA1535E7A4E4B2FDFB80000000000 ] [ 3DF8D857A5CFD1F64BFA60000000000 -DDCA72A7F8C84FAAA538D0000000000 1FBB4F752BE65753E2BD4E0000000000 -32F27357897E787F0DED060000000000 3B6F4EA254B36E4ED377CC0000000000 -32E4046F7FD841B87445960000000000 1FC4112BF8C79C62ADE94C0000000000 -E19A9EDB120E8C671EDC90000000000 4399FF5EF85D490D6EC8E0000000000 -C4732420BC4CC1A1514D0000000000 105AEE47CCB5F69A99660000000000 ] [ -1ED42C6791809466012A50000000000 791B528A0DE4D8116E3F50000000000 -126C4C54B2A702E0E1DC5D0000000000 1EC37D63BF8E11DB80ADF10000000000 -24D55F90B8E652E0B1681A0000000000 201E5C0112E47729A3B4740000000000 -1451C363CB46BBEF32AD120000000000 91CD150B2574EE602CC938000000000 -2C0B747C1F94144E3AFE10000000000 80D61D951278F6D059B30000000000 -AC8CB3AF4B44565D1F10000000000 ] [ 9B92E5EE41DE07CC04758000000000 -28D3B9AB1F19B82E2C7C7C000000000 68812EC73DF2E3BE67F658000000000 -B516334173EC2536A81CA8000000000 DEC5624D8C51FFD4EE0730000000000 -C63730BFAF9E9F19958FB8000000000 7F59C66E7097B516C936F0000000000 -39CF6792B7DA7D5D251BF4000000000 11A2974404F23EAE2C0678000000000 -33FFF4AEA0BE3BEF92F0C000000000 461C28503E2B6A27ADB8000000000 ] [ -209961347C25D9695CE34000000000 8FD0E47DE23BF1940F7A0000000000 -17F81BF871659521366EF4000000000 2AEF3487EC16C8435B9A70000000000 -363C91AF87B1A311704D28000000000 314A2C5495DC980316FEE0000000000 -2035E46BD086CB98C1E6C8000000000 ED34363BB4924B89CC4E8000000000 -49306FEFB61A9BE804424000000000 D9E083ECFBA2A2094A40000000000 -12823CBFF19F79AED2C4000000000 ] [ 49B7A728030D078528C4000000000 -151BB2E285BAAFEA2ED9C000000000 3A325FC090E8E0B74ADDC000000000 -6B4F9D44B42ED90F355A8000000000 8AFA2FAF623922C98D7E8000000000 -81018B5A0167BA78E40F8000000000 55D510F9CA88746A10178000000000 -281C9511A2903515EF674000000000 C89C2ECCD49A26399E14000000000 -25BE1F0D142D9934F7AC000000000 33CBC8C0949208F01EC000000000 ] [ -6F4328BA38054655D48000000000 20D0092CF28BE678D850000000000 -5CF941D4913E1D186448000000000 AFCA6BB09068CD2217F0000000000 -E8E958E709862E603AD0000000000 DCAED5A434C8E77C9F80000000000 -958BC75944015B43D090000000000 47090E0D9328A22BDC88000000000 -168701F7B6AF2ED138E8000000000 44AF910A83CC6ABC170000000000 -5F56365746AF84CE28000000000 ] [ 6B78751C90D879C7D0000000000 -20726EB66E4FCF17094000000000 5E096678FEBD6A8ED60000000000 -B5AE7997C669D411038000000000 F5B5771B1DBD60BF8A0000000000 -ED5DEBF37AC13853E68000000000 A3CE4F676928EB2A5C0000000000 -4F23EDFB5BB1FDCE9FC000000000 197ED015667DAD68010000000000 -4EDE9802620A3856C4000000000 6EEFF4C2A608BFC60000000000 ] [ -3C174F3EC49A128B4000000000 127D5375C656CAA100000000000 -369A1A77CDB84E6374000000000 6B78751C90D879C7D0000000000 -9408310088C0797F68000000000 919AF13F79EB7BB3E0000000000 -664535A3711010CA88000000000 3244BAE8333BF6E5B8000000000 -10779E54E4A54C7764000000000 33C5501691BFD0F60000000000 -49F54DD7195B2A84000000000 ] [ ECAA92B05123BB4000000000 -49F54DD7195B2A84000000000 DDDFE9854C117F8C000000000 -1BBBFD30A9822FF18000000000 26D3FC10ED4FDCB88000000000 -26D3FC10ED4FDCB88000000000 1BBBFD30A9822FF18000000000 -DDDFE9854C117F8C000000000 49F54DD7195B2A84000000000 -ECAA92B05123BB4000000000 1583DECA35EBF9C000000000 ] ] 333078D050DCC97D3CC00000000000 </ok>
ERGEBNIS M? <ok>1953 </ok>
( herauskommen soll [ [ 2331530F3797CA8619C400000000000 -57FB4FA60AFB7A4F406A00000000000 ... 1583DECA35EBF9C000000000 ] ] 333078D050DCC97D3CC00000000000 <ok></ok>
( gekürzt [ [ -1A2BE700 416DC180 -82DB8300 ... -14A A5 -37 B -1 ] ] -2611500 ok <ok></ok>
 <ok></ok>
INIT <ok></ok>
0C VANDERMONDEMATRIX <ok></ok>
ERGEBNIS M? <ok>1588 </ok>
( 0C INVERTIEREN OVER . DUP . <ok></ok>
ERGEBNIS M? <ok>1588 </ok>
( herauskommen soll  <ok></ok>
( OVER . DUP . [ [ 1569BD000 -3AE2C7C00 82DB83000 ... -318 1EF -DC 42 -C 1 ] ] 1C8CFC00 ok <ok></ok>
 <ok></ok>
( mehr geht erstmal nicht weil nicht mehr Platz ) <ok></ok>
 <ok></ok>
 <ok></ok>
INIT <ok></ok>
[ [ 112  431  199 764 987 434 ] <ok></ok>
  [ 543 45 33 41 789 566 ] <ok></ok>
  [ 543 145 33 42 789 566 ] <ok></ok>
  [ 875 687 098 675 677 574 ] <ok></ok>
  [ 875 66B 0987 675 678 634 ] <ok></ok>
  [ 454 33 555 934 655 633 ] <ok></ok>
  ]  <ok></ok>
DUP . <ok>[ [ 112 431 199 764 987 434 ] [ 543 45 33 41 789 566 ] [ 543 145 33 42 789 566 ] [ 875 687 98 675 677 574 ] [ 875 66B 987 675 678 634 ] [ 454 33 555 934 655 633 ] ] </ok>
6 INVERTIEREN ( mat dim --> invmat nenner ) <ok></ok>
OVER . <ok>[ [ 27276428B0E9 -33FD2E9C83CD0A 36525A21D36B67 -5B6695B4D77EA -3093457A10166 5ED85D6D5A12A ] [ 14B8624C29F 23F0A37B21A650 -23F54B966E2DB2 320EE615E87 -1418992AE6F 1AE8B369C60 ] [ -CAC1A9F7ECEA -8AB9A28A74D8F 9744B3E45C16A 38CEFB41B368B -4A47D9FEA5ECC 160664B6AA45E ] [ -14B8624C29F00 -C363E60F784F1 10DE59AD7EE6F1 -320EE615E8700 1418992AE6F00 -1AE8B369C6000 ] [ -6D3C9FC72F7E6 -2F0698EAD8D33F 2F2624E1612412 32C45F0508E -324A2228B7DBF 7A7E4DA446B7E ] [ 9786AE2C87255 6CC328E4C18686 -761A88CE3376B2 590EB00BDB612 7756E029B7354 -106F8E3727FCF1 ] ] </ok>
DUP . <ok>-23E46D3CC0AECB0F </ok>
</sekt> 
 <ok></ok>
<sekt inhalt="Reste die auch weggelassen werden können, wenn alles geht"> 
: VLIST <ok></ok><fl>105A 356D </fl><fr>105E 3573 </fr>
  LFA @ BEGIN  <ok></ok><fl>105E 3573 </fl><fr>1060 3573 </fr>
    DUP 1+ @ OVER 2 M+ @ TYPE 20 EMIT  <ok></ok><fl>1060 3573 </fl><fr>106A 3573 </fr>
    DUP @ WHILE DUP @ M+ REPEAT <ok></ok><fl>106A 3573 </fl><fr>1071 3573 </fr>
  DROP ; <ok></ok><fl>1071 3573 </fl><fr>1073 3573 </fr>
 <ok></ok>
: WLIST <ok></ok><fl>1073 3573 </fl><fr>1077 3579 </fr>
  LFA @ BEGIN ( CR ) DUP M. <ok></ok><fl>1077 3579 </fl><fr>107B 3579 </fr>
    DUP 1+ @ OVER 2 M+ @ TYPE 20 EMIT  <ok></ok><fl>107B 3579 </fl><fr>1085 3579 </fr>
    DUP @ WHILE DUP @ M+ REPEAT <ok></ok><fl>1085 3579 </fl><fr>108C 3579 </fr>
  DROP <ok></ok><fl>108C 3579 </fl><fr>108D 3579 </fr>
  ; <ok></ok><fl>108D 3579 </fl><fr>108E 3579 </fr>
 <ok></ok>
: REPLACE: ( /name/ )  <ok></ok><fl>108E 3579 </fl><fr>1092 3582 </fr>
  CSP! ( oo ) <ok></ok><fl>1092 3582 </fl><fr>1093 3582 </fr>
  20 WORD FIND DUP IF  <ok></ok><fl>1093 3582 </fl><fr>1098 3582 </fr>
    LCFA DROP 1+ ( pfa <ok></ok><fl>1098 3582 </fl><fr>109B 3582 </fr>
(    HERE OVER M- 1- JRBIT XSETBT SWAP ! <ok></ok><fl>109B 3582 </fl><fr>109B 3582 </fr>
    HERE SWAP DP ! DUP COMPILE, RETURN , DP ! <ok></ok><fl>109B 3582 </fl><fr>10A5 3582 </fr>
    1 STAT ! <ok></ok><fl>10A5 3582 </fl><fr>10A8 3582 </fr>
    ELSE 2DROP 3 ERROR END_IF ; <ok></ok><fl>10A8 3582 </fl><fr>10AD 3582 </fr>
 <ok></ok>
: FORGET ( /name/ ) <ok></ok><fl>10AD 3582 </fl><fr>10B1 3589 </fr>
  20 WORD FIND IF  <ok></ok><fl>10B1 3589 </fl><fr>10B5 3589 </fr>
    DP ! <ok></ok><fl>10B5 3589 </fl><fr>10B7 3589 </fr>
    HERE DUP @ M+ LFA ! <ok></ok><fl>10B7 3589 </fl><fr>10BD 3589 </fr>
    HERE 1+ @ BZEIG ! <ok></ok><fl>10BD 3589 </fl><fr>10C2 3589 </fr>
    ELSE DROP ." nicht gefunden " END_IF <ok></ok><fl>10C2 3589 </fl><fr>10C7 3599 </fr>
  ; <ok></ok><fl>10C7 3599 </fl><fr>10C8 3599 </fr>
 <ok></ok>
: FEHLERTEXT ( n --> n ) <ok></ok><fl>10C8 3599 </fl><fr>10CC 35A4 </fr>
  CR <ok></ok><fl>10CC 35A4 </fl><fr>10CD 35A4 </fr>
  DUP 0 = IF ." Division durch Null" END_IF <ok></ok><fl>10CD 35A4 </fl><fr>10D4 35B8 </fr>
  DUP 3 = IF ." Wort nicht definiert" END_IF <ok></ok><fl>10D4 35B8 </fl><fr>10DB 35CD </fr>
  DUP 6 = IF ." Eingabezeile zu lang" END_IF <ok></ok><fl>10DB 35CD </fl><fr>10E2 35E2 </fr>
  DUP 9 = IF ." Strukturfehler in IF END_IF BEGIN UNTIL DO LOOP " END_IF <ok></ok><fl>10E2 35E2 </fl><fr>10E9 3613 </fr>
  DUP 12 = IF ." negativer Exponent" END_IF <ok></ok><fl>10E9 3613 </fl><fr>10F0 3626 </fr>
  DUP 369 = IF ." Zahlenspeicher voll" END_IF <ok></ok><fl>10F0 3626 </fl><fr>10F7 363A </fr>
  DUP 1234 = IF ." große ganze Zahlen kompilieren geht momentan nicht." END_IF <ok></ok><fl>10F7 363A </fl><fr>10FE 366F </fr>
  ; <ok></ok><fl>10FE 366F </fl><fr>10FF 366F </fr>
 <ok></ok>
( ganz neu: Steuerungstasten: ^A bis ^G, weiter ^H=^A ^L=^B ... ) <ok></ok>
2F18 8 0 FILL <ok></ok>
: STRG: : HERE 3 M- DUP M. @ 1+ DUP M. @ DUP M. 40 M- HERE SWAP 7 AND 2F18 M+ ! ; <ok></ok><fl>10FF 366F </fl><fr>111A 3675 </fr>
STRG: ^G 7 EMIT ." /1xPIEP/" ; <ok>111B 3676 0047 </ok><fl>111A 3675 </fl><fr>1124 3681 </fr>
STRG: ^F 7 EMIT ." QUIT" QUIT ; <ok>1125 3682 0046 </ok><fl>1124 3681 </fl><fr>112F 3689 </fr>
STRG: ^A ." Angehalten für genau eine Eingabezeile: " <ok>1130 368A 0041 </ok><fl>112F 3689 </fl><fr>1136 36B6 </fr>
  CR FA00 100 EXPECT INTERPRET ." ok"; <ok></ok><fl>1136 36B6 </fl><fr>113F 36B9 </fr>
 <ok></ok>
: QUERY ( adr --> n ) TIB @ 100 EXPECT ; <ok></ok><fl>113F 36B9 </fl><fr>1148 36BF </fr>
 <ok></ok>
IMMEDIATE: (*REM*)  <ok></ok><fl>1148 36BF </fl><fr>114C 36C7 </fr>
  3C EMIT ." /ok>" <ok></ok><fl>114C 36C7 </fl><fr>1151 36CC </fr>
  BEGIN CR QUERY " (*END*)" Z= UNTIL <ok></ok><fl>1151 36CC </fl><fr>1158 36D4 </fr>
  3C EMIT ." ok>" <ok></ok><fl>1158 36D4 </fl><fr>115D 36D8 </fr>
  ; <ok></ok><fl>115D 36D8 </fl><fr>115E 36D8 </fr>
</sekt> 
 <ok></ok>
<sekt inhalt="Reste, die schon weggelassen sind"> 
(*REM*) <ok></ok>
  RAMP1 VARIABLE RAMP3 ( RAMP3 TIB RAMP1 
: RAMBUF ( /name/  n --> ) 
  MINUS RAMP3 +! RAMP3 @ CONSTANT ; ( oo INDVAR muss da her ) 
 
( - LOOP's - sind aber sehr langsam ) 
: I RP @ 1+ @ ; 
: J RP @ 3 M+ @ ; 
: K RP @ 5 M+ @ ; 
: (DO) SWAP R> ROT ROT >R >R >R ; 
: (LOOP) R> R> 1+ DUP R LT IF >R 0  
  ELSE R> DROP DROP -1 END_IF SWAP >R ; 
: (+LOOP) R> R>  ROT DUP  0LT IF M+ R OVER 
  ELSE M+ DUP R END_IF LT IF >R 0  
  ELSE R> DROP DROP -1 END_IF SWAP >R  ; 
IMMEDIATE: DO COMPILE (DO) HERE ; 
IMMEDIATE: LOOP COMPILE (LOOP) 0BRANCH, ; 
IMMEDIATE: +LOOP COMPILE (+LOOP) 0BRANCH, ; 
( : LL 0 DO I M. LOOP ; 7 LL ( ok geht ) 
 
 
IMMEDIATE: () 0 WORD 2DROP ; 
: B. ( a b --> ) SWAP M. M. ; 
: 2@ ( adr --> a b ) 
  DUP 1+ @ SWAP @ ; 
: 2! ( a b adr --> ) 
  SWAP OVER ! 1+ ! ; 
: 2? 2@ B. ; 
 
: LDUMP LFA @ HERE OVER M- DUMP ; 
 
A012 MCODE D+ 
A013 MCODE D- 
 
 
( - paar Geraeteadressen: ) 
D004 CONSTANT UHR 
D005 CONSTANT SWTI 
D00D CONSTANT UHRL 
2D05 CONSTANT XOFFINPUT 
 
( - "Platinen befestigen und entfernen" ) 
20 RAMBUF TLISTE 
TLISTE VARIABLE TLISTENZEIGER 
: TLISTY  
  TLISTENZEIGER @ TLISTE BEGIN  
    DUP @ CR DUP M. 3 M- 2@ SWAP TYPE  
    1+ 2DUP = UNTIL 2DROP ; 
 
0 VARIABLE REMOPFA 
0 VARIABLE STATMERK 
0 VARIABLE EXXIUHR 
: EXXI 
  UHRL @ >R 
  STAT @ STATMERK ! 0 STAT ! ( eigentlich >R ) 
  TLISTE 
  BEGIN DUP TLISTENZEIGER @ LT WHILE 
    DUP >R @ EXECUTE R> 1+ REPEAT DROP 
  STATMERK @ STAT !  
  UHRL @ R> M- EXXIUHR !  
  ; 
( ' EXXI 6 1+ M- 6000 OR 6 ! 
' EXXI 4000 M+ 16 ! ( CR geht momentan +F9XX ) 
 
: ENTFERNE  
  20 WORD FIND LCFA DROP 1+ 
  ( DUP 0= IF 3 ERROR END_IF ) 
  0 REMOPFA ! 
  TLISTENZEIGER @ TLISTE > IF 
    TLISTENZEIGER @ TLISTE DO 
      DUP I @ = IF 
        1 REMOPFA ! 
        -1 TLISTENZEIGER +! 
        END_IF 
      REMOPFA @ IF 
        I 1+ @ I ! 
        END_IF 
      LOOP END_IF 
  REMOPFA ! 
  ; 
   
: BEFESTIGE ENTFERNE 
  REMOPFA @ TLISTENZEIGER @ ! 
  1 TLISTENZEIGER +!  
  ; 
 
 
: DABS ( h l --> h' l' ) 
  OVER 0LT IF 0 0 2SWAP D- END_IF ; 
 
 
( CASEOFS aus'm PSION: ) 
: CASEOFS ( n  /name/ --> ) 
  DUP RAMBUF 
  0 DO 
    0 I RAMP3 @ + ! 
    LOOP 
  ; 
 
: CASEOF: ( fn en --> ) 
  M+ HERE DPMERK @ M- SWAP ! 
  CSP! 1 STAT ! 
  ; 
 
: CASEOF ( fn en --> ) 
  M+ @ DUP IF 
    DPMERK @ M+ EXECUTE 
    ELSE DROP END_IF ; 
 
( - CASE ) 
( : BIT ( i n --> bit ) 
(   2 ROT DUP 0LT IF 99 ERROR ELSE  
(   ^ AND 0= 1+ END_IF ;  
 
: (OF) ( n r i --> f r' ) 
  ROT = DUP ROT OR ; 
: (RANGE-OF) ( n1 n2 r i --> f r' ) 
  DUP >R ROT > ROT R> > OR 0= DUP ROT OR ; 
( : (BIT-OF) ( n r i --> f r' ) 
(   ROT BIT DUP ROT OR ; 
 
IMMEDIATE: CASE ( n --> ) 
  " >R 0 >R"  
  INTERPRET ; 
IMMEDIATE: END_CASE ( --> ) 
  " R> R> 2DROP"  
  INTERPRET ; 
IMMEDIATE: OF ( n --> ) 
  " R> R (OF) >R IF"  
  INTERPRET ;               
IMMEDIATE: RANGE-OF ( n1 n2 --> ) 
  " R> R (RANGE-OF) >R IF"  
  INTERPRET ; 
IMMEDIATE: BIT-OF ( m --> ) 
  " R> R (BIT-OF) >R IF"  
  INTERPRET ; 
IMMEDIATE: ELSEOF ( --> ) 
  " R 0= IF" INTERPRET ; 
IMMEDIATE: END_OF ( --> ) 
  " END_IF" INTERPRET ; 
: ERR ." keine gültige RAM-Adresse" QUIT ; 
' ERR 4000 OR 22 ! 
' ERR 4000 OR 20 ! 
 
IMMEDIATE: /; 0 STAT ! CSP? HERE 1- @ 800 OR HERE 1- ! SMUDGE [ SMUDGE ] ;  
( : T 77 88 DROP /;  
( ' T 8 DUMP 
( : W PAUSENBIT ! /; 
( ' W 8 DUMP 
 
 
( Ausgabe von ESCAPE-Sequenzen: sie vertragen sich aber nicht mit xml, besser CSI nehmen ) 
20 WORD: ESC 1B EMIT BEGIN OVER C@ EMIT SWAP 1+ SWAP 1- DUP 0= UNTIL DROP ; 
ESC ]0;FORTY-FORTH 07 EMIT ( 07 EMIT schließt ] 
: FESTPOSITION ESC [s ESC [1;1H ESC [31m ; ( saveC Pos1,1 redcolor 
: RUCKPOSITION ESC [u ESC [39m ; ( restoreC defaultcolor 
 
( Alternativer Start mit ESCAPE-Sequenzen ) 
 
: QUIT2  
  RP0 @ RP ! 
  BEGIN  
    STAT @ 0= IF ESC [34m ." ok" END_IF CR ESC [39m  
    TIB @ 100 EXPECT ESC [36m INTERPRET  
    AGAIN ; 
 
( REPLACE: QUIT QUIT2 ; 
( QUIT 
 
: QUIT3 
  RP0 @ RP ! 
  BEGIN  
    STAT @ 0= IF ."   " END_IF 
    CR   
    CRBIT @ 2 AND IF 3C EMIT ." /ok>" END_IF 
    CRBIT @ 4 AND IF C2 EMIT 9B EMIT 33 EMIT 36 EMIT 6D EMIT END_IF 
    TIB @ 100 EXPECT  
    CRBIT @ 4 AND IF C2 EMIT 9B EMIT 33 EMIT 39 EMIT 6D EMIT END_IF 
    CRBIT @ 2 AND IF 3C EMIT ." ok>" END_IF 
    INTERPRET 
    AGAIN ; 
 
 
: IOSTART 
  2C40 2C00 DO I @ I ! LOOP 
  2D30 2D14 DO I @ I ! LOOP 
  ; 
IOSTART 
 
( wozu das RBIT war? für relatives CR ) 
: COMPILE, ( adr --> ) 
  RBIT @ IF 4000 ELSE  
    DP @ 1+ M- 0FFF AND 3000 END_IF 
    0000 M+ M+ , ; 
 
: a*a;;  
  A 2000 111111 FILL 
  B 2000 111111 FILL 
  C 4001 000000 FILL 
  0 2000 A 0 2000 B C SMUL 7 EMIT ; 
(*END*) <ok></ok>
</sekt> 
 <ok></ok>
<sekt inhalt="DEMO"> 
56 89 M* M. <ok>2E06 </ok>
77 88 M+ M. <ok>00FF </ok>
 <ok></ok>
( aktuelles Vokabular <ok></ok>
 <ok></ok>
VLIST <ok>(*REM*) QUERY ^A ^F ^G STRG: FEHLERTEXT FORGET REPLACE: WLIST VLIST VANDERMONDEMATRIX INVERTIEREN OBJDUMP OBJ+0 ] [ SPMERK B. . H G L OBJ? ZERLEG B. . ^ N" NNUMBER BK GGT MOD / B+0 A+0 INIT RECHENBLOCK HAUPTRECHNUNG NEBENRECHNUNG BLOCKENDE BLOCKANFANG B. . HG0. /MOD RECURSE * - + 2OPERANDEN->2SLX SPEICHERHOL OPERAND->SLX SLX->ERGEBNIS SCHIEB SPEICHERENDE ZAHLENSPEICHER ERGEBNIS OPERAND2 OPERAND1 SDIV M/MOD DIV32 DI32 ADDIER SMUL C B A SUPERMULT MULT_II MULT_I MIN MAX DUMP FILL MOVE VARIABLE RAMP1 DUMPZ NG. LG. ; : COMPILE: IMMEDIATE: (:) (COMPILE:) (IMMEDIATE:) SMUDGE START QUIT INTERPRET CREATE COMPILE, LCFA FIND Z= WORD NUMBER DIGIT EXPECT KEYCODE2 KEY_INT INCR4 ' L7 L6 L5 L4 L3 L2 L1 L0 END_LOCAL LOCAL CSP? CSP! ERROR DISABLE FEHLERTEXT CR M? M. HG. TYPE DIG SHL16 EMIT KEY EXECUTE , R >R R> +! BYE M* > LT = M- 1- 1+ C! C@ REPEAT WHILE ELSE END_IF IF UNTIL AGAIN BEGIN 0BRANCH, BRANCH, ALLOT XSETBT JR0BIT JRBIT HERE ." " WORD: (WORD:) Z, B, NOOP 2DROP 2DUP 2OVER 2SWAP DROP ROT DUP OVER SWAP @ ! M+ OR AND NOT EMITCODE 0LT 0= U* U+ MINUS MCODE (MCODE:) RETURN VERSION LOCALADRESSE DUBIT CSP DPMERK BZEIG BANF LFA STAT DP ERRORNR IN4 IN3 IN2 IN1 TIB BASE CRDP CRBZEIG XOFF JRAMADR IRAMADR RP0 SMUDGEBIT XBIT PC RP SP KEYADR CONSTANT (CONSTANT:) LIT, ABS MLIT COMPILE } { ( </ok>
 <ok></ok>
( nochmal mit Speicheradressen, vor jedem Wort steht dessen "Linkfeld"_Adresse=Aufruf_Adresse-4 ) <ok></ok>
 <ok></ok>
WLIST <ok>1148 (*REM*) 113F QUERY 112F ^A 1124 ^F 111A ^G 10FF STRG: 10C8 FEHLERTEXT 10AD FORGET 108E REPLACE: 1073 WLIST 105A VLIST 1027 VANDERMONDEMATRIX 0F6B INVERTIEREN 0F3A OBJDUMP 0F18 OBJ+0 0EFE ] 0EF3 [ 0EEE SPMERK 0EE6 B. 0EC7 . 0E3F H 0E38 G 0E1C L 0E02 OBJ? 0DF7 ZERLEG 0DEF B. 0DB7 . 0D86 ^ 0D7E N" 0CF1 NNUMBER 0CDE BK 0CCC GGT 0CBF MOD 0CB1 / 0CA8 B+0 0C7E A+0 0C73 INIT 0C66 RECHENBLOCK 0C5F HAUPTRECHNUNG 0C58 NEBENRECHNUNG 0C53 BLOCKENDE 0C4E BLOCKANFANG 0C46 B. 0C21 . 0BF3 HG0. 0BAD /MOD 0BA3 RECURSE 0B9B * 0B94 - 0B8C + 0B78 2OPERANDEN->2SLX 0B5B SPEICHERHOL 0B38 OPERAND->SLX 0AFC SLX->ERGEBNIS 0AF7 SCHIEB 0AF2 SPEICHERENDE 0AED ZAHLENSPEICHER 0AE8 ERGEBNIS 0AE3 OPERAND2 0ADE OPERAND1 09DF SDIV 09D6 M/MOD 09C8 DIV32 09C2 DI32 08FE ADDIER 08B8 SMUL 08B3 C 08AE B 08A9 A 089E SUPERMULT 0898 MULT_II 0892 MULT_I 0888 MIN 087E MAX 086E DUMP 085C FILL 0847 MOVE 0839 VARIABLE 0834 RAMP1 07DD DUMPZ 07CD NG. 07B3 LG. 07A7 ; 079D : 0793 COMPILE: 0789 IMMEDIATE: 077D (:) 0776 (COMPILE:) 076F (IMMEDIATE:) 0767 SMUDGE 075C START 070F QUIT 06C2 INTERPRET 06AD CREATE 06A3 COMPILE, 069A LCFA 065A FIND 0626 Z= 05E0 WORD 0563 NUMBER 053A DIGIT 04CE EXPECT 04A8 KEYCODE2 0479 KEY_INT 0467 INCR4 0458 ' 044F L7 0446 L6 043D L5 0434 L4 042B L3 0422 L2 0419 L1 0411 L0 0405 END_LOCAL 03F7 LOCAL 03EA CSP? 03E1 CSP! 03BE ERROR 03AD DISABLE 03A8 FEHLERTEXT 0369 CR 0362 M? 035A M. 0348 HG. 0338 TYPE 032A DIG 0320 SHL16 0319 EMIT 030E KEY 0307 EXECUTE 02FC , 02F3 R 02DE >R 02CB R> 02C0 +! 02B7 BYE 02AC M* 02A5 > 029E LT 0297 = 0290 M- 0289 1- 0282 1+ 027C C! 0276 C@ 026E REPEAT 0268 WHILE 025E ELSE 0251 END_IF 0248 IF 0242 UNTIL 023C AGAIN 0236 BEGIN 022B 0BRANCH, 0220 BRANCH, 0219 ALLOT 020A XSETBT 0204 JR0BIT 01FE JRBIT 01F7 HERE 01F0 ." 01EA " 01DC WORD: 01D0 (WORD:) 01B9 Z, 01AE B, 01A8 NOOP 01A2 2DROP 019C 2DUP 0196 2OVER 0190 2SWAP 018A DROP 0184 ROT 017E DUP 0178 OVER 0172 SWAP 016C @ 0166 ! 0160 M+ 015A OR 0154 AND 014E NOT 0148 EMITCODE 0142 0LT 013C 0= 0136 U* 0130 U+ 012A MINUS 011F MCODE 0112 (MCODE:) 010A RETURN 0105 VERSION 0100 LOCALADRESSE 00FB DUBIT 00F6 CSP 00F1 DPMERK 00EC BZEIG 00E7 BANF 00E2 LFA 00DD STAT 00D8 DP 00D3 ERRORNR 00CE IN4 00C9 IN3 00C4 IN2 00BF IN1 00BA TIB 00B5 BASE 00B0 CRDP 00AB CRBZEIG 00A6 XOFF 00A1 JRAMADR 009C IRAMADR 0097 RP0 0092 SMUDGEBIT 008D XBIT 0088 PC 0083 RP 007E SP 0079 KEYADR 0070 CONSTANT 0065 (CONSTANT:) 0056 LIT, 004D ABS 0043 MLIT 0038 COMPILE 0030 } 0028 { 0020 ( </ok>
 <ok></ok>
( LED's zum Leuchten bringen, also auf Adresse 2D04 ausgeben ) <ok></ok>
 <ok></ok>
2D04 CONSTANT LEDS <ok></ok><fl>115E 36D8 </fl><fr>1163 36DD </fr>
55 LEDS ! <ok></ok>
 <ok></ok>
( erreichte Programmdresse in 0000-1FFF ) <ok></ok>
 <ok></ok>
HERE M. <ok>1163 </ok>
 <ok></ok>
( erreichte Adresse in Textspeicher E000-FFFF ) <ok></ok>
 <ok></ok>
BZEIG M? <ok>36DD </ok>
 <ok></ok>
( aktuelle Stapelhoehe ) <ok></ok>
 <ok></ok>
SP M? <ok>00C6 </ok>
 <ok></ok>
( Ein neues Wort definieren ) <ok></ok>
 <ok></ok>
: H ." Hallo Welt " ; <ok></ok><fl>1163 36DD </fl><fr>116B 36EB </fr>
 <ok></ok>
H <ok>Hallo Welt </ok>
 <ok></ok>
( Bedingung IF ) <ok></ok>
 <ok></ok>
: W ( n --> )  <ok></ok><fl>116B 36EB </fl><fr>116F 36ED </fr>
  ." Das ist eine "  <ok></ok><fl>116F 36ED </fl><fr>1172 36FB </fr>
  1 AND IF ." un" END_IF  <ok></ok><fl>1172 36FB </fl><fr>1178 36FE </fr>
  ." gerade Zahl " ;  <ok></ok><fl>1178 36FE </fl><fr>117C 370B </fr>
 <ok></ok>
7 W <ok>Das ist eine ungerade Zahl </ok>
8 W <ok>Das ist eine gerade Zahl </ok>
 <ok></ok>
( Programmschleifen, die für DO LOOP ist aber momentan stillgelegt. ) <ok></ok>
 <ok></ok>
( : X ( n --> ) <ok></ok>
(   0 DO I M. LOOP ; <ok></ok>
( 13 X  <ok></ok>
 <ok></ok>
( oder ) <ok></ok>
 <ok></ok>
: Y ( n --> ) <ok></ok><fl>117C 370B </fl><fr>1180 370D </fr>
  0 BEGIN DUP M. 1+ 2DUP = UNTIL 2DROP ; <ok></ok><fl>1180 370D </fl><fr>1189 370D </fr>
 <ok></ok>
13 Y <ok>0000 0001 0002 0003 0004 0005 0006 0007 0008 0009 000A 000B 000C 000D 000E 000F 0010 0011 0012 </ok>
 <ok></ok>
( oder ) <ok></ok>
 <ok></ok>
: Z ( n --> ) <ok></ok><fl>1189 370D </fl><fr>118D 370F </fr>
  0 BEGIN 2DUP > WHILE DUP M. 1+ REPEAT 2DROP ; <ok></ok><fl>118D 370F </fl><fr>1197 370F </fr>
 <ok></ok>
13 Z <ok>0000 0001 0002 0003 0004 0005 0006 0007 0008 0009 000A 000B 000C 000D 000E 000F 0010 0011 0012 </ok>
 <ok></ok>
( alles ab LEDS wieder vergessen ) <ok></ok>
 <ok></ok>
HERE M. BZEIG M? <ok>1197 370F </ok>
FORGET LEDS <ok></ok><fl>1197 370F </fl><fr>115E 36D8 </fr>
HERE M. BZEIG M? <ok>115E 36D8 </ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
( Also an der Stelle nach FFINIT1SMUL.TXT hab ich jetzt ) <ok></ok>
( N" ( /number/  -> n        liest bis " eine grosse ganze Zahl ein <ok></ok>
(                            kleine ganze Zahlen wie bisher eingeben <ok></ok>
( + - * / /MOD MOD ^  und rechnet damit <ok></ok>
( .   a -->                 und gibt sie aus <ok></ok>
( BK  a b --> a' b'         Kürzen <ok></ok>
( GGT a b --> ggt           groesster gemeinsamer Teiler <ok></ok>
(  <ok></ok>
( also direkt eingeben und mit + - * / rechnen geht hier noch nicht <ok></ok>
 <ok></ok>
 <ok></ok>
( ERGEBNIS ist unpassend gewählter Variablenname,  <ok></ok>
( bezeichnet ab welcher Adresse das nächste Ergebnis gespeichert wird, <ok></ok>
( Platz dafür ist von 1400H bis 1FFFH, aktuell erreicht: ) <ok></ok>
  <ok></ok>
ERGEBNIS M? ( Zahlenspeicher gefuellt bis )  <ok>14E3 </ok>
 <ok></ok>
ZAHLENSPEICHER @ ERGEBNIS ! ( Zahlenspeicher leeren ) <ok></ok>
 <ok></ok>
ERGEBNIS M? <ok>1400 </ok>
 <ok></ok>
N" 111111111111111" DUP * . <ok>123456789ABCDEFEDCBA987654321 </ok>
 <ok></ok>
ERGEBNIS M? <ok>140F </ok>
 <ok></ok>
( dritte binomische Formel 10^20-{10^10+1}*{10^10-1}=1 ) <ok></ok>
10 20 ^ 10 10 ^ 1 - 10 10 ^ 1 + * - . <ok>1 </ok>
 <ok></ok>
ERGEBNIS M? <ok>1453 </ok>
 <ok></ok>
 <ok></ok>
( Zahlenbasis wechseln ) <ok></ok>
 <ok></ok>
: HEX 10 BASE ! ; <ok></ok><fl>115E 36D8 </fl><fr>1166 36DC </fr>
: DECIMAL 0A BASE ! ; <ok></ok><fl>1166 36DC </fl><fr>116E 36E4 </fr>
 <ok></ok>
HEX N" 10000" <ok></ok>
DECIMAL DUP . <ok>65536 </ok>
HEX DUP . <ok>10000 </ok>
 <ok></ok>
HEX N" 100000000" <ok></ok>
DECIMAL DUP . <ok>4294967296 </ok>
HEX DUP . <ok>100000000 </ok>
</sekt> 
 <ok></ok>
<sekt inhalt="in den Zustand für Step_11 bringen und wieder RAM generieren"> 
REPLACE: NUMBER NNUMBER ; <ok></ok><fl>116E 36E4 </fl><fr>1170 36E4 </fr>
: ? @ . ; <ok></ok><fl>1170 36E4 </fl><fr>1177 36E6 </fr>
 <ok></ok>
( jetzt rechnen auch + - * / mit großen ganzen Zahlen,  <ok></ok>
( allerdings beim Compilieren von großen ganzen Zahlen im Moment noch 1234 ERROR <ok></ok>
 <ok></ok>
 <ok></ok>
111111111111111 DUP * . <ok>123456789ABCDEFEDCBA987654321 </ok>
 <ok></ok>
( an der Stelle Programm-VHDL-Quelltext für Step_11 ausgeben ) <ok></ok>
HEX INIT  <ok></ok>
HERE 0 0 DUMPZ           ( generiert progRAM für P20_FFP.vhd Step_11 <ok>
<DUMPZ>
  x"4010",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 0000-000F
  x"4760",x"A003",x"447D",x"A003",x"4000",x"A003",x"4000",x"A003",x"4000",x"A003",x"4000",x"A003",x"4000",x"A003",x"0010",x"A003", -- 0010-001F
  x"0000",x"3000",x"0001",x"4773",x"0029",x"45E4",x"B200",x"A003",x"FFF8",x"3002",x"0001",x"4773",x"0000",x"2F10",x"A009",x"A003", -- 0020-002F
  x"FFF8",x"3004",x"0001",x"4781",x"0001",x"2F10",x"A009",x"A003",x"FFF8",x"3006",x"0007",x"4773",x"0020",x"45E4",x"465E",x"469E", -- 0030-003F
  x"B300",x"46A7",x"A003",x"FFF5",x"300E",x"0004",x"4781",x"B412",x"1000",x"A002",x"B412",x"B300",x"A003",x"FFF6",x"3013",x"0003", -- 0040-004F
  x"4781",x"B501",x"A00F",x"9001",x"A000",x"A003",x"FFF7",x"3017",x"0004",x"4781",x"B501",x"4051",x"0004",x"0000",x"4047",x"A008", -- 0050-005F
  x"9002",x"0111",x"43C2",x"4300",x"A003",x"FFF1",x"301C",x"000B",x"477A",x"42CF",x"A00A",x"2F10",x"A00A",x"9001",x"405A",x"A003", -- 0060-006F
  x"FFF5",x"3028",x"0008",x"4781",x"46B1",x"4068",x"4300",x"476B",x"A003",x"FFF7",x"3031",x"0006",x"4069",x"2800",x"FFFB",x"3038", -- 0070-007F
  x"0002",x"4069",x"2801",x"FFFB",x"303B",x"0002",x"4069",x"2802",x"FFFB",x"303E",x"0002",x"4069",x"2803",x"FFFB",x"3041",x"0004", -- 0080-008F
  x"4069",x"2F00",x"FFFB",x"3046",x"0009",x"4069",x"2F01",x"FFFB",x"3050",x"0003",x"4069",x"2F02",x"FFFB",x"3054",x"0007",x"4069", -- 0090-009F
  x"2F03",x"FFFB",x"305C",x"0007",x"4069",x"2F04",x"FFFB",x"3064",x"0004",x"4069",x"2F05",x"FFFB",x"3069",x"0007",x"4069",x"2F06", -- 00A0-00AF
  x"FFFB",x"3071",x"0004",x"4069",x"2F07",x"FFFB",x"3076",x"0004",x"4069",x"2F08",x"FFFB",x"307B",x"0003",x"4069",x"2F09",x"FFFB", -- 00B0-00BF
  x"307F",x"0003",x"4069",x"2F0A",x"FFFB",x"3083",x"0003",x"4069",x"2F0B",x"FFFB",x"3087",x"0003",x"4069",x"2F0C",x"FFFB",x"308B", -- 00C0-00CF
  x"0003",x"4069",x"2F0D",x"FFFB",x"308F",x"0007",x"4069",x"2F0E",x"FFFB",x"3097",x"0002",x"4069",x"2F0F",x"FFFB",x"309A",x"0004", -- 00D0-00DF
  x"4069",x"2F10",x"FFFB",x"309F",x"0003",x"4069",x"2F11",x"FFFB",x"30A3",x"0004",x"4069",x"2F12",x"FFFB",x"30A8",x"0005",x"4069", -- 00E0-00EF
  x"2F13",x"FFFB",x"30AE",x"0006",x"4069",x"2F14",x"FFFB",x"30B5",x"0003",x"4069",x"2F15",x"FFFB",x"30B9",x"0005",x"4069",x"2F16", -- 00F0-00FF
  x"FFFB",x"30BF",x"000C",x"4069",x"2F17",x"FFFB",x"30CC",x"0007",x"4069",x"01C9",x"FFFB",x"30D4",x"0006",x"4781",x"000A",x"0003", -- 0100-010F
  x"4047",x"A003",x"FFF8",x"30DB",x"0008",x"477A",x"42CF",x"2F10",x"A00A",x"9003",x"A00A",x"4300",x"8001",x"430B",x"A003",x"FFF3", -- 0110-011F
  x"30E4",x"0005",x"4781",x"46B1",x"4115",x"4300",x"410E",x"4300",x"476B",x"A003",x"FFF5",x"30EA",x"0005",x"4116",x"A000",x"A003", -- 0120-012F
  x"FFFA",x"30F0",x"0002",x"4116",x"A001",x"A003",x"FFFA",x"30F3",x"0002",x"4116",x"A002",x"A003",x"FFFA",x"30F6",x"0002",x"4116", -- 0130-013F
  x"A00D",x"A003",x"FFFA",x"30F9",x"0003",x"4116",x"A00F",x"A003",x"FFFA",x"30FD",x"0008",x"4116",x"A005",x"A003",x"FFFA",x"3106", -- 0140-014F
  x"0003",x"4116",x"A00B",x"A003",x"FFFA",x"310A",x"0003",x"4116",x"A008",x"A003",x"FFFA",x"310E",x"0002",x"4116",x"A00E",x"A003", -- 0150-015F
  x"FFFA",x"3111",x"0002",x"4116",x"A007",x"A003",x"FFFA",x"3114",x"0001",x"4116",x"A009",x"A003",x"FFFA",x"3116",x"0001",x"4116", -- 0160-016F
  x"A00A",x"A003",x"FFFA",x"3118",x"0004",x"4116",x"B412",x"A003",x"FFFA",x"311D",x"0004",x"4116",x"B502",x"A003",x"FFFA",x"3122", -- 0170-017F
  x"0003",x"4116",x"B501",x"A003",x"FFFA",x"3126",x"0003",x"4116",x"B434",x"A003",x"FFFA",x"312A",x"0004",x"4116",x"B300",x"A003", -- 0180-018F
  x"FFFA",x"312F",x"0005",x"4116",x"B43C",x"A003",x"FFFA",x"3135",x"0005",x"4116",x"B60C",x"A003",x"FFFA",x"313B",x"0004",x"4116", -- 0190-019F
  x"B603",x"A003",x"FFFA",x"3140",x"0005",x"4116",x"B200",x"A003",x"FFFA",x"3146",x"0004",x"4116",x"8000",x"A003",x"FFFA",x"314B", -- 01A0-01AF
  x"0002",x"4781",x"2F13",x"A00A",x"A009",x"0001",x"2F13",x"42C4",x"A003",x"FFF5",x"314E",x"0002",x"4781",x"2F13",x"A00A",x"405A", -- 01B0-01BF
  x"B501",x"4300",x"B412",x"B501",x"A00A",x"41B2",x"4286",x"B412",x"428D",x"B501",x"A00D",x"9FF6",x"B200",x"0020",x"41B2",x"A003", -- 01C0-01CF
  x"FFE9",x"3151",x"0007",x"477A",x"45E4",x"2F10",x"A00A",x"9003",x"41BD",x"42CF",x"46A7",x"A003",x"FFF4",x"3159",x"0005",x"4781", -- 01D0-01DF
  x"46B1",x"0001",x"2F10",x"A009",x"4300",x"41D3",x"FFFF",x"2F15",x"42C4",x"A003",x"FFF2",x"315F",x"0001",x"0022",x"41D4",x"A003", -- 01E0-01EF
  x"FFFA",x"3161",x"0002",x"0022",x"41D4",x"433C",x"A003",x"FFF9",x"3164",x"0004",x"4781",x"2F0F",x"A00A",x"A003",x"FFF9",x"3169", -- 01F0-01FF
  x"0005",x"4781",x"0008",x"A003",x"FFFA",x"316F",x"0006",x"4781",x"0009",x"A003",x"FFFA",x"3176",x"0006",x"4781",x"0000",x"1000", -- 0200-020F
  x"B434",x"A002",x"B412",x"B300",x"B412",x"0FFF",x"A008",x"A00E",x"A003",x"FFF1",x"317D",x"0005",x"4781",x"2F0F",x"42C4",x"A003", -- 0210-021F
  x"FFF9",x"3183",x"0007",x"4781",x"41FB",x"4286",x"4294",x"4202",x"420E",x"4300",x"A003",x"FFF5",x"318B",x"0008",x"4781",x"41FB", -- 0220-022F
  x"4286",x"4294",x"4208",x"420E",x"4300",x"A003",x"FFF5",x"3194",x"0005",x"4773",x"41FB",x"A003",x"FFFA",x"319A",x"0005",x"4773", -- 0230-023F
  x"4224",x"A003",x"FFFA",x"31A0",x"0005",x"4773",x"422F",x"A003",x"FFFA",x"31A6",x"0002",x"4773",x"4208",x"0001",x"421D",x"41FB", -- 0240-024F
  x"A003",x"FFF7",x"31A9",x"0006",x"4773",x"41FB",x"B502",x"4294",x"B434",x"420E",x"B412",x"428D",x"A009",x"A003",x"FFF3",x"31B0", -- 0250-025F
  x"0004",x"4773",x"0001",x"421D",x"4254",x"4202",x"41FB",x"A003",x"FFF6",x"31B5",x"0005",x"4773",x"424B",x"A003",x"FFFA",x"31BB", -- 0260-026F
  x"0006",x"4773",x"B434",x"423F",x"4254",x"A003",x"FFF8",x"31C2",x"0002",x"4781",x"A00A",x"A003",x"FFFA",x"31C5",x"0002",x"4781", -- 0270-027F
  x"A009",x"A003",x"FFFA",x"31C8",x"0002",x"4781",x"0001",x"A007",x"A003",x"FFF9",x"31CB",x"0002",x"4781",x"FFFF",x"A007",x"A003", -- 0280-028F
  x"FFF9",x"31CE",x"0002",x"4781",x"A000",x"A007",x"A003",x"FFF9",x"31D1",x"0001",x"4781",x"4294",x"A00D",x"A003",x"FFF9",x"31D3", -- 0290-029F
  x"0002",x"4781",x"4294",x"A00F",x"A003",x"FFF9",x"31D6",x"0001",x"4781",x"B412",x"42A2",x"A003",x"FFF9",x"31D8",x"0002",x"4781", -- 02A0-02AF
  x"0000",x"B434",x"B434",x"A002",x"B412",x"B300",x"A003",x"FFF5",x"31DB",x"0003",x"4781",x"31DF",x"0004",x"41F5",x"8FFC",x"A003", -- 02B0-02BF
  x"FFF7",x"31E4",x"0002",x"4781",x"B412",x"B502",x"A00A",x"A007",x"B412",x"A009",x"A003",x"FFF5",x"31E7",x"0002",x"4781",x"2802", -- 02C0-02CF
  x"A00A",x"4286",x"A00A",x"2802",x"A00A",x"4286",x"2802",x"B603",x"A00A",x"A00A",x"B412",x"A009",x"A009",x"A003",x"FFED",x"31EA", -- 02D0-02DF
  x"0002",x"4781",x"2802",x"A00A",x"B501",x"428D",x"2802",x"B603",x"A00A",x"A00A",x"B412",x"B501",x"428D",x"2802",x"A009",x"A009", -- 02E0-02EF
  x"A009",x"A009",x"A003",x"FFEB",x"31ED",x"0001",x"4781",x"2802",x"A00A",x"4286",x"A00A",x"A003",x"FFF7",x"31EF",x"0001",x"4781", -- 02F0-02FF
  x"2F0F",x"A00A",x"A009",x"0001",x"2F0F",x"42C4",x"A003",x"FFF5",x"31F1",x"0007",x"4781",x"2803",x"A009",x"A003",x"FFF9",x"31F9", -- 0300-030F
  x"0003",x"4781",x"8000",x"44AC",x"A00B",x"9002",x"B300",x"8FFA",x"A003",x"FFF5",x"31FD",x"0004",x"4781",x"014C",x"430B",x"A003", -- 0310-031F
  x"FFF9",x"3202",x"0005",x"4781",x"0000",x"B412",x"0010",x"A002",x"B412",x"A003",x"FFF6",x"3208",x"0003",x"4781",x"B501",x"000A", -- 0320-032F
  x"42A2",x"9001",x"8002",x"0007",x"A007",x"0030",x"A007",x"A003",x"FFF2",x"320C",x"0004",x"4781",x"B501",x"9008",x"B412",x"B501", -- 0330-033F
  x"427A",x"431D",x"4286",x"B412",x"428D",x"8FF6",x"B200",x"A003",x"FFF0",x"3211",x"0003",x"4781",x"4324",x"432E",x"431D",x"4324", -- 0340-034F
  x"432E",x"431D",x"4324",x"432E",x"431D",x"4324",x"432E",x"431D",x"B300",x"A003",x"FFEE",x"3215",x"0002",x"4781",x"434C",x"0020", -- 0350-035F
  x"431D",x"A003",x"FFF8",x"3218",x"0002",x"4781",x"A00A",x"435E",x"A003",x"FFF9",x"321B",x"0002",x"4781",x"2F07",x"A00A",x"2F0F", -- 0360-036F
  x"A00A",x"4294",x"2F10",x"A00A",x"A00D",x"A00B",x"A00E",x"2F00",x"A00A",x"A00D",x"A00B",x"A008",x"9028",x"003C",x"431D",x"321E", -- 0370-037F
  x"0003",x"41F5",x"2F07",x"A00A",x"435E",x"2F06",x"A00A",x"435E",x"003C",x"431D",x"3222",x"0004",x"41F5",x"003C",x"431D",x"3227", -- 0380-038F
  x"0003",x"41F5",x"2F0F",x"A00A",x"435E",x"2F13",x"A00A",x"435E",x"003C",x"431D",x"322B",x"0004",x"41F5",x"2F0F",x"A00A",x"2F07", -- 0390-039F
  x"A009",x"2F13",x"A00A",x"2F06",x"A009",x"000A",x"431D",x"A003",x"FFC1",x"3230",x"000A",x"4781",x"A003",x"FFFB",x"323B",x"0007", -- 03A0-03AF
  x"4781",x"436D",x"3243",x"0019",x"41F5",x"0020",x"431D",x"0008",x"431D",x"4312",x"001B",x"429B",x"9FF8",x"A003",x"FFEF",x"325D", -- 03B0-03BF
  x"0005",x"4781",x"B501",x"2F0E",x"A009",x"0000",x"2F10",x"A009",x"436D",x"2F0A",x"A00A",x"2F0C",x"A00A",x"2F0A",x"A00A",x"4294", -- 03C0-03CF
  x"428D",x"433C",x"3263",x"0003",x"41F5",x"3267",x"000A",x"41EF",x"46C6",x"436D",x"3272",x"0016",x"41F5",x"435E",x"43B1",x"4713", -- 03D0-03DF
  x"A003",x"FFDD",x"3289",x"0004",x"4781",x"2801",x"A00A",x"2F15",x"A009",x"A003",x"FFF7",x"328E",x"0004",x"4781",x"2801",x"A00A", -- 03E0-03EF
  x"2F15",x"A00A",x"4294",x"9002",x"0009",x"43C2",x"A003",x"FFF3",x"3293",x"0005",x"4781",x"4286",x"2F17",x"A00A",x"B502",x"4294", -- 03F0-03FF
  x"B501",x"2F17",x"A009",x"A009",x"A003",x"FFF2",x"3299",x"0009",x"4781",x"2F17",x"A00A",x"B501",x"A00A",x"A007",x"2F17",x"A009", -- 0400-040F
  x"A003",x"FFF4",x"32A3",x"0002",x"4781",x"2F17",x"A00A",x"4286",x"A003",x"FFF8",x"32A6",x"0002",x"4781",x"2F17",x"A00A",x"0002", -- 0410-041F
  x"A007",x"A003",x"FFF7",x"32A9",x"0002",x"4781",x"2F17",x"A00A",x"0003",x"A007",x"A003",x"FFF7",x"32AC",x"0002",x"4781",x"2F17", -- 0420-042F
  x"A00A",x"0004",x"A007",x"A003",x"FFF7",x"32AF",x"0002",x"4781",x"2F17",x"A00A",x"0005",x"A007",x"A003",x"FFF7",x"32B2",x"0002", -- 0430-043F
  x"4781",x"2F17",x"A00A",x"0006",x"A007",x"A003",x"FFF7",x"32B5",x"0002",x"4781",x"2F17",x"A00A",x"0007",x"A007",x"A003",x"FFF7", -- 0440-044F
  x"32B8",x"0002",x"4781",x"2F17",x"A00A",x"0008",x"A007",x"A003",x"FFF7",x"32BB",x"0001",x"4773",x"0020",x"45E4",x"465E",x"469E", -- 0450-045F
  x"B300",x"4286",x"2F10",x"A00A",x"9001",x"405A",x"A003",x"FFF1",x"32BD",x"0005",x"4781",x"B501",x"A00A",x"4286",x"B501",x"03FF", -- 0460-046F
  x"A008",x"0000",x"429B",x"9002",x"FC00",x"A007",x"B412",x"A009",x"A003",x"FFEE",x"32C3",x"0007",x"4781",x"2800",x"A00A",x"B501", -- 0470-047F
  x"0008",x"42A2",x"9009",x"0018",x"A007",x"A00A",x"B501",x"9002",x"B501",x"430B",x"B300",x"8018",x"2F03",x"A00A",x"A009",x"2F03", -- 0480-048F
  x"446B",x"2F03",x"A00A",x"2F04",x"A00A",x"4294",x"03FF",x"A008",x"0080",x"42A9",x"9009",x"2F05",x"A00A",x"A00D",x"9005",x"FFFF", -- 0490-049F
  x"2F05",x"A009",x"0013",x"431D",x"0000",x"2800",x"A009",x"A003",x"FFD1",x"32CB",x"0008",x"4781",x"2F04",x"A00A",x"2F03",x"A00A", -- 04A0-04AF
  x"429B",x"9003",x"0000",x"0000",x"8018",x"2F04",x"A00A",x"A00A",x"FFFF",x"2F04",x"446B",x"2F03",x"A00A",x"2F04",x"A00A",x"4294", -- 04B0-04BF
  x"03FF",x"A008",x"0020",x"42A2",x"9008",x"2F05",x"A00A",x"9005",x"0000",x"2F05",x"A009",x"0011",x"431D",x"A003",x"FFDA",x"32D4", -- 04C0-04CF
  x"0006",x"4781",x"0005",x"43FB",x"4426",x"A009",x"441D",x"A009",x"441D",x"A00A",x"4438",x"A009",x"4312",x"B501",x"0014",x"429B", -- 04D0-04DF
  x"9004",x"B300",x"441D",x"A00A",x"427A",x"B501",x"007F",x"429B",x"9002",x"B300",x"0008",x"B501",x"0008",x"429B",x"9012",x"4438", -- 04E0-04EF
  x"A00A",x"441D",x"A00A",x"42A2",x"900C",x"FFFF",x"441D",x"42C4",x"0001",x"4426",x"42C4",x"0008",x"431D",x"0020",x"431D",x"0008", -- 04F0-04FF
  x"431D",x"B501",x"0020",x"42A2",x"9001",x"8012",x"FFFF",x"4426",x"42C4",x"4426",x"A00A",x"A00F",x"9002",x"0006",x"43C2",x"B501", -- 0500-050F
  x"431D",x"B501",x"441D",x"A00A",x"4280",x"0001",x"441D",x"42C4",x"B501",x"0020",x"42A2",x"B502",x"0008",x"429B",x"A00B",x"A008", -- 0510-051F
  x"B412",x"001B",x"429B",x"A00B",x"A008",x"4426",x"A00A",x"A00D",x"A00E",x"9FB2",x"0020",x"431D",x"4438",x"A00A",x"441D",x"A00A", -- 0520-052F
  x"4438",x"A00A",x"4294",x"B603",x"A007",x"0000",x"B412",x"4280",x"4409",x"A003",x"FF94",x"32DB",x"0005",x"4781",x"B501",x"0030", -- 0530-053F
  x"42A2",x"A00B",x"B502",x"003A",x"42A2",x"A008",x"B502",x"0041",x"42A2",x"A00B",x"A00E",x"B501",x"9015",x"B412",x"0030",x"4294", -- 0540-054F
  x"B501",x"000A",x"42A2",x"A00B",x"9002",x"0007",x"4294",x"B501",x"2F08",x"A00A",x"42A2",x"A00B",x"9004",x"B300",x"B300",x"0000", -- 0550-055F
  x"0000",x"B412",x"A003",x"FFD7",x"32E1",x"0006",x"4781",x"516E",x"A003",x"441D",x"A009",x"4415",x"A009",x"0000",x"441D",x"A00A", -- 0560-056F
  x"9063",x"B501",x"4426",x"A009",x"0001",x"4441",x"A009",x"FFFF",x"444A",x"A009",x"4415",x"A00A",x"4426",x"A00A",x"A007",x"427A", -- 0570-057F
  x"002B",x"429B",x"9009",x"4426",x"A00A",x"4286",x"4426",x"A009",x"0000",x"444A",x"A009",x"8016",x"4415",x"A00A",x"4426",x"A00A", -- 0580-058F
  x"A007",x"427A",x"002D",x"429B",x"900D",x"4426",x"A00A",x"4286",x"4426",x"A009",x"0000",x"444A",x"A009",x"4441",x"A00A",x"A000", -- 0590-059F
  x"4441",x"A009",x"444A",x"A00A",x"9FD2",x"4426",x"A00A",x"441D",x"A00A",x"42A2",x"9029",x"4415",x"A00A",x"4426",x"A00A",x"A007", -- 05A0-05AF
  x"427A",x"B501",x"9015",x"453E",x"A00B",x"9007",x"B300",x"441D",x"A00A",x"A000",x"441D",x"A009",x"800A",x"B412",x"2F08",x"A00A", -- 05B0-05BF
  x"42B0",x"A007",x"4426",x"A00A",x"4286",x"4426",x"A009",x"8005",x"B300",x"4426",x"A00A",x"441D",x"A009",x"4426",x"A00A",x"441D", -- 05C0-05CF
  x"A00A",x"42A2",x"A00B",x"9FD7",x"4441",x"A00A",x"A00F",x"9001",x"A000",x"4426",x"A00A",x"441D",x"A00A",x"4294",x"4409",x"A003", -- 05D0-05DF
  x"FF83",x"32E8",x"0004",x"4781",x"42E2",x"2F0C",x"A00A",x"2F0B",x"A009",x"2F0C",x"A00A",x"427A",x"42F7",x"429B",x"2F0C",x"A00A", -- 05E0-05EF
  x"2F0D",x"A00A",x"42A2",x"A008",x"9004",x"0001",x"2F0C",x"42C4",x"8FF0",x"2F0C",x"A00A",x"2F0B",x"A009",x"2F0C",x"A00A",x"427A", -- 05F0-05FF
  x"003C",x"429B",x"9004",x"2F0C",x"A00A",x"2F0D",x"A009",x"2F0C",x"A00A",x"427A",x"42F7",x"429B",x"A00B",x"2F0C",x"A00A",x"2F0D", -- 0600-060F
  x"A00A",x"42A2",x"A008",x"9004",x"0001",x"2F0C",x"42C4",x"8FE5",x"2F0B",x"A00A",x"2F0C",x"A00A",x"B502",x"4294",x"B501",x"9003", -- 0610-061F
  x"0001",x"2F0C",x"42C4",x"42CF",x"B300",x"A003",x"FFBA",x"32ED",x"0002",x"4781",x"42E2",x"B502",x"42F7",x"4294",x"9007",x"42CF", -- 0620-062F
  x"B300",x"B300",x"B300",x"B300",x"0000",x"8023",x"42CF",x"B300",x"B412",x"0000",x"B603",x"4294",x"9016",x"42E2",x"42E2",x"B502", -- 0630-063F
  x"427A",x"B502",x"427A",x"4294",x"9004",x"B300",x"B300",x"0000",x"0000",x"B501",x"9004",x"4286",x"B412",x"4286",x"B412",x"42CF", -- 0640-064F
  x"42CF",x"4286",x"8FE7",x"B200",x"B300",x"9002",x"FFFF",x"8001",x"0000",x"A003",x"FFCC",x"32F0",x"0004",x"4781",x"42E2",x"42E2", -- 0650-065F
  x"0000",x"2F11",x"A00A",x"2F01",x"A00A",x"9003",x"B501",x"A00A",x"A007",x"B501",x"4286",x"B501",x"A00A",x"B412",x"4286",x"A00A", -- 0660-066F
  x"42CF",x"42CF",x"B603",x"42E2",x"42E2",x"462A",x"9003",x"B412",x"A00D",x"B412",x"B502",x"A00D",x"B502",x"A00A",x"A00D",x"A00B", -- 0670-067F
  x"A008",x"B502",x"B501",x"A00A",x"A007",x"2F11",x"A00A",x"429B",x"A00B",x"A008",x"9004",x"B501",x"A00A",x"A007",x"8FDA",x"42CF", -- 0680-068F
  x"B300",x"42CF",x"B434",x"A00D",x"9004",x"B300",x"B300",x"0000",x"0000",x"A003",x"FFC0",x"32F5",x"0004",x"4781",x"B412",x"0003", -- 0690-069F
  x"A007",x"B412",x"A003",x"FFF7",x"32FA",x"0008",x"4781",x"0004",x"0000",x"4047",x"A00E",x"4300",x"A003",x"FFF6",x"3303",x"0006", -- 06A0-06AF
  x"4781",x"43E5",x"2F0F",x"A00A",x"2F11",x"A00A",x"B502",x"4294",x"4300",x"2F11",x"A009",x"0020",x"45E4",x"41BD",x"0001",x"2F01", -- 06B0-06BF
  x"A009",x"A003",x"FFEB",x"330A",x"0009",x"4781",x"2F0A",x"A00A",x"42E2",x"2F0B",x"A00A",x"42E2",x"2F0C",x"A00A",x"42E2",x"2F0D", -- 06C0-06CF
  x"A00A",x"42E2",x"B502",x"A007",x"2F0D",x"A009",x"B501",x"2F0A",x"A009",x"B501",x"2F0B",x"A009",x"2F0C",x"A009",x"0020",x"45E4", -- 06D0-06DF
  x"B501",x"901F",x"B603",x"465E",x"B501",x"9009",x"42E2",x"42E2",x"B200",x"42CF",x"42CF",x"469E",x"B300",x"430B",x"8011",x"B200", -- 06E0-06EF
  x"B603",x"4567",x"9005",x"B200",x"B300",x"0003",x"43C2",x"8008",x"B434",x"B300",x"B412",x"B300",x"2F10",x"A00A",x"9001",x"405A", -- 06F0-06FF
  x"8FDD",x"B200",x"42CF",x"2F0D",x"A009",x"42CF",x"2F0C",x"A009",x"42CF",x"2F0B",x"A009",x"42CF",x"2F0A",x"A009",x"A003",x"FFB3", -- 0700-070F
  x"3314",x"0004",x"4781",x"2F02",x"A00A",x"2802",x"A009",x"2F00",x"A00A",x"9006",x"003C",x"431D",x"3319",x"0004",x"41F5",x"8003", -- 0710-071F
  x"331E",x"0002",x"41F5",x"436D",x"2F09",x"A00A",x"0100",x"44D2",x"B502",x"A00A",x"003C",x"429B",x"9002",x"B200",x"802B",x"2F00", -- 0720-072F
  x"A00A",x"900C",x"003C",x"431D",x"3321",x"0003",x"41F5",x"46C6",x"003C",x"431D",x"3325",x"0004",x"41F5",x"801C",x"001B",x"431D", -- 0730-073F
  x"005B",x"431D",x"0033",x"431D",x"0036",x"431D",x"006D",x"431D",x"46C6",x"2F10",x"A00A",x"A00D",x"9003",x"332A",x"0002",x"41F5", -- 0740-074F
  x"001B",x"431D",x"005B",x"431D",x"0033",x"431D",x"0039",x"431D",x"006D",x"431D",x"8FC8",x"A003",x"FFB3",x"332D",x"0005",x"4781", -- 0750-075F
  x"3333",x"000B",x"41F5",x"436D",x"436D",x"4713",x"A003",x"FFF5",x"333F",x"0006",x"4781",x"0000",x"2F01",x"A009",x"A003",x"FFF8", -- 0760-076F
  x"3346",x"000C",x"4781",x"42CF",x"42E2",x"A003",x"FFF9",x"3353",x"000A",x"4781",x"42CF",x"46A7",x"A003",x"FFF9",x"335E",x"0003", -- 0770-077F
  x"4781",x"42CF",x"2F10",x"A00A",x"9002",x"46A7",x"8001",x"42E2",x"A003",x"FFF4",x"3362",x"000A",x"4781",x"46B1",x"0001",x"2F10", -- 0780-078F
  x"A009",x"4772",x"A003",x"FFF6",x"336D",x"0008",x"4781",x"46B1",x"0001",x"2F10",x"A009",x"4779",x"A003",x"FFF6",x"3376",x"0001", -- 0790-079F
  x"4781",x"46B1",x"0001",x"2F10",x"A009",x"4780",x"A003",x"FFF6",x"3378",x"0001",x"4773",x"0000",x"2F10",x"A009",x"43EE",x"410E", -- 07A0-07AF
  x"4300",x"476B",x"A003",x"FFF4",x"337A",x"0003",x"4781",x"2F16",x"A00A",x"9005",x"4324",x"B300",x"4324",x"B300",x"8006",x"4324", -- 07B0-07BF
  x"432E",x"431D",x"4324",x"432E",x"431D",x"4324",x"432E",x"431D",x"4324",x"432E",x"431D",x"B300",x"A003",x"FFE6",x"337E",x"0003", -- 07C0-07CF
  x"4781",x"3382",x"0001",x"41F5",x"0022",x"431D",x"47B7",x"0022",x"431D",x"3384",x"0001",x"41F5",x"A003",x"FFF0",x"3386",x"0005", -- 07D0-07DF
  x"4781",x"2F16",x"A009",x"2F00",x"A00A",x"42E2",x"0000",x"2F00",x"A009",x"338C",x"0008",x"41EF",x"46C6",x"0004",x"0000",x"4047", -- 07E0-07EF
  x"A00E",x"0010",x"A009",x"436D",x"003C",x"431D",x"3395",x"0006",x"41F5",x"436D",x"339C",x"0002",x"41F5",x"0000",x"B603",x"A007", -- 07F0-07FF
  x"B501",x"2F03",x"429B",x"9002",x"B300",x"2F04",x"B501",x"2F17",x"429B",x"9005",x"B300",x"2F00",x"2F80",x"A009",x"2F80",x"A00A", -- 0800-080F
  x"47D1",x"4286",x"B501",x"0010",x"429B",x"9FE8",x"B300",x"339F",x"0004",x"41F5",x"B501",x"434C",x"33A4",x"0001",x"41F5",x"B501", -- 0810-081F
  x"000F",x"A007",x"434C",x"0010",x"A007",x"B603",x"42A9",x"A00B",x"9FD0",x"B200",x"436D",x"003C",x"431D",x"33A6",x"0007",x"41F5", -- 0820-082F
  x"42CF",x"2F00",x"A009",x"A003",x"FFA9",x"33AE",x"0005",x"4069",x"2F20",x"FFFB",x"33B4",x"0008",x"4781",x"2F20",x"A00A",x"B501", -- 0830-083F
  x"4074",x"B501",x"4286",x"2F20",x"A009",x"A009",x"A003",x"FFF2",x"33BD",x"0004",x"4781",x"B501",x"900C",x"42E2",x"B502",x"A00A", -- 0840-084F
  x"B502",x"A009",x"B412",x"4286",x"B412",x"4286",x"42CF",x"428D",x"8FF2",x"B300",x"B200",x"A003",x"FFEB",x"33C2",x"0004",x"4781", -- 0850-085F
  x"B434",x"B434",x"B501",x"9007",x"42E2",x"B603",x"A009",x"4286",x"42CF",x"428D",x"8FF7",x"B300",x"B200",x"A003",x"FFEE",x"33C7", -- 0860-086F
  x"0004",x"4781",x"B412",x"B501",x"A00A",x"435E",x"4286",x"B412",x"428D",x"B501",x"A00D",x"9FF6",x"B300",x"A003",x"FFF0",x"33CC", -- 0870-087F
  x"0003",x"4781",x"B603",x"42A2",x"9001",x"B412",x"B300",x"A003",x"FFF6",x"33D0",x"0003",x"4781",x"B603",x"42A9",x"9001",x"B412", -- 0880-088F
  x"B300",x"A003",x"FFF6",x"33D4",x"0006",x"4116",x"A017",x"A003",x"FFFA",x"33DB",x"0007",x"4116",x"A018",x"A003",x"FFFA",x"33E3", -- 0890-089F
  x"0009",x"4781",x"42E2",x"A017",x"A018",x"9FFD",x"42CF",x"B300",x"A003",x"FFF5",x"33ED",x"0001",x"4069",x"1401",x"FFFB",x"33EF", -- 08A0-08AF
  x"0001",x"4069",x"1601",x"FFFB",x"33F1",x"0001",x"4069",x"1801",x"FFFB",x"33F3",x"0004",x"4781",x"0007",x"43FB",x"444A",x"A009", -- 08B0-08BF
  x"4441",x"A009",x"4438",x"A009",x"442F",x"A009",x"4426",x"A009",x"441D",x"A009",x"4415",x"A009",x"4415",x"A00A",x"442F",x"A00A", -- 08C0-08CF
  x"9001",x"A00B",x"441D",x"A00A",x"4438",x"A00A",x"A007",x"4286",x"444A",x"A00A",x"B502",x"0000",x"4860",x"444A",x"A00A",x"B501", -- 08D0-08DF
  x"4426",x"A00A",x"441D",x"A00A",x"0000",x"B60C",x"A00A",x"B434",x"B434",x"4441",x"A00A",x"4438",x"A00A",x"48A2",x"B300",x"A009", -- 08E0-08EF
  x"B300",x"B434",x"4286",x"B434",x"4286",x"B434",x"428D",x"B501",x"A00D",x"9FEA",x"B300",x"B200",x"4409",x"A003",x"FFBA",x"33F8", -- 08F0-08FF
  x"0006",x"4781",x"0007",x"43FB",x"444A",x"A009",x"4441",x"A009",x"4438",x"A009",x"442F",x"A009",x"4426",x"A009",x"441D",x"A009", -- 0900-090F
  x"4415",x"A009",x"4415",x"A00A",x"441D",x"A00A",x"4438",x"A00A",x"4882",x"4286",x"444A",x"A00A",x"4415",x"A00A",x"442F",x"A00A", -- 0910-091F
  x"429B",x"903B",x"0000",x"441D",x"A00A",x"4438",x"A00A",x"4882",x"0000",x"B434",x"B502",x"B501",x"441D",x"A00A",x"42A2",x"9009", -- 0920-092F
  x"4426",x"A00A",x"B501",x"A00A",x"B412",x"4286",x"4426",x"A009",x"8001",x"0000",x"B412",x"4438",x"A00A",x"42A2",x"9009",x"4441", -- 0930-093F
  x"A00A",x"B501",x"A00A",x"B412",x"4286",x"4441",x"A009",x"8001",x"0000",x"A001",x"444A",x"A00A",x"B501",x"4286",x"444A",x"A009", -- 0940-094F
  x"A009",x"B434",x"B434",x"4286",x"B603",x"4294",x"A00D",x"9FD1",x"B200",x"444A",x"A00A",x"A009",x"8063",x"B412",x"0001",x"4294", -- 0950-095F
  x"B412",x"0001",x"441D",x"A00A",x"4438",x"A00A",x"4882",x"0000",x"B434",x"B502",x"B501",x"441D",x"A00A",x"42A2",x"9009",x"4426", -- 0960-096F
  x"A00A",x"B501",x"A00A",x"B412",x"4286",x"4426",x"A009",x"8001",x"0000",x"B412",x"4438",x"A00A",x"42A2",x"900A",x"4441",x"A00A", -- 0970-097F
  x"B501",x"A00A",x"B412",x"4286",x"4441",x"A009",x"A00B",x"8001",x"FFFF",x"A001",x"444A",x"A00A",x"B501",x"4286",x"444A",x"A009", -- 0980-098F
  x"A009",x"B434",x"B434",x"4286",x"B603",x"4294",x"A00D",x"9FD0",x"B200",x"A00D",x"9025",x"B501",x"444A",x"A009",x"B434",x"A00B", -- 0990-099F
  x"B434",x"B434",x"0001",x"441D",x"A00A",x"4438",x"A00A",x"4882",x"0000",x"B434",x"0000",x"444A",x"A00A",x"A00A",x"A00B",x"A001", -- 09A0-09AF
  x"444A",x"A00A",x"B501",x"4286",x"444A",x"A009",x"A009",x"B434",x"B434",x"4286",x"B603",x"4294",x"A00D",x"9FEB",x"B200",x"B300", -- 09B0-09BF
  x"4409",x"A003",x"FF3C",x"33FF",x"0004",x"4116",x"A014",x"A003",x"FFFA",x"3404",x"0005",x"4781",x"0010",x"42E2",x"A014",x"42CF", -- 09C0-09CF
  x"428D",x"B501",x"A00D",x"9FF9",x"B200",x"A003",x"FFF2",x"340A",x"0005",x"4781",x"0000",x"B434",x"B434",x"49CC",x"A003",x"FFF7", -- 09D0-09DF
  x"3410",x"0004",x"4781",x"0007",x"43FB",x"444A",x"A009",x"4441",x"A009",x"4438",x"A009",x"442F",x"A009",x"4426",x"A009",x"441D", -- 09E0-09EF
  x"A009",x"4415",x"A009",x"441D",x"A00A",x"4438",x"A00A",x"42A2",x"900A",x"4415",x"A00A",x"441D",x"A00A",x"4426",x"A00A",x"0000", -- 09F0-09FF
  x"0000",x"0000",x"80D9",x"441D",x"A00A",x"0000",x"4426",x"A00A",x"B502",x"A007",x"A00A",x"A00B",x"B502",x"444A",x"A00A",x"A007", -- 0A00-0A0F
  x"A009",x"4286",x"B603",x"4294",x"A00D",x"9FF0",x"B200",x"444A",x"A00A",x"441D",x"A00A",x"A007",x"4438",x"A00A",x"4294",x"4426", -- 0A10-0A1F
  x"A009",x"FFFF",x"444A",x"A00A",x"441D",x"A00A",x"A007",x"A009",x"0001",x"441D",x"42C4",x"441D",x"A00A",x"4438",x"A00A",x"4294", -- 0A20-0A2F
  x"0000",x"4426",x"A00A",x"4438",x"A00A",x"A007",x"A00A",x"A00B",x"4426",x"A00A",x"4438",x"A00A",x"A007",x"428D",x"A00A",x"A00B", -- 0A30-0A3F
  x"4441",x"A00A",x"4438",x"A00A",x"A007",x"428D",x"A00A",x"49CC",x"B412",x"B300",x"B501",x"4426",x"A00A",x"4438",x"A00A",x"A007", -- 0A40-0A4F
  x"4286",x"A009",x"0000",x"4426",x"A00A",x"4441",x"A00A",x"4438",x"A00A",x"48A2",x"B200",x"B412",x"B300",x"0000",x"4426",x"A00A", -- 0A50-0A5F
  x"4438",x"A00A",x"A007",x"A00A",x"A001",x"4426",x"A00A",x"4438",x"A00A",x"A007",x"A009",x"902B",x"0001",x"4438",x"A00A",x"0000", -- 0A60-0A6F
  x"B434",x"B502",x"4426",x"A00A",x"B502",x"A007",x"A00A",x"B412",x"4441",x"A00A",x"A007",x"A00A",x"A00B",x"A001",x"B412",x"42E2", -- 0A70-0A7F
  x"B502",x"4426",x"A00A",x"A007",x"A009",x"42CF",x"B434",x"B434",x"4286",x"B603",x"4294",x"A00D",x"9FE3",x"B200",x"FFFF",x"4426", -- 0A80-0A8F
  x"A00A",x"4438",x"A00A",x"A007",x"4286",x"42C4",x"8FD4",x"FFFF",x"4426",x"42C4",x"4286",x"B603",x"4294",x"A00D",x"9F92",x"B200", -- 0A90-0A9F
  x"4438",x"A00A",x"0000",x"444A",x"A00A",x"B502",x"A007",x"A00A",x"A00B",x"B502",x"444A",x"A00A",x"A007",x"A009",x"4286",x"B603", -- 0AA0-0AAF
  x"4294",x"A00D",x"9FF0",x"B200",x"4438",x"A00A",x"444A",x"A00A",x"428D",x"A009",x"441D",x"A00A",x"4438",x"A00A",x"4294",x"444A", -- 0AB0-0ABF
  x"A00A",x"4438",x"A00A",x"A007",x"A009",x"4415",x"A00A",x"4438",x"A00A",x"444A",x"A00A",x"4415",x"A00A",x"442F",x"A00A",x"9001", -- 0AC0-0ACF
  x"A00B",x"441D",x"A00A",x"4438",x"A00A",x"4294",x"444A",x"A00A",x"4438",x"A00A",x"A007",x"4286",x"4409",x"A003",x"FF01",x"3415", -- 0AD0-0ADF
  x"0008",x"4069",x"2F21",x"FFFB",x"341E",x"0008",x"4069",x"2F22",x"FFFB",x"3427",x"0008",x"4069",x"2F23",x"FFFB",x"3430",x"000E", -- 0AE0-0AEF
  x"4069",x"2F24",x"FFFB",x"343F",x"000C",x"4069",x"2F25",x"FFFB",x"344C",x"0006",x"4069",x"2F26",x"FFFB",x"3453",x"000D",x"4781", -- 0AF0-0AFF
  x"B502",x"A00D",x"9004",x"B200",x"B300",x"0000",x"8030",x"B603",x"A007",x"428D",x"B501",x"A00A",x"A00D",x"A00B",x"9FFA",x"4286", -- 0B00-0B0F
  x"B502",x"4882",x"B603",x"429B",x"9004",x"B200",x"B200",x"0000",x"801E",x"B502",x"4294",x"B502",x"A00A",x"000C",x"0000",x"4047", -- 0B10-0B1F
  x"A008",x"A00D",x"B502",x"0001",x"429B",x"A008",x"9003",x"B300",x"A00A",x"8008",x"B502",x"428D",x"A009",x"428D",x"0004",x"0000", -- 0B20-0B2F
  x"4047",x"A00E",x"B412",x"B300",x"B412",x"9001",x"A000",x"A003",x"FFC4",x"3461",x"000C",x"4781",x"B501",x"A00A",x"B501",x"A00F", -- 0B30-0B3F
  x"9003",x"A000",x"FFFF",x"8001",x"0000",x"B434",x"B434",x"B501",x"0004",x"0000",x"4047",x"A008",x"9009",x"B412",x"B300",x"3FFF", -- 0B40-0B4F
  x"A008",x"B501",x"A00A",x"B412",x"4286",x"8004",x"B502",x"A009",x"0001",x"B412",x"A003",x"FFDD",x"346E",x"000B",x"4781",x"2F23", -- 0B50-0B5F
  x"A00A",x"B603",x"A009",x"4286",x"B603",x"A007",x"2F23",x"A009",x"B603",x"B412",x"0000",x"4860",x"B412",x"B300",x"2F23",x"A00A", -- 0B60-0B6F
  x"2F25",x"A00A",x"42A2",x"A00B",x"9002",x"0369",x"43C2",x"A003",x"FFE3",x"347A",x"0010",x"4781",x"2F22",x"A009",x"2F21",x"A009", -- 0B70-0B7F
  x"2F21",x"4B3C",x"B502",x"42E2",x"2F22",x"4B3C",x"B502",x"42CF",x"A007",x"4286",x"4B5F",x"A003",x"FFEC",x"348B",x"0001",x"4781", -- 0B80-0B8F
  x"4B7C",x"4902",x"4B00",x"A003",x"FFF8",x"348D",x"0001",x"4781",x"A000",x"4B90",x"A003",x"FFF9",x"348F",x"0001",x"4781",x"4B7C", -- 0B90-0B9F
  x"48BC",x"4B00",x"A003",x"FFF8",x"3491",x"0007",x"4773",x"2F11",x"A00A",x"0004",x"A007",x"46A7",x"A003",x"FFF6",x"3499",x"0004", -- 0BA0-0BAF
  x"4781",x"B501",x"A00D",x"9002",x"0000",x"43C2",x"B501",x"2F21",x"A009",x"2F21",x"4B3C",x"B434",x"B300",x"B502",x"A007",x"428D", -- 0BB0-0BBF
  x"A00A",x"B412",x"0001",x"42A9",x"9018",x"0001",x"B502",x"A00F",x"A00B",x"9007",x"B412",x"B501",x"A007",x"B412",x"B501",x"4B90", -- 0BC0-0BCF
  x"8FF5",x"B412",x"B300",x"B501",x"2F26",x"A009",x"B434",x"B502",x"4B9F",x"B434",x"B434",x"4B9F",x"8004",x"B300",x"0001",x"2F26", -- 0BD0-0BDF
  x"A009",x"4B7C",x"49E3",x"4B00",x"42E2",x"4B00",x"42CF",x"2F26",x"A00A",x"428D",x"9007",x"B412",x"2F26",x"A00A",x"4BB1",x"B412", -- 0BE0-0BEF
  x"B300",x"B412",x"A003",x"FFBA",x"349E",x"0004",x"4781",x"0000",x"42E2",x"4324",x"B501",x"9007",x"432E",x"431D",x"42CF",x"B300", -- 0BF0-0BFF
  x"FFFF",x"42E2",x"8001",x"B300",x"4324",x"B501",x"42F7",x"A00E",x"9007",x"432E",x"431D",x"42CF",x"B300",x"FFFF",x"42E2",x"8001", -- 0C00-0C0F
  x"B300",x"4324",x"B501",x"42F7",x"A00E",x"9003",x"432E",x"431D",x"8001",x"B300",x"4324",x"432E",x"431D",x"B300",x"42CF",x"B300", -- 0C10-0C1F
  x"A003",x"FFD2",x"34A3",x"0001",x"4781",x"2F21",x"A009",x"2F21",x"4B3C",x"B434",x"9003",x"34A5",x"0001",x"41F5",x"B502",x"A007", -- 0C20-0C2F
  x"428D",x"B501",x"A00A",x"4BF7",x"B412",x"428D",x"B412",x"B502",x"9008",x"428D",x"B501",x"A00A",x"434C",x"B412",x"428D",x"B412", -- 0C30-0C3F
  x"8FF6",x"B300",x"B300",x"0020",x"431D",x"A003",x"FFDB",x"34A7",x"0002",x"4781",x"B412",x"4C25",x"4C25",x"A003",x"FFF8",x"34AA", -- 0C40-0C4F
  x"000B",x"4069",x"2F27",x"FFFB",x"34B6",x"0009",x"4069",x"2F28",x"FFFB",x"34C0",x"000D",x"4781",x"2F23",x"A00A",x"A003",x"FFF9", -- 0C50-0C5F
  x"34CE",x"000D",x"4781",x"2F23",x"A009",x"A003",x"FFF9",x"34DC",x"000B",x"4781",x"2F28",x"A00A",x"2F27",x"A009",x"2F23",x"A00A", -- 0C60-0C6F
  x"2F28",x"A009",x"A003",x"FFF3",x"34E8",x"0004",x"4781",x"2F24",x"A00A",x"2F23",x"A009",x"4C6A",x"4C6A",x"A003",x"FFF5",x"34ED", -- 0C70-0C7F
  x"0003",x"4781",x"B501",x"2F21",x"A009",x"2F21",x"4B3C",x"B501",x"2F21",x"4294",x"901A",x"B502",x"2F23",x"A00A",x"4286",x"B412", -- 0C80-0C8F
  x"484B",x"2F23",x"A00A",x"4286",x"B502",x"4286",x"2F23",x"42C4",x"2F23",x"A00A",x"2F25",x"A00A",x"42A2",x"A00B",x"9002",x"0369", -- 0C90-0C9F
  x"43C2",x"4B00",x"B412",x"B300",x"8002",x"B200",x"B300",x"A003",x"FFD6",x"34F1",x"0003",x"4781",x"B412",x"4C82",x"B412",x"4C82", -- 0CA0-0CAF
  x"A003",x"FFF7",x"34F5",x"0001",x"4781",x"4C5C",x"B434",x"B434",x"4BB1",x"B412",x"B300",x"B412",x"4C63",x"4C82",x"A003",x"FFF2", -- 0CB0-0CBF
  x"34F7",x"0003",x"4781",x"4C5C",x"B434",x"B434",x"4BB1",x"B300",x"B412",x"4C63",x"4C82",x"A003",x"FFF3",x"34FB",x"0003",x"4781", -- 0CC0-0CCF
  x"4C5C",x"B434",x"B434",x"B501",x"9004",x"B412",x"B502",x"4CC3",x"8FFA",x"B300",x"B412",x"4C63",x"4C82",x"A003",x"FFEE",x"34FF", -- 0CD0-0CDF
  x"0002",x"4781",x"4C5C",x"B434",x"B434",x"B603",x"4CD0",x"B434",x"B502",x"4CB5",x"B434",x"B434",x"4CB5",x"B434",x"4C63",x"4CAC", -- 0CE0-0CEF
  x"A003",x"FFED",x"3502",x"0007",x"4781",x"4C5C",x"B434",x"B434",x"0007",x"43FB",x"441D",x"A009",x"4415",x"A009",x"0000",x"441D", -- 0CF0-0CFF
  x"A00A",x"9063",x"B501",x"4426",x"A009",x"0001",x"4441",x"A009",x"FFFF",x"444A",x"A009",x"4415",x"A00A",x"4426",x"A00A",x"A007", -- 0D00-0D0F
  x"427A",x"002B",x"429B",x"9009",x"4426",x"A00A",x"4286",x"4426",x"A009",x"0000",x"444A",x"A009",x"8016",x"4415",x"A00A",x"4426", -- 0D10-0D1F
  x"A00A",x"A007",x"427A",x"002D",x"429B",x"900D",x"4426",x"A00A",x"4286",x"4426",x"A009",x"0000",x"444A",x"A009",x"4441",x"A00A", -- 0D20-0D2F
  x"A000",x"4441",x"A009",x"444A",x"A00A",x"9FD2",x"4426",x"A00A",x"441D",x"A00A",x"42A2",x"9029",x"4415",x"A00A",x"4426",x"A00A", -- 0D30-0D3F
  x"A007",x"427A",x"B501",x"9015",x"453E",x"A00B",x"9007",x"B300",x"441D",x"A00A",x"A000",x"441D",x"A009",x"800A",x"B412",x"2F08", -- 0D40-0D4F
  x"A00A",x"4B9F",x"4B90",x"4426",x"A00A",x"4286",x"4426",x"A009",x"8005",x"B300",x"4426",x"A00A",x"441D",x"A009",x"4426",x"A00A", -- 0D50-0D5F
  x"441D",x"A00A",x"42A2",x"A00B",x"9FD7",x"4441",x"A00A",x"A00F",x"9001",x"A000",x"4426",x"A00A",x"441D",x"A00A",x"4294",x"B501", -- 0D60-0D6F
  x"9006",x"B300",x"4415",x"A00A",x"4426",x"A00A",x"A007",x"4409",x"B434",x"4C63",x"B412",x"4C82",x"B412",x"A003",x"FF73",x"350A", -- 0D70-0D7F
  x"0002",x"0022",x"41D4",x"4CF5",x"B300",x"A003",x"FFF8",x"350D",x"0001",x"4781",x"4C5C",x"B434",x"B434",x"0004",x"43FB",x"B501", -- 0D80-0D8F
  x"A00F",x"9002",x"0012",x"43C2",x"0002",x"442F",x"A009",x"4426",x"A009",x"441D",x"A009",x"0001",x"4426",x"A00A",x"442F",x"A00A", -- 0D90-0D9F
  x"49DA",x"4426",x"A009",x"9003",x"441D",x"A00A",x"4B9F",x"4426",x"A00A",x"9008",x"441D",x"A00A",x"441D",x"A00A",x"4B9F",x"441D", -- 0DA0-0DAF
  x"A009",x"8FEA",x"4409",x"B412",x"4C63",x"4C82",x"A003",x"FFCF",x"350F",x"0001",x"4781",x"2F08",x"A00A",x"0010",x"429B",x"9002", -- 0DB0-0DBF
  x"4C25",x"802C",x"4C5C",x"B412",x"B501",x"A00F",x"9004",x"A000",x"3511",x"0001",x"41F5",x"B501",x"A00D",x"9005",x"3513",x"0002", -- 0DC0-0DCF
  x"41F5",x"B300",x"801A",x"FFFF",x"B412",x"B501",x"9004",x"2F08",x"A00A",x"4BB1",x"8FFA",x"B300",x"B501",x"A00F",x"A00B",x"900A", -- 0DD0-0DDF
  x"0030",x"A007",x"B501",x"0039",x"42A9",x"9002",x"0007",x"A007",x"431D",x"8FF2",x"0020",x"431D",x"B300",x"4C63",x"A003",x"FFC8", -- 0DE0-0DEF
  x"3516",x"0002",x"4781",x"B412",x"4DBB",x"4DBB",x"A003",x"FFF8",x"3519",x"0006",x"4781",x"3FFF",x"A008",x"B501",x"4286",x"B412", -- 0DF0-0DFF
  x"A00A",x"A003",x"FFF5",x"3520",x"0004",x"4781",x"4051",x"B501",x"0004",x"0000",x"4047",x"42A2",x"9003",x"B300",x"0000",x"800B", -- 0E00-0E0F
  x"4DFB",x"B412",x"B300",x"0004",x"0000",x"4047",x"42A2",x"9002",x"0000",x"8001",x"FFFF",x"A003",x"FFE6",x"3525",x"0001",x"4781", -- 0E10-0E1F
  x"B502",x"4E06",x"9011",x"B412",x"4DFB",x"3FFF",x"A008",x"B434",x"B603",x"42A9",x"9005",x"B412",x"B300",x"A007",x"A00A",x"8003", -- 0E20-0E2F
  x"B200",x"B300",x"0000",x"8003",x"9002",x"B300",x"0000",x"A003",x"FFE4",x"3527",x"0001",x"4781",x"B603",x"4E20",x"A003",x"FFF9", -- 0E30-0E3F
  x"3529",x"0001",x"4781",x"B501",x"42E2",x"B434",x"B434",x"B502",x"4E06",x"A00D",x"B502",x"A00D",x"A008",x"42CF",x"4E06",x"A00D", -- 0E40-0E4F
  x"A008",x"9002",x"B200",x"8072",x"B502",x"4E06",x"A00D",x"9017",x"B501",x"4286",x"4B5F",x"B434",x"B502",x"A009",x"0004",x"0000", -- 0E50-0E5F
  x"4047",x"B502",x"428D",x"42C4",x"B501",x"42E2",x"A007",x"A009",x"42CF",x"428D",x"0004",x"0000",x"4047",x"A00E",x"8057",x"B502", -- 0E60-0E6F
  x"4DFB",x"3FFF",x"A008",x"B434",x"B603",x"42A9",x"9008",x"B412",x"B300",x"B434",x"42E2",x"A007",x"A009",x"42CF",x"801F",x"B501", -- 0E70-0E7F
  x"4286",x"4B5F",x"B412",x"42E2",x"B501",x"42E2",x"B412",x"484B",x"B300",x"42CF",x"0004",x"0000",x"4047",x"B502",x"428D",x"A00A", -- 0E80-0E8F
  x"A00E",x"B502",x"428D",x"A009",x"B412",x"B502",x"42CF",x"A007",x"A009",x"428D",x"0004",x"0000",x"4047",x"A00E",x"4DFB",x"3FFF", -- 0E90-0E9F
  x"A008",x"B603",x"A007",x"428D",x"A00A",x"A00D",x"B502",x"0001",x"42A9",x"A008",x"9002",x"428D",x"8FF4",x"B502",x"A00A",x"4E06", -- 0EA0-0EAF
  x"A00D",x"B502",x"0001",x"429B",x"A008",x"9003",x"B300",x"A00A",x"800D",x"B412",x"428D",x"B412",x"0004",x"0000",x"4047",x"A00E", -- 0EB0-0EBF
  x"B502",x"A009",x"0004",x"0000",x"4047",x"A00E",x"A003",x"FF78",x"352B",x"0001",x"4781",x"B501",x"4E06",x"9016",x"352D",x"0002", -- 0EC0-0ECF
  x"41F5",x"4DFB",x"3FFF",x"A008",x"B502",x"A007",x"B412",x"B603",x"42A9",x"9005",x"B501",x"A00A",x"4ECB",x"4286",x"8FF8",x"B200", -- 0ED0-0EDF
  x"3530",x"0002",x"41F5",x"8001",x"4DBB",x"A003",x"FFE1",x"3533",x"0002",x"4781",x"B412",x"4ECB",x"4ECB",x"A003",x"FFF8",x"3536", -- 0EE0-0EEF
  x"0006",x"4069",x"2F29",x"FFFB",x"353D",x"0001",x"4781",x"2F29",x"A00A",x"2801",x"A00A",x"2F29",x"A009",x"A003",x"FFF5",x"353F", -- 0EF0-0EFF
  x"0001",x"4781",x"0000",x"2801",x"A00A",x"428D",x"2F29",x"A00A",x"4294",x"900A",x"2801",x"A00A",x"0002",x"4294",x"2F29",x"A00A", -- 0F00-0F0F
  x"4294",x"B434",x"4E43",x"8FEF",x"B412",x"2F29",x"A009",x"A003",x"FFE6",x"3541",x"0005",x"4781",x"B501",x"4E06",x"9019",x"B501", -- 0F10-0F1F
  x"42E2",x"4DFB",x"3FFF",x"A008",x"B412",x"B502",x"A007",x"428D",x"B412",x"B501",x"900A",x"B412",x"B501",x"A00A",x"4F1C",x"B502", -- 0F20-0F2F
  x"A009",x"428D",x"B412",x"428D",x"8FF4",x"B200",x"42CF",x"8001",x"4C82",x"A003",x"FFDE",x"3547",x"0007",x"4781",x"B501",x"4E06", -- 0F30-0F3F
  x"9028",x"4DFB",x"3FFF",x"A008",x"B501",x"9021",x"B412",x"436D",x"B502",x"435E",x"B501",x"435E",x"B501",x"A00A",x"B501",x"435E", -- 0F40-0F4F
  x"B501",x"4051",x"3FFF",x"42A9",x"A00B",x"9005",x"FFFF",x"435E",x"FFFF",x"435E",x"8005",x"B501",x"4051",x"4DFB",x"435E",x"435E", -- 0F50-0F5F
  x"B501",x"4ECB",x"4F3E",x"4286",x"B412",x"428D",x"8FDD",x"B200",x"8001",x"B300",x"A003",x"FFCF",x"354F",x"000B",x"4781",x"0008", -- 0F60-0F6F
  x"43FB",x"4C5C",x"4415",x"A009",x"441D",x"A009",x"0001",x"441D",x"A00A",x"4426",x"A009",x"FFFF",x"4426",x"42C4",x"4453",x"A009", -- 0F70-0F7F
  x"0000",x"4441",x"A009",x"0000",x"444A",x"A009",x"B501",x"4426",x"A00A",x"4E20",x"4426",x"A00A",x"4E20",x"441D",x"A00A",x"442F", -- 0F80-0F8F
  x"A009",x"FFFF",x"442F",x"42C4",x"B502",x"442F",x"A00A",x"4E20",x"4426",x"A00A",x"4E20",x"4441",x"A00A",x"442F",x"A00A",x"B434", -- 0F90-0F9F
  x"4E43",x"4441",x"A009",x"B502",x"4426",x"A00A",x"4E20",x"442F",x"A00A",x"4E20",x"444A",x"A00A",x"442F",x"A00A",x"B434",x"4E43", -- 0FA0-0FAF
  x"444A",x"A009",x"442F",x"A00A",x"A00D",x"9FDB",x"4441",x"A00A",x"4426",x"A00A",x"4E20",x"4453",x"A00A",x"4B90",x"4441",x"A00A", -- 0FB0-0FBF
  x"4426",x"A00A",x"B434",x"4E43",x"4441",x"A009",x"444A",x"A00A",x"4426",x"A00A",x"4E20",x"4453",x"A00A",x"4B98",x"444A",x"A00A", -- 0FC0-0FCF
  x"4426",x"A00A",x"B434",x"4E43",x"444A",x"A009",x"441D",x"A00A",x"442F",x"A009",x"FFFF",x"442F",x"42C4",x"B502",x"442F",x"A00A", -- 0FD0-0FDF
  x"4E20",x"441D",x"A00A",x"4438",x"A009",x"FFFF",x"4438",x"42C4",x"4C5C",x"B434",x"B434",x"B412",x"B502",x"4438",x"A00A",x"4E20", -- 0FE0-0FEF
  x"B502",x"4B9F",x"4441",x"A00A",x"442F",x"A00A",x"4E20",x"444A",x"A00A",x"4438",x"A00A",x"4E20",x"4B9F",x"4B98",x"4453",x"A00A", -- 0FF0-0FFF
  x"4CB5",x"B43C",x"B412",x"4C63",x"B412",x"4C82",x"B412",x"4438",x"A00A",x"B434",x"4E43",x"4438",x"A00A",x"A00D",x"9FD6",x"B434", -- 1000-100F
  x"442F",x"A00A",x"B434",x"4E43",x"B412",x"442F",x"A00A",x"A00D",x"9FC1",x"4C82",x"4415",x"A00A",x"4C63",x"B412",x"4F1C",x"B412", -- 1010-101F
  x"4C82",x"4426",x"A00A",x"A00D",x"9F56",x"4409",x"A003",x"FF44",x"355B",x"0011",x"4781",x"0003",x"43FB",x"4415",x"A009",x"0000", -- 1020-102F
  x"4415",x"A00A",x"441D",x"A009",x"441D",x"A00A",x"B501",x"901F",x"428D",x"441D",x"A009",x"441D",x"A00A",x"4E3C",x"4415",x"A00A", -- 1030-103F
  x"4426",x"A009",x"4426",x"A00A",x"B501",x"900E",x"428D",x"4426",x"A009",x"4426",x"A00A",x"441D",x"A00A",x"4286",x"4426",x"A00A", -- 1040-104F
  x"4286",x"4D8A",x"4E43",x"8FEE",x"B300",x"4E43",x"8FDD",x"B300",x"4409",x"A003",x"FFCD",x"356D",x"0005",x"4781",x"2F11",x"A00A", -- 1050-105F
  x"B501",x"4286",x"A00A",x"B502",x"0002",x"A007",x"A00A",x"433C",x"0020",x"431D",x"B501",x"A00A",x"9004",x"B501",x"A00A",x"A007", -- 1060-106F
  x"8FEF",x"B300",x"A003",x"FFE7",x"3573",x"0005",x"4781",x"2F11",x"A00A",x"B501",x"435E",x"B501",x"4286",x"A00A",x"B502",x"0002", -- 1070-107F
  x"A007",x"A00A",x"433C",x"0020",x"431D",x"B501",x"A00A",x"9004",x"B501",x"A00A",x"A007",x"8FED",x"B300",x"A003",x"FFE5",x"3579", -- 1080-108F
  x"0008",x"4781",x"43E5",x"0020",x"45E4",x"465E",x"B501",x"9011",x"469E",x"B300",x"4286",x"41FB",x"B412",x"2F0F",x"A009",x"B501", -- 1090-109F
  x"46A7",x"410E",x"4300",x"2F0F",x"A009",x"0001",x"2F10",x"A009",x"8003",x"B200",x"0003",x"43C2",x"A003",x"FFE1",x"3582",x"0006", -- 10A0-10AF
  x"4781",x"0020",x"45E4",x"465E",x"900E",x"2F0F",x"A009",x"41FB",x"B501",x"A00A",x"A007",x"2F11",x"A009",x"41FB",x"4286",x"A00A", -- 10B0-10BF
  x"2F13",x"A009",x"8004",x"B300",x"3589",x"000F",x"41F5",x"A003",x"FFE5",x"3599",x"000A",x"4781",x"436D",x"B501",x"0000",x"429B", -- 10C0-10CF
  x"9003",x"35A4",x"0013",x"41F5",x"B501",x"0003",x"429B",x"9003",x"35B8",x"0014",x"41F5",x"B501",x"0006",x"429B",x"9003",x"35CD", -- 10D0-10DF
  x"0014",x"41F5",x"B501",x"0009",x"429B",x"9003",x"35E2",x"0030",x"41F5",x"B501",x"0012",x"429B",x"9003",x"3613",x"0012",x"41F5", -- 10E0-10EF
  x"B501",x"0369",x"429B",x"9003",x"3626",x"0013",x"41F5",x"B501",x"1234",x"429B",x"9003",x"363A",x"0034",x"41F5",x"A003",x"FFC9", -- 10F0-10FF
  x"366F",x"0005",x"4781",x"47A1",x"41FB",x"0003",x"4294",x"B501",x"435E",x"A00A",x"4286",x"B501",x"435E",x"A00A",x"B501",x"435E", -- 1100-110F
  x"0040",x"4294",x"41FB",x"B412",x"0007",x"A008",x"2F18",x"A007",x"A009",x"A003",x"FFE5",x"3675",x"0002",x"4781",x"0007",x"431D", -- 1110-111F
  x"3678",x"0008",x"41F5",x"A003",x"FFF6",x"3681",x"0002",x"4781",x"0007",x"431D",x"3684",x"0004",x"41F5",x"4713",x"A003",x"FFF5", -- 1120-112F
  x"3689",x"0002",x"4781",x"368C",x"0029",x"41F5",x"436D",x"FA00",x"0100",x"44D2",x"46C6",x"36B6",x"0002",x"41F5",x"A003",x"FFF0", -- 1130-113F
  x"36B9",x"0005",x"4781",x"2F09",x"A00A",x"0100",x"44D2",x"A003",x"FFF7",x"36BF",x"0007",x"4773",x"003C",x"431D",x"36C7",x"0004", -- 1140-114F
  x"41F5",x"436D",x"5143",x"36CC",x"0007",x"41EF",x"462A",x"9FF9",x"003C",x"431D",x"36D4",x"0003",x"41F5",x"A003",x"FFEA",x"36D8", -- 1150-115F
  x"0003",x"4781",x"0010",x"2F08",x"A009",x"A003",x"FFF8",x"36DC",x"0007",x"4781",x"000A",x"2F08",x"A009",x"A003",x"4CF5",x"A003", -- 1160-116F
  x"FFF6",x"36E4",x"0001",x"4781",x"A00A",x"4ECB",x"A003",x"41F5",x"36FE",x"000C",x"41F5",x"A003",x"FFEF",x"370B",x"0001",x"4781", -- 1170-117F
</DUMPZ></ok>
BZEIG @ BANF @ -1 DUMPZ  ( generiert byteRAM für P20_FFP.vhd Step_11 <ok>
<DUMPZ>
  x"28",x"20",x"7B",x"20",x"7D",x"20",x"43",x"4F",x"4D",x"50",x"49",x"4C",x"45",x"20",x"4D",x"4C", -- 3000-300F
  x"49",x"54",x"20",x"41",x"42",x"53",x"20",x"4C",x"49",x"54",x"2C",x"20",x"28",x"43",x"4F",x"4E", -- 3010-301F
  x"53",x"54",x"41",x"4E",x"54",x"3A",x"29",x"20",x"43",x"4F",x"4E",x"53",x"54",x"41",x"4E",x"54", -- 3020-302F
  x"20",x"4B",x"45",x"59",x"41",x"44",x"52",x"20",x"53",x"50",x"20",x"52",x"50",x"20",x"50",x"43", -- 3030-303F
  x"20",x"58",x"42",x"49",x"54",x"20",x"53",x"4D",x"55",x"44",x"47",x"45",x"42",x"49",x"54",x"20", -- 3040-304F
  x"52",x"50",x"30",x"20",x"49",x"52",x"41",x"4D",x"41",x"44",x"52",x"20",x"4A",x"52",x"41",x"4D", -- 3050-305F
  x"41",x"44",x"52",x"20",x"58",x"4F",x"46",x"46",x"20",x"43",x"52",x"42",x"5A",x"45",x"49",x"47", -- 3060-306F
  x"20",x"43",x"52",x"44",x"50",x"20",x"42",x"41",x"53",x"45",x"20",x"54",x"49",x"42",x"20",x"49", -- 3070-307F
  x"4E",x"31",x"20",x"49",x"4E",x"32",x"20",x"49",x"4E",x"33",x"20",x"49",x"4E",x"34",x"20",x"45", -- 3080-308F
  x"52",x"52",x"4F",x"52",x"4E",x"52",x"20",x"44",x"50",x"20",x"53",x"54",x"41",x"54",x"20",x"4C", -- 3090-309F
  x"46",x"41",x"20",x"42",x"41",x"4E",x"46",x"20",x"42",x"5A",x"45",x"49",x"47",x"20",x"44",x"50", -- 30A0-30AF
  x"4D",x"45",x"52",x"4B",x"20",x"43",x"53",x"50",x"20",x"44",x"55",x"42",x"49",x"54",x"20",x"4C", -- 30B0-30BF
  x"4F",x"43",x"41",x"4C",x"41",x"44",x"52",x"45",x"53",x"53",x"45",x"20",x"56",x"45",x"52",x"53", -- 30C0-30CF
  x"49",x"4F",x"4E",x"20",x"52",x"45",x"54",x"55",x"52",x"4E",x"20",x"28",x"4D",x"43",x"4F",x"44", -- 30D0-30DF
  x"45",x"3A",x"29",x"20",x"4D",x"43",x"4F",x"44",x"45",x"20",x"4D",x"49",x"4E",x"55",x"53",x"20", -- 30E0-30EF
  x"55",x"2B",x"20",x"55",x"2A",x"20",x"30",x"3D",x"20",x"30",x"4C",x"54",x"20",x"45",x"4D",x"49", -- 30F0-30FF
  x"54",x"43",x"4F",x"44",x"45",x"20",x"4E",x"4F",x"54",x"20",x"41",x"4E",x"44",x"20",x"4F",x"52", -- 3100-310F
  x"20",x"4D",x"2B",x"20",x"21",x"20",x"40",x"20",x"53",x"57",x"41",x"50",x"20",x"4F",x"56",x"45", -- 3110-311F
  x"52",x"20",x"44",x"55",x"50",x"20",x"52",x"4F",x"54",x"20",x"44",x"52",x"4F",x"50",x"20",x"32", -- 3120-312F
  x"53",x"57",x"41",x"50",x"20",x"32",x"4F",x"56",x"45",x"52",x"20",x"32",x"44",x"55",x"50",x"20", -- 3130-313F
  x"32",x"44",x"52",x"4F",x"50",x"20",x"4E",x"4F",x"4F",x"50",x"20",x"42",x"2C",x"20",x"5A",x"2C", -- 3140-314F
  x"20",x"28",x"57",x"4F",x"52",x"44",x"3A",x"29",x"20",x"57",x"4F",x"52",x"44",x"3A",x"20",x"22", -- 3150-315F
  x"20",x"2E",x"22",x"20",x"48",x"45",x"52",x"45",x"20",x"4A",x"52",x"42",x"49",x"54",x"20",x"4A", -- 3160-316F
  x"52",x"30",x"42",x"49",x"54",x"20",x"58",x"53",x"45",x"54",x"42",x"54",x"20",x"41",x"4C",x"4C", -- 3170-317F
  x"4F",x"54",x"20",x"42",x"52",x"41",x"4E",x"43",x"48",x"2C",x"20",x"30",x"42",x"52",x"41",x"4E", -- 3180-318F
  x"43",x"48",x"2C",x"20",x"42",x"45",x"47",x"49",x"4E",x"20",x"41",x"47",x"41",x"49",x"4E",x"20", -- 3190-319F
  x"55",x"4E",x"54",x"49",x"4C",x"20",x"49",x"46",x"20",x"45",x"4E",x"44",x"5F",x"49",x"46",x"20", -- 31A0-31AF
  x"45",x"4C",x"53",x"45",x"20",x"57",x"48",x"49",x"4C",x"45",x"20",x"52",x"45",x"50",x"45",x"41", -- 31B0-31BF
  x"54",x"20",x"43",x"40",x"20",x"43",x"21",x"20",x"31",x"2B",x"20",x"31",x"2D",x"20",x"4D",x"2D", -- 31C0-31CF
  x"20",x"3D",x"20",x"4C",x"54",x"20",x"3E",x"20",x"4D",x"2A",x"20",x"42",x"59",x"45",x"20",x"42", -- 31D0-31DF
  x"59",x"45",x"20",x"20",x"2B",x"21",x"20",x"52",x"3E",x"20",x"3E",x"52",x"20",x"52",x"20",x"2C", -- 31E0-31EF
  x"20",x"45",x"58",x"45",x"43",x"55",x"54",x"45",x"20",x"4B",x"45",x"59",x"20",x"45",x"4D",x"49", -- 31F0-31FF
  x"54",x"20",x"53",x"48",x"4C",x"31",x"36",x"20",x"44",x"49",x"47",x"20",x"54",x"59",x"50",x"45", -- 3200-320F
  x"20",x"48",x"47",x"2E",x"20",x"4D",x"2E",x"20",x"4D",x"3F",x"20",x"43",x"52",x"20",x"66",x"6C", -- 3210-321F
  x"3E",x"20",x"2F",x"66",x"6C",x"3E",x"20",x"66",x"72",x"3E",x"20",x"2F",x"66",x"72",x"3E",x"20", -- 3220-322F
  x"46",x"45",x"48",x"4C",x"45",x"52",x"54",x"45",x"58",x"54",x"20",x"44",x"49",x"53",x"41",x"42", -- 3230-323F
  x"4C",x"45",x"20",x"77",x"65",x"69",x"74",x"65",x"72",x"20",x"6E",x"61",x"63",x"68",x"20",x"54", -- 3240-324F
  x"61",x"73",x"74",x"65",x"20",x"45",x"53",x"43",x"41",x"50",x"45",x"20",x"20",x"45",x"52",x"52", -- 3250-325F
  x"4F",x"52",x"20",x"3F",x"3F",x"3F",x"20",x"46",x"45",x"48",x"4C",x"45",x"52",x"54",x"45",x"58", -- 3260-326F
  x"54",x"20",x"45",x"52",x"52",x"4F",x"52",x"20",x"2D",x"20",x"46",x"65",x"68",x"6C",x"65",x"72", -- 3270-327F
  x"20",x"4E",x"75",x"6D",x"6D",x"65",x"72",x"20",x"20",x"43",x"53",x"50",x"21",x"20",x"43",x"53", -- 3280-328F
  x"50",x"3F",x"20",x"4C",x"4F",x"43",x"41",x"4C",x"20",x"45",x"4E",x"44",x"5F",x"4C",x"4F",x"43", -- 3290-329F
  x"41",x"4C",x"20",x"4C",x"30",x"20",x"4C",x"31",x"20",x"4C",x"32",x"20",x"4C",x"33",x"20",x"4C", -- 32A0-32AF
  x"34",x"20",x"4C",x"35",x"20",x"4C",x"36",x"20",x"4C",x"37",x"20",x"27",x"20",x"49",x"4E",x"43", -- 32B0-32BF
  x"52",x"34",x"20",x"4B",x"45",x"59",x"5F",x"49",x"4E",x"54",x"20",x"4B",x"45",x"59",x"43",x"4F", -- 32C0-32CF
  x"44",x"45",x"32",x"20",x"45",x"58",x"50",x"45",x"43",x"54",x"20",x"44",x"49",x"47",x"49",x"54", -- 32D0-32DF
  x"20",x"4E",x"55",x"4D",x"42",x"45",x"52",x"20",x"57",x"4F",x"52",x"44",x"20",x"5A",x"3D",x"20", -- 32E0-32EF
  x"46",x"49",x"4E",x"44",x"20",x"4C",x"43",x"46",x"41",x"20",x"43",x"4F",x"4D",x"50",x"49",x"4C", -- 32F0-32FF
  x"45",x"2C",x"20",x"43",x"52",x"45",x"41",x"54",x"45",x"20",x"49",x"4E",x"54",x"45",x"52",x"50", -- 3300-330F
  x"52",x"45",x"54",x"20",x"51",x"55",x"49",x"54",x"20",x"2F",x"6F",x"6B",x"3E",x"20",x"6F",x"6B", -- 3310-331F
  x"20",x"6F",x"6B",x"3E",x"20",x"2F",x"6F",x"6B",x"3E",x"20",x"6F",x"6B",x"20",x"53",x"54",x"41", -- 3320-332F
  x"52",x"54",x"20",x"46",x"4F",x"52",x"54",x"59",x"2D",x"46",x"4F",x"52",x"54",x"48",x"20",x"53", -- 3330-333F
  x"4D",x"55",x"44",x"47",x"45",x"20",x"28",x"49",x"4D",x"4D",x"45",x"44",x"49",x"41",x"54",x"45", -- 3340-334F
  x"3A",x"29",x"20",x"28",x"43",x"4F",x"4D",x"50",x"49",x"4C",x"45",x"3A",x"29",x"20",x"28",x"3A", -- 3350-335F
  x"29",x"20",x"49",x"4D",x"4D",x"45",x"44",x"49",x"41",x"54",x"45",x"3A",x"20",x"43",x"4F",x"4D", -- 3360-336F
  x"50",x"49",x"4C",x"45",x"3A",x"20",x"3A",x"20",x"3B",x"20",x"4C",x"47",x"2E",x"20",x"4E",x"47", -- 3370-337F
  x"2E",x"20",x"78",x"20",x"2C",x"20",x"44",x"55",x"4D",x"50",x"5A",x"20",x"27",x"20",x"53",x"54", -- 3380-338F
  x"41",x"52",x"54",x"20",x"20",x"44",x"55",x"4D",x"50",x"5A",x"3E",x"20",x"20",x"20",x"20",x"20", -- 3390-339F
  x"2D",x"2D",x"20",x"20",x"2D",x"20",x"2F",x"44",x"55",x"4D",x"50",x"5A",x"3E",x"20",x"52",x"41", -- 33A0-33AF
  x"4D",x"50",x"31",x"20",x"56",x"41",x"52",x"49",x"41",x"42",x"4C",x"45",x"20",x"4D",x"4F",x"56", -- 33B0-33BF
  x"45",x"20",x"46",x"49",x"4C",x"4C",x"20",x"44",x"55",x"4D",x"50",x"20",x"4D",x"41",x"58",x"20", -- 33C0-33CF
  x"4D",x"49",x"4E",x"20",x"4D",x"55",x"4C",x"54",x"5F",x"49",x"20",x"4D",x"55",x"4C",x"54",x"5F", -- 33D0-33DF
  x"49",x"49",x"20",x"53",x"55",x"50",x"45",x"52",x"4D",x"55",x"4C",x"54",x"20",x"41",x"20",x"42", -- 33E0-33EF
  x"20",x"43",x"20",x"53",x"4D",x"55",x"4C",x"20",x"41",x"44",x"44",x"49",x"45",x"52",x"20",x"44", -- 33F0-33FF
  x"49",x"33",x"32",x"20",x"44",x"49",x"56",x"33",x"32",x"20",x"4D",x"2F",x"4D",x"4F",x"44",x"20", -- 3400-340F
  x"53",x"44",x"49",x"56",x"20",x"4F",x"50",x"45",x"52",x"41",x"4E",x"44",x"31",x"20",x"4F",x"50", -- 3410-341F
  x"45",x"52",x"41",x"4E",x"44",x"32",x"20",x"45",x"52",x"47",x"45",x"42",x"4E",x"49",x"53",x"20", -- 3420-342F
  x"5A",x"41",x"48",x"4C",x"45",x"4E",x"53",x"50",x"45",x"49",x"43",x"48",x"45",x"52",x"20",x"53", -- 3430-343F
  x"50",x"45",x"49",x"43",x"48",x"45",x"52",x"45",x"4E",x"44",x"45",x"20",x"53",x"43",x"48",x"49", -- 3440-344F
  x"45",x"42",x"20",x"53",x"4C",x"58",x"2D",x"3E",x"45",x"52",x"47",x"45",x"42",x"4E",x"49",x"53", -- 3450-345F
  x"20",x"4F",x"50",x"45",x"52",x"41",x"4E",x"44",x"2D",x"3E",x"53",x"4C",x"58",x"20",x"53",x"50", -- 3460-346F
  x"45",x"49",x"43",x"48",x"45",x"52",x"48",x"4F",x"4C",x"20",x"32",x"4F",x"50",x"45",x"52",x"41", -- 3470-347F
  x"4E",x"44",x"45",x"4E",x"2D",x"3E",x"32",x"53",x"4C",x"58",x"20",x"2B",x"20",x"2D",x"20",x"2A", -- 3480-348F
  x"20",x"52",x"45",x"43",x"55",x"52",x"53",x"45",x"20",x"2F",x"4D",x"4F",x"44",x"20",x"48",x"47", -- 3490-349F
  x"30",x"2E",x"20",x"2E",x"20",x"2D",x"20",x"42",x"2E",x"20",x"42",x"4C",x"4F",x"43",x"4B",x"41", -- 34A0-34AF
  x"4E",x"46",x"41",x"4E",x"47",x"20",x"42",x"4C",x"4F",x"43",x"4B",x"45",x"4E",x"44",x"45",x"20", -- 34B0-34BF
  x"4E",x"45",x"42",x"45",x"4E",x"52",x"45",x"43",x"48",x"4E",x"55",x"4E",x"47",x"20",x"48",x"41", -- 34C0-34CF
  x"55",x"50",x"54",x"52",x"45",x"43",x"48",x"4E",x"55",x"4E",x"47",x"20",x"52",x"45",x"43",x"48", -- 34D0-34DF
  x"45",x"4E",x"42",x"4C",x"4F",x"43",x"4B",x"20",x"49",x"4E",x"49",x"54",x"20",x"41",x"2B",x"30", -- 34E0-34EF
  x"20",x"42",x"2B",x"30",x"20",x"2F",x"20",x"4D",x"4F",x"44",x"20",x"47",x"47",x"54",x"20",x"42", -- 34F0-34FF
  x"4B",x"20",x"4E",x"4E",x"55",x"4D",x"42",x"45",x"52",x"20",x"4E",x"22",x"20",x"5E",x"20",x"2E", -- 3500-350F
  x"20",x"2D",x"20",x"30",x"20",x"20",x"42",x"2E",x"20",x"5A",x"45",x"52",x"4C",x"45",x"47",x"20", -- 3510-351F
  x"4F",x"42",x"4A",x"3F",x"20",x"4C",x"20",x"47",x"20",x"48",x"20",x"2E",x"20",x"5B",x"20",x"20", -- 3520-352F
  x"5D",x"20",x"20",x"42",x"2E",x"20",x"53",x"50",x"4D",x"45",x"52",x"4B",x"20",x"5B",x"20",x"5D", -- 3530-353F
  x"20",x"4F",x"42",x"4A",x"2B",x"30",x"20",x"4F",x"42",x"4A",x"44",x"55",x"4D",x"50",x"20",x"49", -- 3540-354F
  x"4E",x"56",x"45",x"52",x"54",x"49",x"45",x"52",x"45",x"4E",x"20",x"56",x"41",x"4E",x"44",x"45", -- 3550-355F
  x"52",x"4D",x"4F",x"4E",x"44",x"45",x"4D",x"41",x"54",x"52",x"49",x"58",x"20",x"56",x"4C",x"49", -- 3560-356F
  x"53",x"54",x"20",x"57",x"4C",x"49",x"53",x"54",x"20",x"52",x"45",x"50",x"4C",x"41",x"43",x"45", -- 3570-357F
  x"3A",x"20",x"46",x"4F",x"52",x"47",x"45",x"54",x"20",x"6E",x"69",x"63",x"68",x"74",x"20",x"67", -- 3580-358F
  x"65",x"66",x"75",x"6E",x"64",x"65",x"6E",x"20",x"20",x"46",x"45",x"48",x"4C",x"45",x"52",x"54", -- 3590-359F
  x"45",x"58",x"54",x"20",x"44",x"69",x"76",x"69",x"73",x"69",x"6F",x"6E",x"20",x"64",x"75",x"72", -- 35A0-35AF
  x"63",x"68",x"20",x"4E",x"75",x"6C",x"6C",x"20",x"57",x"6F",x"72",x"74",x"20",x"6E",x"69",x"63", -- 35B0-35BF
  x"68",x"74",x"20",x"64",x"65",x"66",x"69",x"6E",x"69",x"65",x"72",x"74",x"20",x"45",x"69",x"6E", -- 35C0-35CF
  x"67",x"61",x"62",x"65",x"7A",x"65",x"69",x"6C",x"65",x"20",x"7A",x"75",x"20",x"6C",x"61",x"6E", -- 35D0-35DF
  x"67",x"20",x"53",x"74",x"72",x"75",x"6B",x"74",x"75",x"72",x"66",x"65",x"68",x"6C",x"65",x"72", -- 35E0-35EF
  x"20",x"69",x"6E",x"20",x"49",x"46",x"20",x"45",x"4E",x"44",x"5F",x"49",x"46",x"20",x"42",x"45", -- 35F0-35FF
  x"47",x"49",x"4E",x"20",x"55",x"4E",x"54",x"49",x"4C",x"20",x"44",x"4F",x"20",x"4C",x"4F",x"4F", -- 3600-360F
  x"50",x"20",x"20",x"6E",x"65",x"67",x"61",x"74",x"69",x"76",x"65",x"72",x"20",x"45",x"78",x"70", -- 3610-361F
  x"6F",x"6E",x"65",x"6E",x"74",x"20",x"5A",x"61",x"68",x"6C",x"65",x"6E",x"73",x"70",x"65",x"69", -- 3620-362F
  x"63",x"68",x"65",x"72",x"20",x"76",x"6F",x"6C",x"6C",x"20",x"67",x"72",x"6F",x"C3",x"9F",x"65", -- 3630-363F
  x"20",x"67",x"61",x"6E",x"7A",x"65",x"20",x"5A",x"61",x"68",x"6C",x"65",x"6E",x"20",x"6B",x"6F", -- 3640-364F
  x"6D",x"70",x"69",x"6C",x"69",x"65",x"72",x"65",x"6E",x"20",x"67",x"65",x"68",x"74",x"20",x"6D", -- 3650-365F
  x"6F",x"6D",x"65",x"6E",x"74",x"61",x"6E",x"20",x"6E",x"69",x"63",x"68",x"74",x"2E",x"20",x"53", -- 3660-366F
  x"54",x"52",x"47",x"3A",x"20",x"5E",x"47",x"20",x"2F",x"31",x"78",x"50",x"49",x"45",x"50",x"2F", -- 3670-367F
  x"20",x"5E",x"46",x"20",x"51",x"55",x"49",x"54",x"20",x"5E",x"41",x"20",x"41",x"6E",x"67",x"65", -- 3680-368F
  x"68",x"61",x"6C",x"74",x"65",x"6E",x"20",x"66",x"C3",x"BC",x"72",x"20",x"67",x"65",x"6E",x"61", -- 3690-369F
  x"75",x"20",x"65",x"69",x"6E",x"65",x"20",x"45",x"69",x"6E",x"67",x"61",x"62",x"65",x"7A",x"65", -- 36A0-36AF
  x"69",x"6C",x"65",x"3A",x"20",x"20",x"6F",x"6B",x"20",x"51",x"55",x"45",x"52",x"59",x"20",x"28", -- 36B0-36BF
  x"2A",x"52",x"45",x"4D",x"2A",x"29",x"20",x"2F",x"6F",x"6B",x"3E",x"20",x"28",x"2A",x"45",x"4E", -- 36C0-36CF
  x"44",x"2A",x"29",x"20",x"6F",x"6B",x"3E",x"20",x"48",x"45",x"58",x"20",x"44",x"45",x"43",x"49", -- 36D0-36DF
  x"4D",x"41",x"4C",x"20",x"3F",x"20",x"65",x"6C",x"74",x"20",x"20",x"57",x"20",x"44",x"61",x"73", -- 36E0-36EF
</DUMPZ></ok>
3000 2C00 0 DUMPZ        ( generiert stapR   für P20_FFP.vhd Step_11 <ok>
<DUMPZ>
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2C00-2C0F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2C10-2C1F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2C20-2C2F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2C30-2C3F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2C40-2C4F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2C50-2C5F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2C60-2C6F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2C70-2C7F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2C80-2C8F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2C90-2C9F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2CA0-2CAF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2CB0-2CBF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2CC0-2CCF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2CD0-2CDF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2CE0-2CEF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2CF0-2CFF
  x"0000",x"0000",x"0000",x"0000",x"0055",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2D00-2D0F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2D10-2D1F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2D20-2D2F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2D30-2D3F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2D40-2D4F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2D50-2D5F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2D60-2D6F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2D70-2D7F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2D80-2D8F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2D90-2D9F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2DA0-2DAF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2DB0-2DBF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2DC0-2DCF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2DD0-2DDF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2DE0-2DEF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2DF0-2DFF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2E00-2E0F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2E10-2E1F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2E20-2E2F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2E30-2E3F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2E40-2E4F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2E50-2E5F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2E60-2E6F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2E70-2E7F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2E80-2E8F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2E90-2E9F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2EA0-2EAF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2EB0-2EBF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2EC0-2ECF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2ED0-2EDF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0008", -- 2EE0-2EEF
  x"0008",x"0000",x"0001",x"2F22",x"0000",x"0001",x"2F23",x"1406",x"0008",x"3B0A",x"0001",x"0001",x"3B45",x"00BB",x"0001",x"FFFF", -- 2EF0-2EFF
  x"0000",x"0000",x"3000",x"3FAE",x"3FAE",x"FFFF",x"36E6",x"1177",x"0010",x"3B00",x"3B00",x"3B0C",x"3B12",x"3B45",x"0000",x"1177", -- 2F00-2F0F
  x"0000",x"1170",x"3000",x"36E6",x"0020",x"00C8",x"0000",x"2F00",x"0000",x"1133",x"0000",x"0000",x"0000",x"0000",x"1128",x"111E", -- 2F10-2F1F
  x"2F2A",x"0000",x"0000",x"1400",x"1400",x"2000",x"0001",x"1400",x"1400",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2F20-2F2F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2F30-2F3F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2F40-2F4F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2F50-2F5F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2F60-2F6F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2F70-2F7F
  x"2F00",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2F80-2F8F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2F90-2F9F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2FA0-2FAF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2FB0-2FBF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2FC0-2FCF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0301",x"0301",x"0301",x"0301",x"0301",x"0301",x"0301",x"0301", -- 2FD0-2FDF
  x"0301",x"0301",x"0301",x"0301",x"0446",x"02D5",x"02CD",x"02A3",x"02A3",x"02AB",x"02A3",x"02D6",x"02D6",x"0651",x"02D6",x"02D6", -- 2FE0-2FEF
  x"02D6",x"0624",x"02D6",x"02D6",x"031F",x"0345",x"01F6",x"029C",x"0809",x"FFFF",x"06EE",x"3B05",x"3B06",x"3B00",x"3B00",x"0738", -- 2FF0-2FFF
</DUMPZ></ok>
</sekt> 
 <ok></ok>
<sekt inhalt="noch ein wenig DEMO"> 
111111111111111 DUP * . <ok>123456789ABCDEFEDCBA987654321 </ok>
 <ok></ok>
( jetzt eine Matrix invertieren ) <ok></ok>
 <ok></ok>
DECIMAL <ok></ok>
 <ok></ok>
[ [ 1 1 ^ 1 2 ^ 1 3 ^ 1 1 ^ ] <ok></ok>
  [ 2 1 ^ 2 2 ^ 2 3 ^ 2 4 ^ ] <ok></ok>
  [ 3 1 ^ 3 2 ^ 3 3 ^ 3 4 ^ ] <ok></ok>
  [ 4 1 ^ 4 2 ^ 4 3 ^ 4 4 ^ ] <ok></ok>
  ]  <ok></ok>
DUP . <ok>[ [ 1 1 1 1 ] [ 2 4 8 16 ] [ 3 9 27 81 ] [ 4 16 64 256 ] ] </ok>
4 INVERTIEREN ( mat dim --> invmat nenner ) <ok></ok>
OVER . <ok>[ [ 1152 -864 384 -72 ] [ -1248 1368 -672 132 ] [ 432 -576 336 -72 ] [ -48 72 -48 12 ] ] </ok>
DUP . <ok>288 </ok>
( Ergebnis sollte sein: OVER .      ) <ok></ok>
(      [ [ 1152 -864 384 -72 ]      ) <ok></ok>
(        [ -1248 1368 -672 132 ]    ) <ok></ok>
(        [ 432 -576 336 -72 ]       ) <ok></ok>
(        [ -48 72 -48 12 ] ] ok     ) <ok></ok>
( und gemeinsamer Nenner: DUP . 288 ) <ok></ok>
</sekt> 
</FFINIT2> 
</INIT> 
