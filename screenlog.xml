<?xml version="1.0" encoding="utf-8" ?> 
<?xml-stylesheet type="text/xsl" href="INIT.xsl" ?> 
<!DOCTYPE INIT SYSTEM "INIT.DTD"> 
<INIT> 
<AXIOME> 
<sekt inhalt="Axiome (sie enthalten Vorwärtsreferenzen und sind deshalb separat zusammengefasst)"> 
<sekt inhalt="vorab der Ablauf, was tun, wenn diese Axiome geändert werden müssen"> 
( wenn die Axiome so bleiben wie sie sind, ganz normal 1x hintereinanderweg compilieren ) <ok></ok>
( wenn die Axiome verändert werden sollen, dann ) <ok></ok>
  ( zuerst RESET und 1x die ursprünglichen Axiome laden ) <ok></ok>
  ( anschließend die neuen Axiome compilieren, so: ) <ok></ok>
    ( HERE 100 + DPMERK ! 3400 BANF ! ) <ok></ok>
    ( 2x neue Axiome compilieren <REF1/> ) <ok></ok>
    ( 0020 DPMERK ! 3000 BANF ! ) <ok></ok>
    ( 2x neue Axiome compilieren <REF1/> nochmal ) <ok></ok>
    ( danach alles, was nach den AXIOMEN folgt, 1x compilieren ) <ok></ok>
  ( bei verzwickten Veränderungen kann es vorkommen, ) <ok></ok>
  ( dass noch weitere Zwischenschritte eingefügt werden müssen. ) <ok></ok>
</sekt> 
 <ok></ok>
<sekt inhalt="Anfangszustand so herstellen wie zum Recompilieren benötigt"> 
( zuerst alles Notwendige wieder auf Ausgangszustand schalten ) <ok></ok>
2 2 M* DUP M* BASE !           ( HEX ) <ok></ok>
DPMERK @ DP ! BANF @ BZEIG !   ( DP und BZEIG auf Anfangswerte zurücksetzen ) <ok></ok><fl>13AF 38BF </fl><fr>0020 3000 </fr>
' NOOP @ ' KEY !               ( EXXI ausschalten ) <ok></ok>
</sekt> 
 <ok></ok>
<sekt inhalt="so, mit irgendwas muss das Compilieren losgehen"> 
IMMEDIATE: ( 29 WORD 2DROP ; <ok></ok><fl>0020 3000 </fl><fr>0028 3002 </fr>
IMMEDIATE: { 0 STAT ! ; ( war ursprünglich mal [ )   <ok></ok><fl>0028 3002 </fl><fr>0030 3004 </fr>
: } 1 STAT ! ; <ok></ok><fl>0030 3004 </fl><fr>0038 3006 </fr>
IMMEDIATE: COMPILE 20 WORD FIND LCFA DROP COMPILE, ; <ok></ok><fl>0038 3006 </fl><fr>0043 300E </fr>
: MLIT ( a b --> 1000*a+b ) SWAP 1000 U* SWAP DROP ; <ok></ok><fl>0043 300E </fl><fr>004D 3013 </fr>
: ABS DUP 0LT IF MINUS END_IF ; <ok></ok><fl>004D 3013 </fl><fr>0056 3017 </fr>
: LIT, ( a --> ) DUP ABS 04 000 MLIT AND IF 111 ERROR END_IF , ; <ok></ok><fl>0056 3017 </fl><fr>0065 301C </fr>
COMPILE: (CONSTANT:) R> @ STAT @ IF LIT, END_IF ; <ok></ok><fl>0065 301C </fl><fr>0070 3028 </fr>
</sekt> 
 <ok></ok>
<sekt inhalt="Konstanten"> 
: CONSTANT ( /name/  c --> ) CREATE COMPILE (CONSTANT:) , SMUDGE ; <ok></ok><fl>0070 3028 </fl><fr>0079 3031 </fr>
 <ok></ok>
2800 CONSTANT KEYADR <ok></ok><fl>0079 3031 </fl><fr>007E 3038 </fr>
2801 CONSTANT SP <ok></ok><fl>007E 3038 </fl><fr>0083 303B </fr>
2802 CONSTANT RP <ok></ok><fl>0083 303B </fl><fr>0088 303E </fr>
2803 CONSTANT PC <ok></ok><fl>0088 303E </fl><fr>008D 3041 </fr>
 <ok></ok>
2F00 CONSTANT XBIT <ok></ok><fl>008D 3041 </fl><fr>0092 3046 </fr>
2F01 CONSTANT SMUDGEBIT <ok></ok><fl>0092 3046 </fl><fr>0097 3050 </fr>
2F02 CONSTANT RP0 3000 RP0 ! <ok></ok><fl>0097 3050 </fl><fr>009C 3054 </fr>
2F03 CONSTANT IRAMADR <ok></ok><fl>009C 3054 </fl><fr>00A1 305C </fr>
2F04 CONSTANT JRAMADR <ok></ok><fl>00A1 305C </fl><fr>00A6 3064 </fr>
2F05 CONSTANT XOFF <ok></ok><fl>00A6 3064 </fl><fr>00AB 3069 </fr>
2F06 CONSTANT CRBZEIG BZEIG @ CRBZEIG ! <ok></ok><fl>00AB 3071 </fl><fr>00B0 3071 </fr>
2F07 CONSTANT CRDP DP @ 8 M- CRDP ! <ok></ok><fl>00AD 3071 </fl><fr>00B5 3076 </fr>
 <ok></ok>
2F08 CONSTANT BASE <ok></ok><fl>00B5 3076 </fl><fr>00BA 307B </fr>
2F09 CONSTANT TIB <ok></ok><fl>00BA 307B </fl><fr>00BF 307F </fr>
2F0A CONSTANT IN1 <ok></ok><fl>00BF 307F </fl><fr>00C4 3083 </fr>
2F0B CONSTANT IN2 <ok></ok><fl>00C4 3083 </fl><fr>00C9 3087 </fr>
2F0C CONSTANT IN3 <ok></ok><fl>00C9 3087 </fl><fr>00CE 308B </fr>
2F0D CONSTANT IN4 <ok></ok><fl>00CE 308B </fl><fr>00D3 308F </fr>
2F0E CONSTANT ERRORNR 0 ERRORNR ! <ok></ok><fl>00D3 308F </fl><fr>00D8 3097 </fr>
2F0F CONSTANT DP <ok></ok><fl>00D8 3097 </fl><fr>00DD 309A </fr>
2F10 CONSTANT STAT 0 STAT ! <ok></ok><fl>00DD 309A </fl><fr>00E2 309F </fr>
2F11 CONSTANT LFA <ok></ok><fl>00E2 309F </fl><fr>00E7 30A3 </fr>
2F12 CONSTANT BANF <ok></ok><fl>00E7 30A3 </fl><fr>00EC 30A8 </fr>
2F13 CONSTANT BZEIG <ok></ok><fl>00EC 30A8 </fl><fr>00F1 30AE </fr>
2F14 CONSTANT DPMERK <ok></ok><fl>00F1 30AE </fl><fr>00F6 30B5 </fr>
2F15 CONSTANT CSP <ok></ok><fl>00F6 30B5 </fl><fr>00FB 30B9 </fr>
2F16 CONSTANT DUBIT <ok></ok><fl>00FB 30B9 </fl><fr>0100 30BF </fr>
2F17 CONSTANT LOCALADRESSE <ok></ok><fl>0100 30BF </fl><fr>0105 30CC </fr>
 <ok></ok>
VERSION 1+ CONSTANT VERSION VERSION M. <ok>01CB </ok><fl>0105 30CC </fl><fr>010A 30D4 </fr>
</sekt> 
 <ok></ok>
<sekt inhalt="Maschinencode"> 
( A003 CONSTANT RETURN <ok></ok>
( 0A 003 MLIT MCODE RETURN <ok></ok>
: RETURN 0A 003 MLIT ; <ok></ok><fl>010A 30D4 </fl><fr>0112 30DB </fr>
COMPILE: (MCODE:) R> STAT @ IF @ , ELSE EXECUTE END_IF ; <ok></ok><fl>0112 30DB </fl><fr>011F 30E4 </fr>
: MCODE CREATE COMPILE (MCODE:) , RETURN , SMUDGE ; <ok></ok><fl>011F 30E4 </fl><fr>012A 30EA </fr>
 <ok></ok>
0A 000 MLIT MCODE MINUS <ok></ok><fl>012A 30EA </fl><fr>0130 30F0 </fr>
0A 001 MLIT MCODE U+ <ok></ok><fl>0130 30F0 </fl><fr>0136 30F3 </fr>
0A 002 MLIT MCODE U* <ok></ok><fl>0136 30F3 </fl><fr>013C 30F6 </fr>
0A 00D MLIT MCODE 0= <ok></ok><fl>013C 30F6 </fl><fr>0142 30F9 </fr>
0A 00F MLIT MCODE 0LT <ok></ok><fl>0142 30F9 </fl><fr>0148 30FD </fr>
0A 005 MLIT MCODE EMITCODE <ok></ok><fl>0148 30FD </fl><fr>014E 3106 </fr>
0A 00B MLIT MCODE NOT <ok></ok><fl>014E 3106 </fl><fr>0154 310A </fr>
0A 008 MLIT MCODE AND <ok></ok><fl>0154 310A </fl><fr>015A 310E </fr>
0A 00E MLIT MCODE OR <ok></ok><fl>015A 310E </fl><fr>0160 3111 </fr>
0A 007 MLIT MCODE M+ <ok></ok><fl>0160 3111 </fl><fr>0166 3114 </fr>
0A 009 MLIT MCODE ! <ok></ok><fl>0166 3114 </fl><fr>016C 3116 </fr>
0A 00A MLIT MCODE @ <ok></ok><fl>016C 3116 </fl><fr>0172 3118 </fr>
0B 412 MLIT MCODE SWAP <ok></ok><fl>0172 3118 </fl><fr>0178 311D </fr>
0B 502 MLIT MCODE OVER <ok></ok><fl>0178 311D </fl><fr>017E 3122 </fr>
0B 501 MLIT MCODE DUP <ok></ok><fl>017E 3122 </fl><fr>0184 3126 </fr>
0B 434 MLIT MCODE ROT <ok></ok><fl>0184 3126 </fl><fr>018A 312A </fr>
0B 300 MLIT MCODE DROP <ok></ok><fl>018A 312A </fl><fr>0190 312F </fr>
0B 43C MLIT MCODE 2SWAP <ok></ok><fl>0190 312F </fl><fr>0196 3135 </fr>
0B 60C MLIT MCODE 2OVER <ok></ok><fl>0196 3135 </fl><fr>019C 313B </fr>
0B 603 MLIT MCODE 2DUP <ok></ok><fl>019C 313B </fl><fr>01A2 3140 </fr>
0B 200 MLIT MCODE 2DROP <ok></ok><fl>01A2 3140 </fl><fr>01A8 3146 </fr>
08 000 MLIT MCODE NOOP <ok></ok><fl>01A8 3146 </fl><fr>01AE 314B </fr>
</sekt> 
 <ok></ok>
<sekt inhalt="ein Abschnitt für die Zeichenketten"> 
: B, ( b --> ) BZEIG @ ! 1 BZEIG +! ; <ok></ok><fl>01AE 314B </fl><fr>01B9 314E </fr>
: Z, ( badr n --> ) BZEIG @ LIT, DUP , <ok></ok><fl>01B9 314E </fl><fr>01C2 3151 </fr>
  BEGIN SWAP DUP @ B, 1+ SWAP 1- DUP 0= UNTIL <ok></ok><fl>01C2 3151 </fl><fr>01CC 3151 </fr>
  2DROP 20 B, ;  <ok></ok><fl>01CC 3151 </fl><fr>01D0 3151 </fr>
COMPILE: (WORD:) WORD STAT @ IF Z, R> COMPILE, END_IF ; <ok></ok><fl>01D0 3151 </fl><fr>01DC 3159 </fr>
: WORD: CREATE 1 STAT ! , COMPILE (WORD:) -1 CSP +! ; <ok></ok><fl>01DC 3159 </fl><fr>01EA 315F </fr>
22 WORD: " ; <ok></ok><fl>01EA 315F </fl><fr>01F0 3161 </fr>
22 WORD: ." TYPE ; <ok></ok><fl>01F0 3161 </fl><fr>01F7 3164 </fr>
</sekt> 
 <ok></ok>
<sekt inhalt="weiter mit Programmstrukturen"> 
: HERE DP @ ; <ok></ok><fl>01F7 3164 </fl><fr>01FE 3169 </fr>
: JRBIT 8 ; <ok></ok><fl>01FE 3169 </fl><fr>0204 316F </fr>
: JR0BIT 9 ; <ok></ok><fl>0204 316F </fl><fr>020A 3176 </fr>
( **** : XSETBT 1000 M* SWAP 0FFF AND OR ; <ok></ok>
: XSETBT 0 1000 ROT U* SWAP DROP SWAP 0FFF AND OR ; <ok></ok><fl>020A 3176 </fl><fr>0219 317D </fr>
: ALLOT DP +! ; <ok></ok><fl>0219 317D </fl><fr>0220 3183 </fr>
: BRANCH, HERE 1+ M- JRBIT XSETBT , ; <ok></ok><fl>0220 3183 </fl><fr>022B 318B </fr>
: 0BRANCH, HERE 1+ M- JR0BIT XSETBT , ; <ok></ok><fl>022B 318B </fl><fr>0236 3194 </fr>
IMMEDIATE: BEGIN HERE ; <ok></ok><fl>0236 3194 </fl><fr>023C 319A </fr>
IMMEDIATE: AGAIN BRANCH, ; <ok></ok><fl>023C 319A </fl><fr>0242 31A0 </fr>
IMMEDIATE: UNTIL 0BRANCH, ; <ok></ok><fl>0242 31A0 </fl><fr>0248 31A6 </fr>
IMMEDIATE: IF JR0BIT 1 ALLOT HERE ; <ok></ok><fl>0248 31A6 </fl><fr>0251 31A9 </fr>
IMMEDIATE: END_IF HERE OVER M- ROT XSETBT SWAP 1- ! ; <ok></ok><fl>0251 31A9 </fl><fr>025E 31B0 </fr>
IMMEDIATE: ELSE 1 ALLOT COMPILE END_IF JRBIT HERE ; <ok></ok><fl>025E 31B0 </fl><fr>0268 31B5 </fr>
IMMEDIATE: WHILE COMPILE IF ; <ok></ok><fl>0268 31B5 </fl><fr>026E 31BB </fr>
IMMEDIATE: REPEAT ROT COMPILE AGAIN COMPILE END_IF ; <ok></ok><fl>026E 31BB </fl><fr>0276 31C2 </fr>
</sekt> 
 <ok></ok>
<sekt inhalt="etliche kleinere Funktionen"> 
: C@ @ ; <ok></ok><fl>0276 31C2 </fl><fr>027C 31C5 </fr>
: C! ! ; <ok></ok><fl>027C 31C5 </fl><fr>0282 31C8 </fr>
: 1+ ( a --> a+1 ) 1 M+ ; <ok></ok><fl>0282 31C8 </fl><fr>0289 31CB </fr>
: 1- ( a --> a+1 ) -1 M+ ; <ok></ok><fl>0289 31CB </fl><fr>0290 31CE </fr>
: M- MINUS M+ ; <ok></ok><fl>0290 31CE </fl><fr>0297 31D1 </fr>
: = M- 0= ; <ok></ok><fl>0297 31D1 </fl><fr>029E 31D3 </fr>
: LT ( a b --> r ) M- 0LT ; <ok></ok><fl>029E 31D3 </fl><fr>02A5 31D6 </fr>
: > ( a b --> r ) SWAP LT ; <ok></ok><fl>02A5 31D6 </fl><fr>02AC 31D8 </fr>
: M* ( a b --> a*b ) 0 ROT ROT U* SWAP DROP ; <ok></ok><fl>02AC 31D8 </fl><fr>02B7 31DB </fr>
: BYE BEGIN ." BYE " AGAIN ; <ok></ok><fl>02B7 31DB </fl><fr>02C0 31E4 </fr>
: +! ( a adr --> adr+1 ) SWAP OVER @ M+ SWAP ! ; <ok></ok><fl>02C0 31E4 </fl><fr>02CB 31E7 </fr>
: R> RP @ 1+ @ RP @ 1+ RP 2DUP @ @ SWAP ! ! ; <ok></ok><fl>02CB 31E7 </fl><fr>02DE 31EA </fr>
: >R RP @ DUP 1- RP 2DUP @ @ SWAP DUP 1- RP ! ! ! ! ;  <ok></ok><fl>02DE 31EA </fl><fr>02F3 31ED </fr>
: R RP @ 1+ @ ; ( bei R> >R nicht unterhalb RP speichern wegen INTXY ) <ok></ok><fl>02F3 31ED </fl><fr>02FC 31EF </fr>
: , DP @ ! 1 DP +! ; <ok></ok><fl>02FC 31EF </fl><fr>0307 31F1 </fr>
: EXECUTE PC ! ; <ok></ok><fl>0307 31F1 </fl><fr>030E 31F9 </fr>
: KEY BEGIN NOOP KEYCODE2 NOT WHILE DROP REPEAT ; <ok></ok><fl>030E 31F9 </fl><fr>0319 31FD </fr>
: EMIT ' EMITCODE EXECUTE ; <ok></ok><fl>0319 31FD </fl><fr>0320 3202 </fr>
: SHL16 ( a --> t a' ) <ok></ok><fl>0320 3202 </fl><fr>0324 3208 </fr>
  0 SWAP 10 U* SWAP ; ( t a' = SHL a ) <ok></ok><fl>0324 3208 </fl><fr>032A 3208 </fr>
: DIG ( n --> c ) <ok></ok><fl>032A 3208 </fl><fr>032E 320C </fr>
  DUP 0A LT IF ELSE 7 M+ END_IF 30 M+ ; <ok></ok><fl>032E 320C </fl><fr>0338 320C </fr>
: TYPE <ok></ok><fl>0338 320C </fl><fr>033C 3211 </fr>
  BEGIN DUP WHILE <ok></ok><fl>033C 3211 </fl><fr>033E 3211 </fr>
    SWAP DUP C@ EMIT 1+ <ok></ok><fl>033E 3211 </fl><fr>0343 3211 </fr>
    SWAP 1- REPEAT <ok></ok><fl>0343 3211 </fl><fr>0346 3211 </fr>
  2DROP ; <ok></ok><fl>0346 3211 </fl><fr>0348 3211 </fr>
: HG. SHL16 DIG EMIT SHL16 DIG EMIT SHL16 DIG EMIT <ok></ok><fl>0348 3211 </fl><fr>0355 3215 </fr>
  SHL16 DIG EMIT DROP ; <ok></ok><fl>0355 3215 </fl><fr>035A 3215 </fr>
: M. HG. 20 EMIT ; <ok></ok><fl>035A 3215 </fl><fr>0362 3218 </fr>
: M? @ M. ; <ok></ok><fl>0362 3218 </fl><fr>0369 321B </fr>
: CR  <ok></ok><fl>0369 321B </fl><fr>036D 321E </fr>
  CRDP @ DP @ M- STAT @ 0= NOT OR XBIT @ 0= NOT AND IF  <ok></ok><fl>036D 321E </fl><fr>037D 321E </fr>
    3C EMIT ." fl>" CRDP @ M. CRBZEIG @ M. 3C EMIT ." /fl>" <ok></ok><fl>037D 321E </fl><fr>038D 3227 </fr>
    3C EMIT ." fr>" DP @ M. BZEIG @ M. 3C EMIT ." /fr>" <ok></ok><fl>038D 3227 </fl><fr>039D 3230 </fr>
    DP @ CRDP ! BZEIG @ CRBZEIG !  <ok></ok><fl>039D 3230 </fl><fr>03A5 3230 </fr>
    END_IF <ok></ok><fl>03A5 3230 </fl><fr>03A5 3230 </fr>
  0A EMIT ; <ok></ok><fl>03A5 3230 </fl><fr>03A8 3230 </fr>
: FEHLERTEXT ( n --> n ) ; <ok></ok><fl>03A8 3230 </fl><fr>03AD 323B </fr>
: DISABLE  <ok></ok><fl>03AD 323B </fl><fr>03B1 3243 </fr>
  CR ." weiter nach Taste ESCAPE " <ok></ok><fl>03B1 3243 </fl><fr>03B5 325D </fr>
  BEGIN 20 EMIT 8 EMIT KEY 1B = UNTIL ;  <ok></ok><fl>03B5 325D </fl><fr>03BE 325D </fr>
: ERROR <ok></ok><fl>03BE 325D </fl><fr>03C2 3263 </fr>
  DUP ERRORNR ! <ok></ok><fl>03C2 3263 </fl><fr>03C5 3263 </fr>
  0 STAT ! <ok></ok><fl>03C5 3263 </fl><fr>03C8 3263 </fr>
  CR IN1 @ IN3 @ IN1 @ M- 1- TYPE ." ???" <ok></ok><fl>03C8 3263 </fl><fr>03D5 3267 </fr>
  " FEHLERTEXT" INTERPRET <ok></ok><fl>03D5 3267 </fl><fr>03D9 3272 </fr>
  CR ." ERROR - Fehler Nummer " M.  <ok></ok><fl>03D9 3272 </fl><fr>03DE 3289 </fr>
  DISABLE QUIT ; <ok></ok><fl>03DE 3289 </fl><fr>03E1 3289 </fr>
: CSP! SP @ CSP ! ; <ok></ok><fl>03E1 3289 </fl><fr>03EA 328E </fr>
: CSP? SP @ CSP @ M- IF 9 ERROR END_IF ; <ok></ok><fl>03EA 328E </fl><fr>03F7 3293 </fr>
</sekt> 
 <ok></ok>
<sekt inhalt="lokale Variablen"> 
: LOCAL ( n --> ) 1+ LOCALADRESSE @ OVER M- DUP LOCALADRESSE ! ! ; <ok></ok><fl>03F7 3293 </fl><fr>0405 3299 </fr>
: END_LOCAL ( --> ) LOCALADRESSE @ DUP @ M+ LOCALADRESSE ! ; <ok></ok><fl>0405 3299 </fl><fr>0411 32A3 </fr>
: L0 LOCALADRESSE @ 1+ ; <ok></ok><fl>0411 32A3 </fl><fr>0419 32A6 </fr>
: L1 LOCALADRESSE @ 2 M+ ; <ok></ok><fl>0419 32A6 </fl><fr>0422 32A9 </fr>
: L2 LOCALADRESSE @ 3 M+ ; <ok></ok><fl>0422 32A9 </fl><fr>042B 32AC </fr>
: L3 LOCALADRESSE @ 4 M+ ; <ok></ok><fl>042B 32AC </fl><fr>0434 32AF </fr>
: L4 LOCALADRESSE @ 5 M+ ; <ok></ok><fl>0434 32AF </fl><fr>043D 32B2 </fr>
: L5 LOCALADRESSE @ 6 M+ ; <ok></ok><fl>043D 32B2 </fl><fr>0446 32B5 </fr>
: L6 LOCALADRESSE @ 7 M+ ; <ok></ok><fl>0446 32B5 </fl><fr>044F 32B8 </fr>
: L7 LOCALADRESSE @ 8 M+ ; ( soviele reichen schon ) <ok></ok><fl>044F 32B8 </fl><fr>0458 32BB </fr>
</sekt> 
 <ok></ok>
<sekt inhalt="alles zu KEY"> 
IMMEDIATE: ' ( /name/ --> --> pfa )  <ok></ok><fl>0458 32BB </fl><fr>045C 32BD </fr>
  20 WORD FIND LCFA DROP 1+ STAT @ IF LIT, END_IF ;  <ok></ok><fl>045C 32BD </fl><fr>0467 32BD </fr>
 <ok></ok>
: INCR4 ( adr --> ) <ok></ok><fl>0467 32BD </fl><fr>046B 32C3 </fr>
  DUP @ 1+ <ok></ok><fl>046B 32C3 </fl><fr>046E 32C3 </fr>
  DUP 3FF AND 000 = IF -400 M+ END_IF  <ok></ok><fl>046E 32C3 </fl><fr>0476 32C3 </fr>
  SWAP ! <ok></ok><fl>0476 32C3 </fl><fr>0478 32C3 </fr>
  ; <ok></ok><fl>0478 32C3 </fl><fr>0479 32C3 </fr>
 <ok></ok>
: KEY_INT ( --> ) <ok></ok><fl>0479 32C3 </fl><fr>047D 32CB </fr>
  KEYADR @  <ok></ok><fl>047D 32CB </fl><fr>047F 32CB </fr>
  DUP 08 LT IF  <ok></ok><fl>047F 32CB </fl><fr>0483 32CB </fr>
    18 M+ @ DUP IF DUP EXECUTE END_IF <ok></ok><fl>0483 32CB </fl><fr>048A 32CB </fr>
    DROP <ok></ok><fl>048A 32CB </fl><fr>048B 32CB </fr>
    ELSE <ok></ok><fl>048B 32CB </fl><fr>048C 32CB </fr>
      IRAMADR @ !  <ok></ok><fl>048C 32CB </fl><fr>048F 32CB </fr>
      IRAMADR INCR4 <ok></ok><fl>048F 32CB </fl><fr>0491 32CB </fr>
      IRAMADR @ JRAMADR @ M- 3FF AND  <ok></ok><fl>0491 32CB </fl><fr>0498 32CB </fr>
      80 > IF XOFF @ 0= IF -1 XOFF ! 13 EMIT END_IF END_IF  <ok></ok><fl>0498 32CB </fl><fr>04A4 32CB </fr>
      END_IF <ok></ok><fl>04A4 32CB </fl><fr>04A4 32CB </fr>
  0 KEYADR ! <ok></ok><fl>04A4 32CB </fl><fr>04A7 32CB </fr>
  ; <ok></ok><fl>04A7 32CB </fl><fr>04A8 32CB </fr>
 <ok></ok>
: KEYCODE2 ( --> c f ) <ok></ok><fl>04A8 32CB </fl><fr>04AC 32D4 </fr>
  JRAMADR @ IRAMADR @ = IF 0 0  <ok></ok><fl>04AC 32D4 </fl><fr>04B4 32D4 </fr>
    ELSE JRAMADR @ @ -1 <ok></ok><fl>04B4 32D4 </fl><fr>04B9 32D4 </fr>
    JRAMADR INCR4 <ok></ok><fl>04B9 32D4 </fl><fr>04BB 32D4 </fr>
    IRAMADR @ JRAMADR @ M- 3FF AND <ok></ok><fl>04BB 32D4 </fl><fr>04C2 32D4 </fr>
    20 LT IF XOFF @ IF 0 XOFF ! 11 EMIT END_IF END_IF <ok></ok><fl>04C2 32D4 </fl><fr>04CD 32D4 </fr>
    END_IF <ok></ok><fl>04CD 32D4 </fl><fr>04CD 32D4 </fr>
  ; <ok></ok><fl>04CD 32D4 </fl><fr>04CE 32D4 </fr>
 <ok></ok>
' KEY_INT 04 000 MLIT OR 12 ! <ok></ok>
</sekt> 
 <ok></ok>
<sekt inhalt="es folgt der Interpreter"> 
( ESCAPE durch EXPECT durchlaufen lassen ) <ok></ok>
( und 7F in 08 umwandeln ) <ok></ok>
( und nach n Zeichen kein 0D mehr lesen ) <ok></ok>
: EXPECT ( /text/  adr n --> adr m ) <ok></ok><fl>04CE 32D4 </fl><fr>04D2 32DB </fr>
  5 LOCAL <ok></ok><fl>04D2 32DB </fl><fr>04D4 32DB </fr>
  L2 ! L1 ! L1 @ L4 ! <ok></ok><fl>04D4 32DB </fl><fr>04DC 32DB </fr>
  BEGIN <ok></ok><fl>04DC 32DB </fl><fr>04DC 32DB </fr>
    KEY <ok></ok><fl>04DC 32DB </fl><fr>04DD 32DB </fr>
    DUP 14 ( 20 ) ( =^T, ^R=18 ) = IF  <ok></ok><fl>04DD 32DB </fl><fr>04E1 32DB </fr>
      DROP L1 @ C@ END_IF <ok></ok><fl>04E1 32DB </fl><fr>04E5 32DB </fr>
    DUP 7F = IF DROP 08 END_IF <ok></ok><fl>04E5 32DB </fl><fr>04EB 32DB </fr>
    DUP 08 = IF L4 @ L1 @ LT IF <ok></ok><fl>04EB 32DB </fl><fr>04F5 32DB </fr>
      -1 L1 +! <ok></ok><fl>04F5 32DB </fl><fr>04F8 32DB </fr>
      1 L2 +! <ok></ok><fl>04F8 32DB </fl><fr>04FB 32DB </fr>
      8 EMIT 20 ( 32 ) EMIT 8 EMIT <ok></ok><fl>04FB 32DB </fl><fr>0501 32DB </fr>
      END_IF END_IF <ok></ok><fl>0501 32DB </fl><fr>0501 32DB </fr>
(    DUP 20 ( 32 ] LT NOT OVER 08 = OR OVER 1B = OR L2 @ 0= NOT AND WHILE <ok></ok><fl>0501 32DB </fl><fr>0501 32DB </fr>
      DUP 20 LT IF ( DROP ) ELSE <ok></ok><fl>0501 32DB </fl><fr>0506 32DB </fr>
        -1 L2 +! <ok></ok><fl>0506 32DB </fl><fr>0509 32DB </fr>
        L2 @ 0LT IF 6 ERROR END_IF <ok></ok><fl>0509 32DB </fl><fr>050F 32DB </fr>
        DUP EMIT <ok></ok><fl>050F 32DB </fl><fr>0511 32DB </fr>
        DUP L1 @ C! 1 L1 +! <ok></ok><fl>0511 32DB </fl><fr>0518 32DB </fr>
        END_IF  <ok></ok><fl>0518 32DB </fl><fr>0518 32DB </fr>
    DUP 20 LT OVER 08 = NOT AND SWAP 1B = NOT AND L2 @ 0= OR UNTIL <ok></ok><fl>0518 32DB </fl><fr>052A 32DB </fr>
(      REPEAT <ok></ok><fl>052A 32DB </fl><fr>052A 32DB </fr>
  20 ( 32 ) EMIT <ok></ok><fl>052A 32DB </fl><fr>052C 32DB </fr>
  L4 @ L1 @ L4 @ M- <ok></ok><fl>052C 32DB </fl><fr>0533 32DB </fr>
  2DUP M+ 0 SWAP C! <ok></ok><fl>0533 32DB </fl><fr>0538 32DB </fr>
  END_LOCAL <ok></ok><fl>0538 32DB </fl><fr>0539 32DB </fr>
  ; <ok></ok><fl>0539 32DB </fl><fr>053A 32DB </fr>
 <ok></ok>
 <ok></ok>
: DIGIT ( z --> d r ) ( r=-1 wenn gueltig ) <ok></ok><fl>053A 32DB </fl><fr>053E 32E1 </fr>
  ( vorher r=0 wenn gueltig!!! ) <ok></ok><fl>053E 32E1 </fl><fr>053E 32E1 </fr>
  DUP 30 ( 30 48 ) LT NOT OVER 3A ( 3A 58 ) LT AND <ok></ok><fl>053E 32E1 </fl><fr>0546 32E1 </fr>
  OVER 41 ( 41 65 ) LT NOT OR  <ok></ok><fl>0546 32E1 </fl><fr>054B 32E1 </fr>
  DUP IF ( z -1 wenn gueltig ) <ok></ok><fl>054B 32E1 </fl><fr>054D 32E1 </fr>
    SWAP 30 ( 30 48 ) M- <ok></ok><fl>054D 32E1 </fl><fr>0550 32E1 </fr>
    DUP 0A LT NOT IF 7 M- END_IF <ok></ok><fl>0550 32E1 </fl><fr>0557 32E1 </fr>
    DUP BASE @ LT NOT IF DROP DROP 0 0 END_IF <ok></ok><fl>0557 32E1 </fl><fr>0561 32E1 </fr>
    SWAP END_IF ; <ok></ok><fl>0561 32E1 </fl><fr>0563 32E1 </fr>
 <ok></ok>
: NUMBER ( badr n --> a r ) ( wird später ersetzt durch <h href="#NNUMBER" /> ) <ok></ok><fl>0563 32E1 </fl><fr>0567 32E8 </fr>
  7 LOCAL ( L3 L4 nicht verwendet ) <ok></ok><fl>0567 32E8 </fl><fr>0569 32E8 </fr>
  L1 ! L0 ! <ok></ok><fl>0569 32E8 </fl><fr>056D 32E8 </fr>
  0 L1 @ IF <ok></ok><fl>056D 32E8 </fl><fr>0571 32E8 </fr>
    DUP L2 ! 1 L5 ! ( Vorzeichen ) <ok></ok><fl>0571 32E8 </fl><fr>0577 32E8 </fr>
    BEGIN ( M23 Vorzeichen gucken ) <ok></ok><fl>0577 32E8 </fl><fr>0577 32E8 </fr>
      -1 L6 !  <ok></ok><fl>0577 32E8 </fl><fr>057A 32E8 </fr>
      L0 @ L2 @ M+ C@ <ok></ok><fl>057A 32E8 </fl><fr>0580 32E8 </fr>
      2B ( 43 2B ) = IF L2 @ 1+ L2 ! 0 L6 ! ELSE <ok></ok><fl>0580 32E8 </fl><fr>058C 32E8 </fr>
        L0 @ L2 @ M+ C@ <ok></ok><fl>058C 32E8 </fl><fr>0592 32E8 </fr>
        2D ( 45 2D ) = IF L2 @ 1+ L2 ! <ok></ok><fl>0592 32E8 </fl><fr>059A 32E8 </fr>
          0 L6 ! <ok></ok><fl>059A 32E8 </fl><fr>059D 32E8 </fr>
          L5 @ MINUS L5 ! END_IF <ok></ok><fl>059D 32E8 </fl><fr>05A2 32E8 </fr>
        END_IF <ok></ok><fl>05A2 32E8 </fl><fr>05A2 32E8 </fr>
      L6 @ UNTIL <ok></ok><fl>05A2 32E8 </fl><fr>05A5 32E8 </fr>
    L2 @ L1 @ LT IF <ok></ok><fl>05A5 32E8 </fl><fr>05AB 32E8 </fr>
      BEGIN <ok></ok><fl>05AB 32E8 </fl><fr>05AB 32E8 </fr>
        L0 @ L2 @ M+ C@ <ok></ok><fl>05AB 32E8 </fl><fr>05B1 32E8 </fr>
        DUP IF ( oo L1 auf Bytes ) <ok></ok><fl>05B1 32E8 </fl><fr>05B3 32E8 </fr>
          DIGIT NOT IF DROP L1 @ MINUS L1 ! ELSE <ok></ok><fl>05B3 32E8 </fl><fr>05BD 32E8 </fr>
            SWAP BASE @ M* M+ <ok></ok><fl>05BD 32E8 </fl><fr>05C2 32E8 </fr>
            L2 @ 1+ L2 !  <ok></ok><fl>05C2 32E8 </fl><fr>05C7 32E8 </fr>
            END_IF <ok></ok><fl>05C7 32E8 </fl><fr>05C7 32E8 </fr>
          ELSE DROP L2 @ L1 ! END_IF <ok></ok><fl>05C7 32E8 </fl><fr>05CD 32E8 </fr>
        L2 @ L1 @ LT NOT UNTIL <ok></ok><fl>05CD 32E8 </fl><fr>05D4 32E8 </fr>
      END_IF ( M19 ) <ok></ok><fl>05D4 32E8 </fl><fr>05D4 32E8 </fr>
    END_IF ( M19 ) <ok></ok><fl>05D4 32E8 </fl><fr>05D4 32E8 </fr>
  L5 @ 0LT IF MINUS END_IF <ok></ok><fl>05D4 32E8 </fl><fr>05D9 32E8 </fr>
  L2 @ L1 @ M- ( oo noch kein fadr ) <ok></ok><fl>05D9 32E8 </fl><fr>05DE 32E8 </fr>
  END_LOCAL <ok></ok><fl>05DE 32E8 </fl><fr>05DF 32E8 </fr>
  ; <ok></ok><fl>05DF 32E8 </fl><fr>05E0 32E8 </fr>
 <ok></ok>
: WORD ( b --> adr n ) <ok></ok><fl>05E0 32E8 </fl><fr>05E4 32ED </fr>
  >R <ok></ok><fl>05E4 32ED </fl><fr>05E5 32ED </fr>
  IN3 @ IN2 ! <ok></ok><fl>05E5 32ED </fl><fr>05E9 32ED </fr>
  BEGIN  <ok></ok><fl>05E9 32ED </fl><fr>05E9 32ED </fr>
    IN3 @ C@ R = IN3 @ IN4 @ LT AND WHILE <ok></ok><fl>05E9 32ED </fl><fr>05F5 32ED </fr>
      1 IN3 +! REPEAT <ok></ok><fl>05F5 32ED </fl><fr>05F9 32ED </fr>
  IN3 @ IN2 ! <ok></ok><fl>05F9 32ED </fl><fr>05FD 32ED </fr>
  BEGIN  <ok></ok><fl>05FD 32ED </fl><fr>05FD 32ED </fr>
    IN3 @ C@ 3C = IF IN3 @ IN4 ! END_IF ( alles nach 3C ist Kommentar ) <ok></ok><fl>05FD 32ED </fl><fr>0607 32ED </fr>
    IN3 @ C@ R = NOT IN3 @ IN4 @ LT AND WHILE <ok></ok><fl>0607 32ED </fl><fr>0614 32ED </fr>
      1 IN3 +! REPEAT <ok></ok><fl>0614 32ED </fl><fr>0618 32ED </fr>
  IN2 @ IN3 @ OVER M- <ok></ok><fl>0618 32ED </fl><fr>061E 32ED </fr>
  DUP IF 1 IN3 +! END_IF <ok></ok><fl>061E 32ED </fl><fr>0623 32ED </fr>
  R> DROP <ok></ok><fl>0623 32ED </fl><fr>0625 32ED </fr>
  ; <ok></ok><fl>0625 32ED </fl><fr>0626 32ED </fr>
 <ok></ok>
: Z= ( adr1 n1 adr2 n2 --> r ) <ok></ok><fl>0626 32ED </fl><fr>062A 32F0 </fr>
  >R OVER R M- IF R> DROP DROP DROP DROP 0 ELSE <ok></ok><fl>062A 32F0 </fl><fr>0636 32F0 </fr>
    R> DROP SWAP 0 BEGIN 2DUP M- WHILE >R >R <ok></ok><fl>0636 32F0 </fl><fr>063F 32F0 </fr>
      OVER C@ OVER C@ M- IF DROP DROP 0 0 END_IF <ok></ok><fl>063F 32F0 </fl><fr>0649 32F0 </fr>
      DUP IF 1+ SWAP 1+ SWAP END_IF <ok></ok><fl>0649 32F0 </fl><fr>064F 32F0 </fr>
      R> R> 1+ REPEAT 2DROP ( neu bei 16 BIT ohne DO LOOP ) <ok></ok><fl>064F 32F0 </fl><fr>0654 32F0 </fr>
    DROP IF -1 ELSE 0 END_IF <ok></ok><fl>0654 32F0 </fl><fr>0659 32F0 </fr>
    END_IF ; <ok></ok><fl>0659 32F0 </fl><fr>065A 32F0 </fr>
( : Z= DROP SWAP DROP SWAP @ SWAP @ = ; <ok></ok>
 <ok></ok>
: FIND ( adr n --> lfa r ) <ok></ok><fl>065A 32F0 </fl><fr>065E 32F5 </fr>
  >R >R 0 ( heisst noch nicht gefunden ) <ok></ok><fl>065E 32F5 </fl><fr>0661 32F5 </fr>
  LFA @  <ok></ok><fl>0661 32F5 </fl><fr>0663 32F5 </fr>
  SMUDGEBIT @ IF DUP @ M+ END_IF <ok></ok><fl>0663 32F5 </fl><fr>0669 32F5 </fr>
  BEGIN <ok></ok><fl>0669 32F5 </fl><fr>0669 32F5 </fr>
    DUP 1+ DUP @ ( lfa nfa adr ) <ok></ok><fl>0669 32F5 </fl><fr>066D 32F5 </fr>
    SWAP 1+ @ ( lfa adr n1 ) <ok></ok><fl>066D 32F5 </fl><fr>0670 32F5 </fr>
    ( 2DUP CR B. 2DUP TYPE <ok></ok><fl>0670 32F5 </fl><fr>0670 32F5 </fr>
    ( BEGIN 2DUP M+ 1 M- C@ 0= WHILE 1 M- REPEAT ( ??? momentan nicht ) <ok></ok><fl>0670 32F5 </fl><fr>0670 32F5 </fr>
    R> R> 2DUP >R >R ( 0 lfa adr1 n1 adr2 n2 ) <ok></ok><fl>0670 32F5 </fl><fr>0675 32F5 </fr>
    Z= IF SWAP 0= SWAP END_IF ( heisst gefunden ) <ok></ok><fl>0675 32F5 </fl><fr>067A 32F5 </fr>
    OVER 0= OVER @ 0= NOT AND  <ok></ok><fl>067A 32F5 </fl><fr>0681 32F5 </fr>
    OVER DUP @ M+ LFA @ = NOT AND WHILE ( wegen 2xladen ) <ok></ok><fl>0681 32F5 </fl><fr>068B 32F5 </fr>
      DUP @ M+ REPEAT <ok></ok><fl>068B 32F5 </fl><fr>068F 32F5 </fr>
  R> DROP R> <ok></ok><fl>068F 32F5 </fl><fr>0692 32F5 </fr>
  ROT 0= IF DROP DROP 0 0 END_IF <ok></ok><fl>0692 32F5 </fl><fr>0699 32F5 </fr>
  ( OVER LFA @ SWAP LT IF M." *" OVER M. LFA @ M. END_IF ( vref wenn gebraucht ) <ok></ok><fl>0699 32F5 </fl><fr>0699 32F5 </fr>
  ; <ok></ok><fl>0699 32F5 </fl><fr>069A 32F5 </fr>
 <ok></ok>
: LCFA ( lfa r --> cfa r ) SWAP 3 M+ SWAP ; <ok></ok><fl>069A 32F5 </fl><fr>06A3 32FA </fr>
 <ok></ok>
: COMPILE, ( adr --> ) 04 000 MLIT OR , ; <ok></ok><fl>06A3 32FA </fl><fr>06AD 3303 </fr>
 <ok></ok>
: CREATE ( /name/  --> ) <ok></ok><fl>06AD 3303 </fl><fr>06B1 330A </fr>
  CSP! ( Stapelbalance prüfen in ; ) <ok></ok><fl>06B1 330A </fl><fr>06B2 330A </fr>
  DP @ LFA @ OVER M- , LFA ! <ok></ok><fl>06B2 330A </fl><fr>06BB 330A </fr>
  20 WORD Z, <ok></ok><fl>06BB 330A </fl><fr>06BE 330A </fr>
  1 SMUDGEBIT ! ( HERE 2 M- DUP @ MINUS SWAP ! ( UNSMUDGE ) <ok></ok><fl>06BE 330A </fl><fr>06C1 330A </fr>
  ; <ok></ok><fl>06C1 330A </fl><fr>06C2 330A </fr>
 <ok></ok>
: INTERPRET ( adr n --> ... ) <ok></ok><fl>06C2 330A </fl><fr>06C6 3314 </fr>
  IN1 @ >R IN2 @ >R IN3 @ >R IN4 @ >R <ok></ok><fl>06C6 3314 </fl><fr>06D2 3314 </fr>
  OVER M+ IN4 ! <ok></ok><fl>06D2 3314 </fl><fr>06D6 3314 </fr>
  DUP IN1 ! DUP IN2 ! IN3 ! <ok></ok><fl>06D6 3314 </fl><fr>06DE 3314 </fr>
  BEGIN <ok></ok><fl>06DE 3314 </fl><fr>06DE 3314 </fr>
  ( ... qstack? Stapelpruefen ) <ok></ok><fl>06DE 3314 </fl><fr>06DE 3314 </fr>
  20 WORD <ok></ok><fl>06DE 3314 </fl><fr>06E0 3314 </fr>
  DUP WHILE <ok></ok><fl>06E0 3314 </fl><fr>06E2 3314 </fr>
    2DUP FIND  <ok></ok><fl>06E2 3314 </fl><fr>06E4 3314 </fr>
    DUP IF ( gefunden ) <ok></ok><fl>06E4 3314 </fl><fr>06E6 3314 </fr>
      >R >R 2DROP R> R> LCFA DROP EXECUTE <ok></ok><fl>06E6 3314 </fl><fr>06EE 3314 </fr>
      ELSE ( nicht gefunden ) <ok></ok><fl>06EE 3314 </fl><fr>06EF 3314 </fr>
        2DROP <ok></ok><fl>06EF 3314 </fl><fr>06F0 3314 </fr>
        2DUP NUMBER IF ( keine Zahl ) <ok></ok><fl>06F0 3314 </fl><fr>06F3 3314 </fr>
          2DROP DROP <ok></ok><fl>06F3 3314 </fl><fr>06F5 3314 </fr>
          3 ERROR <ok></ok><fl>06F5 3314 </fl><fr>06F7 3314 </fr>
         ( DROP BNUMBER <ok></ok><fl>06F7 3314 </fl><fr>06F7 3314 </fr>
         ( DUP IF DUP IN2 ! END_IF <ok></ok><fl>06F7 3314 </fl><fr>06F7 3314 </fr>
         ( IF 3 ERROR END_IF <ok></ok><fl>06F7 3314 </fl><fr>06F7 3314 </fr>
         ( STAT @ IF SWAP LIT, LIT, END_IF <ok></ok><fl>06F7 3314 </fl><fr>06F7 3314 </fr>
          ELSE ( eine Zahl ) <ok></ok><fl>06F7 3314 </fl><fr>06F8 3314 </fr>
            ROT DROP SWAP DROP <ok></ok><fl>06F8 3314 </fl><fr>06FC 3314 </fr>
            STAT @ IF LIT, END_IF ( oo LIT, fuer gr ) <ok></ok><fl>06FC 3314 </fl><fr>0700 3314 </fr>
            END_IF <ok></ok><fl>0700 3314 </fl><fr>0700 3314 </fr>
        END_IF <ok></ok><fl>0700 3314 </fl><fr>0700 3314 </fr>
    REPEAT 2DROP <ok></ok><fl>0700 3314 </fl><fr>0702 3314 </fr>
  R> IN4 ! R> IN3 ! R> IN2 ! R> IN1 ! <ok></ok><fl>0702 3314 </fl><fr>070E 3314 </fr>
  ; <ok></ok><fl>070E 3314 </fl><fr>070F 3314 </fr>
 <ok></ok>
: QUIT <ok></ok><fl>070F 3314 </fl><fr>0713 3319 </fr>
  RP0 @ RP !  <ok></ok><fl>0713 3319 </fl><fr>0717 3319 </fr>
  XBIT @ IF 3C EMIT ." /ok>" ELSE ." ok" END_IF <ok></ok><fl>0717 3319 </fl><fr>0723 3321 </fr>
  BEGIN ( im Prinzip nur BEGIN CR TIB @ 100 EXPECT INTERPRET AGAIN ) <ok></ok><fl>0723 3321 </fl><fr>0723 3321 </fr>
    CR  <ok></ok><fl>0723 3321 </fl><fr>0724 3321 </fr>
    TIB @ 100 EXPECT <ok></ok><fl>0724 3321 </fl><fr>0728 3321 </fr>
    OVER @ 3C = IF 2DROP ELSE ( xml am Zeilenanfang gleich überlesen ) <ok></ok><fl>0728 3321 </fl><fr>072F 3321 </fr>
      XBIT @ IF  <ok></ok><fl>072F 3321 </fl><fr>0732 3321 </fr>
        3C EMIT ." ok>"  <ok></ok><fl>0732 3321 </fl><fr>0737 3325 </fr>
        INTERPRET  <ok></ok><fl>0737 3325 </fl><fr>0738 3325 </fr>
        3C EMIT ." /ok>"  <ok></ok><fl>0738 3325 </fl><fr>073D 332A </fr>
        ELSE <ok></ok><fl>073D 332A </fl><fr>073E 332A </fr>
          1B EMIT 5B EMIT 33 EMIT 36 EMIT 6D EMIT <ok></ok><fl>073E 332A </fl><fr>0748 332A </fr>
          INTERPRET  <ok></ok><fl>0748 332A </fl><fr>0749 332A </fr>
          STAT @ 0= IF ." ok" END_IF  <ok></ok><fl>0749 332A </fl><fr>0750 332D </fr>
          1B EMIT 5B EMIT 33 EMIT 39 EMIT 6D EMIT <ok></ok><fl>0750 332D </fl><fr>075A 332D </fr>
          END_IF  <ok></ok><fl>075A 332D </fl><fr>075A 332D </fr>
      END_IF <ok></ok><fl>075A 332D </fl><fr>075A 332D </fr>
    AGAIN  <ok></ok><fl>075A 332D </fl><fr>075B 332D </fr>
  ; <ok></ok><fl>075B 332D </fl><fr>075C 332D </fr>
 <ok></ok>
 <ok></ok>
: START ." FORTY-FORTH" CR CR QUIT ; <ok></ok><fl>075C 332D </fl><fr>0767 333F </fr>
 <ok></ok>
 <ok></ok>
: SMUDGE 0 SMUDGEBIT ! ( LFA @ 1+ DUP @ DUP 0LT IF MINUS END_IF SWAP ! ) ; <ok></ok><fl>0767 333F </fl><fr>076F 3346 </fr>
 <ok></ok>
: (IMMEDIATE:) R> >R ; <ok></ok><fl>076F 3346 </fl><fr>0776 3353 </fr>
:   (COMPILE:) R> COMPILE, ; <ok></ok><fl>0776 3353 </fl><fr>077D 335E </fr>
:          (:) R> STAT @ IF COMPILE, ELSE >R END_IF ; <ok></ok><fl>077D 335E </fl><fr>0789 3362 </fr>
 <ok></ok>
: IMMEDIATE: CREATE 1 STAT ! COMPILE (IMMEDIATE:) ; <ok></ok><fl>0789 3362 </fl><fr>0793 336D </fr>
:   COMPILE: CREATE 1 STAT ! COMPILE (COMPILE:) ; <ok></ok><fl>0793 336D </fl><fr>079D 3376 </fr>
:          : CREATE 1 STAT ! COMPILE (:) ; <ok></ok><fl>079D 3376 </fl><fr>07A7 3378 </fr>
 <ok></ok>
( das hier jetzt mit dem neuen CREATE: ) <ok></ok>
IMMEDIATE: ; 0 STAT ! CSP? RETURN , SMUDGE { SMUDGE } ;  <ok></ok><fl>07A7 3378 </fl><fr>07B3 337A </fr>
( tatsaechlich { SMUDGE } wegen 2x laden!!! )  <ok></ok>
( Ende der Axiome. Hiermit enden die Axiome. ) <ok></ok>
</sekt> 
 <ok></ok>
<sekt inhalt="neues Vokabular abkoppeln und Programm neu starten"> 
0 DPMERK @ ! ( abkoppeln ) <ok></ok>
HERE M. BZEIG M? <ok>07B3 337A </ok>
 <ok></ok>
START <ok>FORTY-FORTH

</ok>
</sekt> 
</sekt> 
</AXIOME> 
 <ok></ok>
<NACH_DEN_AXIOMEN> 
<sekt inhalt="bis Adresse 0800H passt noch DUMPZ drauf (inzwischen nicht mehr)"> 
( erste Forth Erweiterungen ) <ok></ok>
( - DUMPZ ) <ok></ok>
( RAMB-Inhaltsausgabe erzeugen: ) <ok></ok>
: LG. ( n --> ) <ok></ok><fl>07B3 337A </fl><fr>07B7 337E </fr>
  DUBIT @ IF SHL16 DROP SHL16 DROP  <ok></ok><fl>07B7 337E </fl><fr>07BE 337E </fr>
    ELSE SHL16 DIG EMIT SHL16 DIG EMIT END_IF  <ok></ok><fl>07BE 337E </fl><fr>07C5 337E </fr>
  SHL16 DIG EMIT SHL16 DIG EMIT DROP ; <ok></ok><fl>07C5 337E </fl><fr>07CD 337E </fr>
: NG. ( n --> ) <ok></ok><fl>07CD 337E </fl><fr>07D1 3382 </fr>
  ." x" 22 EMIT LG. 22 EMIT ." ," ;  <ok></ok><fl>07D1 3382 </fl><fr>07DD 3386 </fr>
: DUMPZ ( bis+1 von dubit --> ) <ok></ok><fl>07DD 3386 </fl><fr>07E1 338C </fr>
  DUBIT ! XBIT @ >R 0 XBIT ! <ok></ok><fl>07E1 338C </fl><fr>07E9 338C </fr>
  " ' START " INTERPRET 04 000 MLIT OR 10 ! <ok></ok><fl>07E9 338C </fl><fr>07F3 3395 </fr>
  CR 3C EMIT ." DUMPZ>" <ok></ok><fl>07F3 3395 </fl><fr>07F9 339C </fr>
  BEGIN <ok></ok><fl>07F9 339C </fl><fr>07F9 339C </fr>
    CR ."   " <ok></ok><fl>07F9 339C </fl><fr>07FD 339F </fr>
    0000 BEGIN <ok></ok><fl>07FD 339F </fl><fr>07FE 339F </fr>
      2DUP M+ <ok></ok><fl>07FE 339F </fl><fr>0800 339F </fr>
      DUP IRAMADR = IF DROP JRAMADR END_IF <ok></ok><fl>0800 339F </fl><fr>0806 339F </fr>
      DUP LOCALADRESSE = IF DROP 2D00 2F80 ! 2F80 END_IF <ok></ok><fl>0806 339F </fl><fr>080F 339F </fr>
      DUP XOFF = IF DROP XBIT END_IF <ok></ok><fl>080F 339F </fl><fr>0815 339F </fr>
      @ NG. 1+ DUP 10 = <ok></ok><fl>0815 339F </fl><fr>081B 339F </fr>
      UNTIL DROP <ok></ok><fl>081B 339F </fl><fr>081D 339F </fr>
    ."  -- " DUP HG. ." -" DUP 0F M+ HG. <ok></ok><fl>081D 339F </fl><fr>0829 33A6 </fr>
    10 M+ <ok></ok><fl>0829 33A6 </fl><fr>082B 33A6 </fr>
    2DUP > NOT UNTIL 2DROP <ok></ok><fl>082B 33A6 </fl><fr>0830 33A6 </fr>
  CR 3C EMIT ." /DUMPZ>" <ok></ok><fl>0830 33A6 </fl><fr>0836 33AE </fr>
  R> XBIT ! <ok></ok><fl>0836 33AE </fl><fr>0839 33AE </fr>
  ; <ok></ok><fl>0839 33AE </fl><fr>083A 33AE </fr>
 <ok></ok>
HERE M. BZEIG M? <ok>083A 33AE </ok>
</sekt> 
 <ok></ok>
<sekt inhalt="ProgRAM und ByteRAM für Step_9 und Step_10 erstellen"> 
HERE 0 0 DUMPZ          ( generiert ProgRAM für P20_FFP.vhd Step_10 ) <ok>
<DUMPZ>
  x"4010",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 0000-000F
  x"4760",x"A003",x"447D",x"A003",x"4000",x"A003",x"4000",x"A003",x"4000",x"A003",x"4000",x"A003",x"4000",x"A003",x"0010",x"A003", -- 0010-001F
  x"0000",x"3000",x"0001",x"4773",x"0029",x"45E4",x"B200",x"A003",x"FFF8",x"3002",x"0001",x"4773",x"0000",x"2F10",x"A009",x"A003", -- 0020-002F
  x"FFF8",x"3004",x"0001",x"4781",x"0001",x"2F10",x"A009",x"A003",x"FFF8",x"3006",x"0007",x"4773",x"0020",x"45E4",x"465E",x"469E", -- 0030-003F
  x"B300",x"46A7",x"A003",x"FFF5",x"300E",x"0004",x"4781",x"B412",x"1000",x"A002",x"B412",x"B300",x"A003",x"FFF6",x"3013",x"0003", -- 0040-004F
  x"4781",x"B501",x"A00F",x"9001",x"A000",x"A003",x"FFF7",x"3017",x"0004",x"4781",x"B501",x"4051",x"0004",x"0000",x"4047",x"A008", -- 0050-005F
  x"9002",x"0111",x"43C2",x"4300",x"A003",x"FFF1",x"301C",x"000B",x"477A",x"42CF",x"A00A",x"2F10",x"A00A",x"9001",x"405A",x"A003", -- 0060-006F
  x"FFF5",x"3028",x"0008",x"4781",x"46B1",x"4068",x"4300",x"476B",x"A003",x"FFF7",x"3031",x"0006",x"4069",x"2800",x"FFFB",x"3038", -- 0070-007F
  x"0002",x"4069",x"2801",x"FFFB",x"303B",x"0002",x"4069",x"2802",x"FFFB",x"303E",x"0002",x"4069",x"2803",x"FFFB",x"3041",x"0004", -- 0080-008F
  x"4069",x"2F00",x"FFFB",x"3046",x"0009",x"4069",x"2F01",x"FFFB",x"3050",x"0003",x"4069",x"2F02",x"FFFB",x"3054",x"0007",x"4069", -- 0090-009F
  x"2F03",x"FFFB",x"305C",x"0007",x"4069",x"2F04",x"FFFB",x"3064",x"0004",x"4069",x"2F05",x"FFFB",x"3069",x"0007",x"4069",x"2F06", -- 00A0-00AF
  x"FFFB",x"3071",x"0004",x"4069",x"2F07",x"FFFB",x"3076",x"0004",x"4069",x"2F08",x"FFFB",x"307B",x"0003",x"4069",x"2F09",x"FFFB", -- 00B0-00BF
  x"307F",x"0003",x"4069",x"2F0A",x"FFFB",x"3083",x"0003",x"4069",x"2F0B",x"FFFB",x"3087",x"0003",x"4069",x"2F0C",x"FFFB",x"308B", -- 00C0-00CF
  x"0003",x"4069",x"2F0D",x"FFFB",x"308F",x"0007",x"4069",x"2F0E",x"FFFB",x"3097",x"0002",x"4069",x"2F0F",x"FFFB",x"309A",x"0004", -- 00D0-00DF
  x"4069",x"2F10",x"FFFB",x"309F",x"0003",x"4069",x"2F11",x"FFFB",x"30A3",x"0004",x"4069",x"2F12",x"FFFB",x"30A8",x"0005",x"4069", -- 00E0-00EF
  x"2F13",x"FFFB",x"30AE",x"0006",x"4069",x"2F14",x"FFFB",x"30B5",x"0003",x"4069",x"2F15",x"FFFB",x"30B9",x"0005",x"4069",x"2F16", -- 00F0-00FF
  x"FFFB",x"30BF",x"000C",x"4069",x"2F17",x"FFFB",x"30CC",x"0007",x"4069",x"01CB",x"FFFB",x"30D4",x"0006",x"4781",x"000A",x"0003", -- 0100-010F
  x"4047",x"A003",x"FFF8",x"30DB",x"0008",x"477A",x"42CF",x"2F10",x"A00A",x"9003",x"A00A",x"4300",x"8001",x"430B",x"A003",x"FFF3", -- 0110-011F
  x"30E4",x"0005",x"4781",x"46B1",x"4115",x"4300",x"410E",x"4300",x"476B",x"A003",x"FFF5",x"30EA",x"0005",x"4116",x"A000",x"A003", -- 0120-012F
  x"FFFA",x"30F0",x"0002",x"4116",x"A001",x"A003",x"FFFA",x"30F3",x"0002",x"4116",x"A002",x"A003",x"FFFA",x"30F6",x"0002",x"4116", -- 0130-013F
  x"A00D",x"A003",x"FFFA",x"30F9",x"0003",x"4116",x"A00F",x"A003",x"FFFA",x"30FD",x"0008",x"4116",x"A005",x"A003",x"FFFA",x"3106", -- 0140-014F
  x"0003",x"4116",x"A00B",x"A003",x"FFFA",x"310A",x"0003",x"4116",x"A008",x"A003",x"FFFA",x"310E",x"0002",x"4116",x"A00E",x"A003", -- 0150-015F
  x"FFFA",x"3111",x"0002",x"4116",x"A007",x"A003",x"FFFA",x"3114",x"0001",x"4116",x"A009",x"A003",x"FFFA",x"3116",x"0001",x"4116", -- 0160-016F
  x"A00A",x"A003",x"FFFA",x"3118",x"0004",x"4116",x"B412",x"A003",x"FFFA",x"311D",x"0004",x"4116",x"B502",x"A003",x"FFFA",x"3122", -- 0170-017F
  x"0003",x"4116",x"B501",x"A003",x"FFFA",x"3126",x"0003",x"4116",x"B434",x"A003",x"FFFA",x"312A",x"0004",x"4116",x"B300",x"A003", -- 0180-018F
  x"FFFA",x"312F",x"0005",x"4116",x"B43C",x"A003",x"FFFA",x"3135",x"0005",x"4116",x"B60C",x"A003",x"FFFA",x"313B",x"0004",x"4116", -- 0190-019F
  x"B603",x"A003",x"FFFA",x"3140",x"0005",x"4116",x"B200",x"A003",x"FFFA",x"3146",x"0004",x"4116",x"8000",x"A003",x"FFFA",x"314B", -- 01A0-01AF
  x"0002",x"4781",x"2F13",x"A00A",x"A009",x"0001",x"2F13",x"42C4",x"A003",x"FFF5",x"314E",x"0002",x"4781",x"2F13",x"A00A",x"405A", -- 01B0-01BF
  x"B501",x"4300",x"B412",x"B501",x"A00A",x"41B2",x"4286",x"B412",x"428D",x"B501",x"A00D",x"9FF6",x"B200",x"0020",x"41B2",x"A003", -- 01C0-01CF
  x"FFE9",x"3151",x"0007",x"477A",x"45E4",x"2F10",x"A00A",x"9003",x"41BD",x"42CF",x"46A7",x"A003",x"FFF4",x"3159",x"0005",x"4781", -- 01D0-01DF
  x"46B1",x"0001",x"2F10",x"A009",x"4300",x"41D3",x"FFFF",x"2F15",x"42C4",x"A003",x"FFF2",x"315F",x"0001",x"0022",x"41D4",x"A003", -- 01E0-01EF
  x"FFFA",x"3161",x"0002",x"0022",x"41D4",x"433C",x"A003",x"FFF9",x"3164",x"0004",x"4781",x"2F0F",x"A00A",x"A003",x"FFF9",x"3169", -- 01F0-01FF
  x"0005",x"4781",x"0008",x"A003",x"FFFA",x"316F",x"0006",x"4781",x"0009",x"A003",x"FFFA",x"3176",x"0006",x"4781",x"0000",x"1000", -- 0200-020F
  x"B434",x"A002",x"B412",x"B300",x"B412",x"0FFF",x"A008",x"A00E",x"A003",x"FFF1",x"317D",x"0005",x"4781",x"2F0F",x"42C4",x"A003", -- 0210-021F
  x"FFF9",x"3183",x"0007",x"4781",x"41FB",x"4286",x"4294",x"4202",x"420E",x"4300",x"A003",x"FFF5",x"318B",x"0008",x"4781",x"41FB", -- 0220-022F
  x"4286",x"4294",x"4208",x"420E",x"4300",x"A003",x"FFF5",x"3194",x"0005",x"4773",x"41FB",x"A003",x"FFFA",x"319A",x"0005",x"4773", -- 0230-023F
  x"4224",x"A003",x"FFFA",x"31A0",x"0005",x"4773",x"422F",x"A003",x"FFFA",x"31A6",x"0002",x"4773",x"4208",x"0001",x"421D",x"41FB", -- 0240-024F
  x"A003",x"FFF7",x"31A9",x"0006",x"4773",x"41FB",x"B502",x"4294",x"B434",x"420E",x"B412",x"428D",x"A009",x"A003",x"FFF3",x"31B0", -- 0250-025F
  x"0004",x"4773",x"0001",x"421D",x"4254",x"4202",x"41FB",x"A003",x"FFF6",x"31B5",x"0005",x"4773",x"424B",x"A003",x"FFFA",x"31BB", -- 0260-026F
  x"0006",x"4773",x"B434",x"423F",x"4254",x"A003",x"FFF8",x"31C2",x"0002",x"4781",x"A00A",x"A003",x"FFFA",x"31C5",x"0002",x"4781", -- 0270-027F
  x"A009",x"A003",x"FFFA",x"31C8",x"0002",x"4781",x"0001",x"A007",x"A003",x"FFF9",x"31CB",x"0002",x"4781",x"FFFF",x"A007",x"A003", -- 0280-028F
  x"FFF9",x"31CE",x"0002",x"4781",x"A000",x"A007",x"A003",x"FFF9",x"31D1",x"0001",x"4781",x"4294",x"A00D",x"A003",x"FFF9",x"31D3", -- 0290-029F
  x"0002",x"4781",x"4294",x"A00F",x"A003",x"FFF9",x"31D6",x"0001",x"4781",x"B412",x"42A2",x"A003",x"FFF9",x"31D8",x"0002",x"4781", -- 02A0-02AF
  x"0000",x"B434",x"B434",x"A002",x"B412",x"B300",x"A003",x"FFF5",x"31DB",x"0003",x"4781",x"31DF",x"0004",x"41F5",x"8FFC",x"A003", -- 02B0-02BF
  x"FFF7",x"31E4",x"0002",x"4781",x"B412",x"B502",x"A00A",x"A007",x"B412",x"A009",x"A003",x"FFF5",x"31E7",x"0002",x"4781",x"2802", -- 02C0-02CF
  x"A00A",x"4286",x"A00A",x"2802",x"A00A",x"4286",x"2802",x"B603",x"A00A",x"A00A",x"B412",x"A009",x"A009",x"A003",x"FFED",x"31EA", -- 02D0-02DF
  x"0002",x"4781",x"2802",x"A00A",x"B501",x"428D",x"2802",x"B603",x"A00A",x"A00A",x"B412",x"B501",x"428D",x"2802",x"A009",x"A009", -- 02E0-02EF
  x"A009",x"A009",x"A003",x"FFEB",x"31ED",x"0001",x"4781",x"2802",x"A00A",x"4286",x"A00A",x"A003",x"FFF7",x"31EF",x"0001",x"4781", -- 02F0-02FF
  x"2F0F",x"A00A",x"A009",x"0001",x"2F0F",x"42C4",x"A003",x"FFF5",x"31F1",x"0007",x"4781",x"2803",x"A009",x"A003",x"FFF9",x"31F9", -- 0300-030F
  x"0003",x"4781",x"8000",x"44AC",x"A00B",x"9002",x"B300",x"8FFA",x"A003",x"FFF5",x"31FD",x"0004",x"4781",x"014C",x"430B",x"A003", -- 0310-031F
  x"FFF9",x"3202",x"0005",x"4781",x"0000",x"B412",x"0010",x"A002",x"B412",x"A003",x"FFF6",x"3208",x"0003",x"4781",x"B501",x"000A", -- 0320-032F
  x"42A2",x"9001",x"8002",x"0007",x"A007",x"0030",x"A007",x"A003",x"FFF2",x"320C",x"0004",x"4781",x"B501",x"9008",x"B412",x"B501", -- 0330-033F
  x"427A",x"431D",x"4286",x"B412",x"428D",x"8FF6",x"B200",x"A003",x"FFF0",x"3211",x"0003",x"4781",x"4324",x"432E",x"431D",x"4324", -- 0340-034F
  x"432E",x"431D",x"4324",x"432E",x"431D",x"4324",x"432E",x"431D",x"B300",x"A003",x"FFEE",x"3215",x"0002",x"4781",x"434C",x"0020", -- 0350-035F
  x"431D",x"A003",x"FFF8",x"3218",x"0002",x"4781",x"A00A",x"435E",x"A003",x"FFF9",x"321B",x"0002",x"4781",x"2F07",x"A00A",x"2F0F", -- 0360-036F
  x"A00A",x"4294",x"2F10",x"A00A",x"A00D",x"A00B",x"A00E",x"2F00",x"A00A",x"A00D",x"A00B",x"A008",x"9028",x"003C",x"431D",x"321E", -- 0370-037F
  x"0003",x"41F5",x"2F07",x"A00A",x"435E",x"2F06",x"A00A",x"435E",x"003C",x"431D",x"3222",x"0004",x"41F5",x"003C",x"431D",x"3227", -- 0380-038F
  x"0003",x"41F5",x"2F0F",x"A00A",x"435E",x"2F13",x"A00A",x"435E",x"003C",x"431D",x"322B",x"0004",x"41F5",x"2F0F",x"A00A",x"2F07", -- 0390-039F
  x"A009",x"2F13",x"A00A",x"2F06",x"A009",x"000A",x"431D",x"A003",x"FFC1",x"3230",x"000A",x"4781",x"A003",x"FFFB",x"323B",x"0007", -- 03A0-03AF
  x"4781",x"436D",x"3243",x"0019",x"41F5",x"0020",x"431D",x"0008",x"431D",x"4312",x"001B",x"429B",x"9FF8",x"A003",x"FFEF",x"325D", -- 03B0-03BF
  x"0005",x"4781",x"B501",x"2F0E",x"A009",x"0000",x"2F10",x"A009",x"436D",x"2F0A",x"A00A",x"2F0C",x"A00A",x"2F0A",x"A00A",x"4294", -- 03C0-03CF
  x"428D",x"433C",x"3263",x"0003",x"41F5",x"3267",x"000A",x"41EF",x"46C6",x"436D",x"3272",x"0016",x"41F5",x"435E",x"43B1",x"4713", -- 03D0-03DF
  x"A003",x"FFDD",x"3289",x"0004",x"4781",x"2801",x"A00A",x"2F15",x"A009",x"A003",x"FFF7",x"328E",x"0004",x"4781",x"2801",x"A00A", -- 03E0-03EF
  x"2F15",x"A00A",x"4294",x"9002",x"0009",x"43C2",x"A003",x"FFF3",x"3293",x"0005",x"4781",x"4286",x"2F17",x"A00A",x"B502",x"4294", -- 03F0-03FF
  x"B501",x"2F17",x"A009",x"A009",x"A003",x"FFF2",x"3299",x"0009",x"4781",x"2F17",x"A00A",x"B501",x"A00A",x"A007",x"2F17",x"A009", -- 0400-040F
  x"A003",x"FFF4",x"32A3",x"0002",x"4781",x"2F17",x"A00A",x"4286",x"A003",x"FFF8",x"32A6",x"0002",x"4781",x"2F17",x"A00A",x"0002", -- 0410-041F
  x"A007",x"A003",x"FFF7",x"32A9",x"0002",x"4781",x"2F17",x"A00A",x"0003",x"A007",x"A003",x"FFF7",x"32AC",x"0002",x"4781",x"2F17", -- 0420-042F
  x"A00A",x"0004",x"A007",x"A003",x"FFF7",x"32AF",x"0002",x"4781",x"2F17",x"A00A",x"0005",x"A007",x"A003",x"FFF7",x"32B2",x"0002", -- 0430-043F
  x"4781",x"2F17",x"A00A",x"0006",x"A007",x"A003",x"FFF7",x"32B5",x"0002",x"4781",x"2F17",x"A00A",x"0007",x"A007",x"A003",x"FFF7", -- 0440-044F
  x"32B8",x"0002",x"4781",x"2F17",x"A00A",x"0008",x"A007",x"A003",x"FFF7",x"32BB",x"0001",x"4773",x"0020",x"45E4",x"465E",x"469E", -- 0450-045F
  x"B300",x"4286",x"2F10",x"A00A",x"9001",x"405A",x"A003",x"FFF1",x"32BD",x"0005",x"4781",x"B501",x"A00A",x"4286",x"B501",x"03FF", -- 0460-046F
  x"A008",x"0000",x"429B",x"9002",x"FC00",x"A007",x"B412",x"A009",x"A003",x"FFEE",x"32C3",x"0007",x"4781",x"2800",x"A00A",x"B501", -- 0470-047F
  x"0008",x"42A2",x"9009",x"0018",x"A007",x"A00A",x"B501",x"9002",x"B501",x"430B",x"B300",x"8018",x"2F03",x"A00A",x"A009",x"2F03", -- 0480-048F
  x"446B",x"2F03",x"A00A",x"2F04",x"A00A",x"4294",x"03FF",x"A008",x"0080",x"42A9",x"9009",x"2F05",x"A00A",x"A00D",x"9005",x"FFFF", -- 0490-049F
  x"2F05",x"A009",x"0013",x"431D",x"0000",x"2800",x"A009",x"A003",x"FFD1",x"32CB",x"0008",x"4781",x"2F04",x"A00A",x"2F03",x"A00A", -- 04A0-04AF
  x"429B",x"9003",x"0000",x"0000",x"8018",x"2F04",x"A00A",x"A00A",x"FFFF",x"2F04",x"446B",x"2F03",x"A00A",x"2F04",x"A00A",x"4294", -- 04B0-04BF
  x"03FF",x"A008",x"0020",x"42A2",x"9008",x"2F05",x"A00A",x"9005",x"0000",x"2F05",x"A009",x"0011",x"431D",x"A003",x"FFDA",x"32D4", -- 04C0-04CF
  x"0006",x"4781",x"0005",x"43FB",x"4426",x"A009",x"441D",x"A009",x"441D",x"A00A",x"4438",x"A009",x"4312",x"B501",x"0014",x"429B", -- 04D0-04DF
  x"9004",x"B300",x"441D",x"A00A",x"427A",x"B501",x"007F",x"429B",x"9002",x"B300",x"0008",x"B501",x"0008",x"429B",x"9012",x"4438", -- 04E0-04EF
  x"A00A",x"441D",x"A00A",x"42A2",x"900C",x"FFFF",x"441D",x"42C4",x"0001",x"4426",x"42C4",x"0008",x"431D",x"0020",x"431D",x"0008", -- 04F0-04FF
  x"431D",x"B501",x"0020",x"42A2",x"9001",x"8012",x"FFFF",x"4426",x"42C4",x"4426",x"A00A",x"A00F",x"9002",x"0006",x"43C2",x"B501", -- 0500-050F
  x"431D",x"B501",x"441D",x"A00A",x"4280",x"0001",x"441D",x"42C4",x"B501",x"0020",x"42A2",x"B502",x"0008",x"429B",x"A00B",x"A008", -- 0510-051F
  x"B412",x"001B",x"429B",x"A00B",x"A008",x"4426",x"A00A",x"A00D",x"A00E",x"9FB2",x"0020",x"431D",x"4438",x"A00A",x"441D",x"A00A", -- 0520-052F
  x"4438",x"A00A",x"4294",x"B603",x"A007",x"0000",x"B412",x"4280",x"4409",x"A003",x"FF94",x"32DB",x"0005",x"4781",x"B501",x"0030", -- 0530-053F
  x"42A2",x"A00B",x"B502",x"003A",x"42A2",x"A008",x"B502",x"0041",x"42A2",x"A00B",x"A00E",x"B501",x"9015",x"B412",x"0030",x"4294", -- 0540-054F
  x"B501",x"000A",x"42A2",x"A00B",x"9002",x"0007",x"4294",x"B501",x"2F08",x"A00A",x"42A2",x"A00B",x"9004",x"B300",x"B300",x"0000", -- 0550-055F
  x"0000",x"B412",x"A003",x"FFD7",x"32E1",x"0006",x"4781",x"0007",x"43FB",x"441D",x"A009",x"4415",x"A009",x"0000",x"441D",x"A00A", -- 0560-056F
  x"9063",x"B501",x"4426",x"A009",x"0001",x"4441",x"A009",x"FFFF",x"444A",x"A009",x"4415",x"A00A",x"4426",x"A00A",x"A007",x"427A", -- 0570-057F
  x"002B",x"429B",x"9009",x"4426",x"A00A",x"4286",x"4426",x"A009",x"0000",x"444A",x"A009",x"8016",x"4415",x"A00A",x"4426",x"A00A", -- 0580-058F
  x"A007",x"427A",x"002D",x"429B",x"900D",x"4426",x"A00A",x"4286",x"4426",x"A009",x"0000",x"444A",x"A009",x"4441",x"A00A",x"A000", -- 0590-059F
  x"4441",x"A009",x"444A",x"A00A",x"9FD2",x"4426",x"A00A",x"441D",x"A00A",x"42A2",x"9029",x"4415",x"A00A",x"4426",x"A00A",x"A007", -- 05A0-05AF
  x"427A",x"B501",x"9015",x"453E",x"A00B",x"9007",x"B300",x"441D",x"A00A",x"A000",x"441D",x"A009",x"800A",x"B412",x"2F08",x"A00A", -- 05B0-05BF
  x"42B0",x"A007",x"4426",x"A00A",x"4286",x"4426",x"A009",x"8005",x"B300",x"4426",x"A00A",x"441D",x"A009",x"4426",x"A00A",x"441D", -- 05C0-05CF
  x"A00A",x"42A2",x"A00B",x"9FD7",x"4441",x"A00A",x"A00F",x"9001",x"A000",x"4426",x"A00A",x"441D",x"A00A",x"4294",x"4409",x"A003", -- 05D0-05DF
  x"FF83",x"32E8",x"0004",x"4781",x"42E2",x"2F0C",x"A00A",x"2F0B",x"A009",x"2F0C",x"A00A",x"427A",x"42F7",x"429B",x"2F0C",x"A00A", -- 05E0-05EF
  x"2F0D",x"A00A",x"42A2",x"A008",x"9004",x"0001",x"2F0C",x"42C4",x"8FF0",x"2F0C",x"A00A",x"2F0B",x"A009",x"2F0C",x"A00A",x"427A", -- 05F0-05FF
  x"003C",x"429B",x"9004",x"2F0C",x"A00A",x"2F0D",x"A009",x"2F0C",x"A00A",x"427A",x"42F7",x"429B",x"A00B",x"2F0C",x"A00A",x"2F0D", -- 0600-060F
  x"A00A",x"42A2",x"A008",x"9004",x"0001",x"2F0C",x"42C4",x"8FE5",x"2F0B",x"A00A",x"2F0C",x"A00A",x"B502",x"4294",x"B501",x"9003", -- 0610-061F
  x"0001",x"2F0C",x"42C4",x"42CF",x"B300",x"A003",x"FFBA",x"32ED",x"0002",x"4781",x"42E2",x"B502",x"42F7",x"4294",x"9007",x"42CF", -- 0620-062F
  x"B300",x"B300",x"B300",x"B300",x"0000",x"8023",x"42CF",x"B300",x"B412",x"0000",x"B603",x"4294",x"9016",x"42E2",x"42E2",x"B502", -- 0630-063F
  x"427A",x"B502",x"427A",x"4294",x"9004",x"B300",x"B300",x"0000",x"0000",x"B501",x"9004",x"4286",x"B412",x"4286",x"B412",x"42CF", -- 0640-064F
  x"42CF",x"4286",x"8FE7",x"B200",x"B300",x"9002",x"FFFF",x"8001",x"0000",x"A003",x"FFCC",x"32F0",x"0004",x"4781",x"42E2",x"42E2", -- 0650-065F
  x"0000",x"2F11",x"A00A",x"2F01",x"A00A",x"9003",x"B501",x"A00A",x"A007",x"B501",x"4286",x"B501",x"A00A",x"B412",x"4286",x"A00A", -- 0660-066F
  x"42CF",x"42CF",x"B603",x"42E2",x"42E2",x"462A",x"9003",x"B412",x"A00D",x"B412",x"B502",x"A00D",x"B502",x"A00A",x"A00D",x"A00B", -- 0670-067F
  x"A008",x"B502",x"B501",x"A00A",x"A007",x"2F11",x"A00A",x"429B",x"A00B",x"A008",x"9004",x"B501",x"A00A",x"A007",x"8FDA",x"42CF", -- 0680-068F
  x"B300",x"42CF",x"B434",x"A00D",x"9004",x"B300",x"B300",x"0000",x"0000",x"A003",x"FFC0",x"32F5",x"0004",x"4781",x"B412",x"0003", -- 0690-069F
  x"A007",x"B412",x"A003",x"FFF7",x"32FA",x"0008",x"4781",x"0004",x"0000",x"4047",x"A00E",x"4300",x"A003",x"FFF6",x"3303",x"0006", -- 06A0-06AF
  x"4781",x"43E5",x"2F0F",x"A00A",x"2F11",x"A00A",x"B502",x"4294",x"4300",x"2F11",x"A009",x"0020",x"45E4",x"41BD",x"0001",x"2F01", -- 06B0-06BF
  x"A009",x"A003",x"FFEB",x"330A",x"0009",x"4781",x"2F0A",x"A00A",x"42E2",x"2F0B",x"A00A",x"42E2",x"2F0C",x"A00A",x"42E2",x"2F0D", -- 06C0-06CF
  x"A00A",x"42E2",x"B502",x"A007",x"2F0D",x"A009",x"B501",x"2F0A",x"A009",x"B501",x"2F0B",x"A009",x"2F0C",x"A009",x"0020",x"45E4", -- 06D0-06DF
  x"B501",x"901F",x"B603",x"465E",x"B501",x"9009",x"42E2",x"42E2",x"B200",x"42CF",x"42CF",x"469E",x"B300",x"430B",x"8011",x"B200", -- 06E0-06EF
  x"B603",x"4567",x"9005",x"B200",x"B300",x"0003",x"43C2",x"8008",x"B434",x"B300",x"B412",x"B300",x"2F10",x"A00A",x"9001",x"405A", -- 06F0-06FF
  x"8FDD",x"B200",x"42CF",x"2F0D",x"A009",x"42CF",x"2F0C",x"A009",x"42CF",x"2F0B",x"A009",x"42CF",x"2F0A",x"A009",x"A003",x"FFB3", -- 0700-070F
  x"3314",x"0004",x"4781",x"2F02",x"A00A",x"2802",x"A009",x"2F00",x"A00A",x"9006",x"003C",x"431D",x"3319",x"0004",x"41F5",x"8003", -- 0710-071F
  x"331E",x"0002",x"41F5",x"436D",x"2F09",x"A00A",x"0100",x"44D2",x"B502",x"A00A",x"003C",x"429B",x"9002",x"B200",x"802B",x"2F00", -- 0720-072F
  x"A00A",x"900C",x"003C",x"431D",x"3321",x"0003",x"41F5",x"46C6",x"003C",x"431D",x"3325",x"0004",x"41F5",x"801C",x"001B",x"431D", -- 0730-073F
  x"005B",x"431D",x"0033",x"431D",x"0036",x"431D",x"006D",x"431D",x"46C6",x"2F10",x"A00A",x"A00D",x"9003",x"332A",x"0002",x"41F5", -- 0740-074F
  x"001B",x"431D",x"005B",x"431D",x"0033",x"431D",x"0039",x"431D",x"006D",x"431D",x"8FC8",x"A003",x"FFB3",x"332D",x"0005",x"4781", -- 0750-075F
  x"3333",x"000B",x"41F5",x"436D",x"436D",x"4713",x"A003",x"FFF5",x"333F",x"0006",x"4781",x"0000",x"2F01",x"A009",x"A003",x"FFF8", -- 0760-076F
  x"3346",x"000C",x"4781",x"42CF",x"42E2",x"A003",x"FFF9",x"3353",x"000A",x"4781",x"42CF",x"46A7",x"A003",x"FFF9",x"335E",x"0003", -- 0770-077F
  x"4781",x"42CF",x"2F10",x"A00A",x"9002",x"46A7",x"8001",x"42E2",x"A003",x"FFF4",x"3362",x"000A",x"4781",x"46B1",x"0001",x"2F10", -- 0780-078F
  x"A009",x"4772",x"A003",x"FFF6",x"336D",x"0008",x"4781",x"46B1",x"0001",x"2F10",x"A009",x"4779",x"A003",x"FFF6",x"3376",x"0001", -- 0790-079F
  x"4781",x"46B1",x"0001",x"2F10",x"A009",x"4780",x"A003",x"FFF6",x"3378",x"0001",x"4773",x"0000",x"2F10",x"A009",x"43EE",x"410E", -- 07A0-07AF
  x"4300",x"476B",x"A003",x"FFF4",x"337A",x"0003",x"4781",x"2F16",x"A00A",x"9005",x"4324",x"B300",x"4324",x"B300",x"8006",x"4324", -- 07B0-07BF
  x"432E",x"431D",x"4324",x"432E",x"431D",x"4324",x"432E",x"431D",x"4324",x"432E",x"431D",x"B300",x"A003",x"FFE6",x"337E",x"0003", -- 07C0-07CF
  x"4781",x"3382",x"0001",x"41F5",x"0022",x"431D",x"47B7",x"0022",x"431D",x"3384",x"0001",x"41F5",x"A003",x"FFF0",x"3386",x"0005", -- 07D0-07DF
  x"4781",x"2F16",x"A009",x"2F00",x"A00A",x"42E2",x"0000",x"2F00",x"A009",x"338C",x"0008",x"41EF",x"46C6",x"0004",x"0000",x"4047", -- 07E0-07EF
  x"A00E",x"0010",x"A009",x"436D",x"003C",x"431D",x"3395",x"0006",x"41F5",x"436D",x"339C",x"0002",x"41F5",x"0000",x"B603",x"A007", -- 07F0-07FF
  x"B501",x"2F03",x"429B",x"9002",x"B300",x"2F04",x"B501",x"2F17",x"429B",x"9005",x"B300",x"2D00",x"2F80",x"A009",x"2F80",x"B501", -- 0800-080F
  x"2F05",x"429B",x"9002",x"B300",x"2F00",x"A00A",x"47D1",x"4286",x"B501",x"0010",x"429B",x"9FE2",x"B300",x"339F",x"0004",x"41F5", -- 0810-081F
  x"B501",x"434C",x"33A4",x"0001",x"41F5",x"B501",x"000F",x"A007",x"434C",x"0010",x"A007",x"B603",x"42A9",x"A00B",x"9FCA",x"B200", -- 0820-082F
  x"436D",x"003C",x"431D",x"33A6",x"0007",x"41F5",x"42CF",x"2F00",x"A009",x"A003",x"33B4",x"0008",x"4781",x"2F20",x"A00A",x"B501", -- 0830-083F
</DUMPZ></ok>
BZEIG @ 3000 -1 DUMPZ   ( generiert ByteRAM für P20_FFP.vhd Step_10 ) <ok>
<DUMPZ>
  x"28",x"20",x"7B",x"20",x"7D",x"20",x"43",x"4F",x"4D",x"50",x"49",x"4C",x"45",x"20",x"4D",x"4C", -- 3000-300F
  x"49",x"54",x"20",x"41",x"42",x"53",x"20",x"4C",x"49",x"54",x"2C",x"20",x"28",x"43",x"4F",x"4E", -- 3010-301F
  x"53",x"54",x"41",x"4E",x"54",x"3A",x"29",x"20",x"43",x"4F",x"4E",x"53",x"54",x"41",x"4E",x"54", -- 3020-302F
  x"20",x"4B",x"45",x"59",x"41",x"44",x"52",x"20",x"53",x"50",x"20",x"52",x"50",x"20",x"50",x"43", -- 3030-303F
  x"20",x"58",x"42",x"49",x"54",x"20",x"53",x"4D",x"55",x"44",x"47",x"45",x"42",x"49",x"54",x"20", -- 3040-304F
  x"52",x"50",x"30",x"20",x"49",x"52",x"41",x"4D",x"41",x"44",x"52",x"20",x"4A",x"52",x"41",x"4D", -- 3050-305F
  x"41",x"44",x"52",x"20",x"58",x"4F",x"46",x"46",x"20",x"43",x"52",x"42",x"5A",x"45",x"49",x"47", -- 3060-306F
  x"20",x"43",x"52",x"44",x"50",x"20",x"42",x"41",x"53",x"45",x"20",x"54",x"49",x"42",x"20",x"49", -- 3070-307F
  x"4E",x"31",x"20",x"49",x"4E",x"32",x"20",x"49",x"4E",x"33",x"20",x"49",x"4E",x"34",x"20",x"45", -- 3080-308F
  x"52",x"52",x"4F",x"52",x"4E",x"52",x"20",x"44",x"50",x"20",x"53",x"54",x"41",x"54",x"20",x"4C", -- 3090-309F
  x"46",x"41",x"20",x"42",x"41",x"4E",x"46",x"20",x"42",x"5A",x"45",x"49",x"47",x"20",x"44",x"50", -- 30A0-30AF
  x"4D",x"45",x"52",x"4B",x"20",x"43",x"53",x"50",x"20",x"44",x"55",x"42",x"49",x"54",x"20",x"4C", -- 30B0-30BF
  x"4F",x"43",x"41",x"4C",x"41",x"44",x"52",x"45",x"53",x"53",x"45",x"20",x"56",x"45",x"52",x"53", -- 30C0-30CF
  x"49",x"4F",x"4E",x"20",x"52",x"45",x"54",x"55",x"52",x"4E",x"20",x"28",x"4D",x"43",x"4F",x"44", -- 30D0-30DF
  x"45",x"3A",x"29",x"20",x"4D",x"43",x"4F",x"44",x"45",x"20",x"4D",x"49",x"4E",x"55",x"53",x"20", -- 30E0-30EF
  x"55",x"2B",x"20",x"55",x"2A",x"20",x"30",x"3D",x"20",x"30",x"4C",x"54",x"20",x"45",x"4D",x"49", -- 30F0-30FF
  x"54",x"43",x"4F",x"44",x"45",x"20",x"4E",x"4F",x"54",x"20",x"41",x"4E",x"44",x"20",x"4F",x"52", -- 3100-310F
  x"20",x"4D",x"2B",x"20",x"21",x"20",x"40",x"20",x"53",x"57",x"41",x"50",x"20",x"4F",x"56",x"45", -- 3110-311F
  x"52",x"20",x"44",x"55",x"50",x"20",x"52",x"4F",x"54",x"20",x"44",x"52",x"4F",x"50",x"20",x"32", -- 3120-312F
  x"53",x"57",x"41",x"50",x"20",x"32",x"4F",x"56",x"45",x"52",x"20",x"32",x"44",x"55",x"50",x"20", -- 3130-313F
  x"32",x"44",x"52",x"4F",x"50",x"20",x"4E",x"4F",x"4F",x"50",x"20",x"42",x"2C",x"20",x"5A",x"2C", -- 3140-314F
  x"20",x"28",x"57",x"4F",x"52",x"44",x"3A",x"29",x"20",x"57",x"4F",x"52",x"44",x"3A",x"20",x"22", -- 3150-315F
  x"20",x"2E",x"22",x"20",x"48",x"45",x"52",x"45",x"20",x"4A",x"52",x"42",x"49",x"54",x"20",x"4A", -- 3160-316F
  x"52",x"30",x"42",x"49",x"54",x"20",x"58",x"53",x"45",x"54",x"42",x"54",x"20",x"41",x"4C",x"4C", -- 3170-317F
  x"4F",x"54",x"20",x"42",x"52",x"41",x"4E",x"43",x"48",x"2C",x"20",x"30",x"42",x"52",x"41",x"4E", -- 3180-318F
  x"43",x"48",x"2C",x"20",x"42",x"45",x"47",x"49",x"4E",x"20",x"41",x"47",x"41",x"49",x"4E",x"20", -- 3190-319F
  x"55",x"4E",x"54",x"49",x"4C",x"20",x"49",x"46",x"20",x"45",x"4E",x"44",x"5F",x"49",x"46",x"20", -- 31A0-31AF
  x"45",x"4C",x"53",x"45",x"20",x"57",x"48",x"49",x"4C",x"45",x"20",x"52",x"45",x"50",x"45",x"41", -- 31B0-31BF
  x"54",x"20",x"43",x"40",x"20",x"43",x"21",x"20",x"31",x"2B",x"20",x"31",x"2D",x"20",x"4D",x"2D", -- 31C0-31CF
  x"20",x"3D",x"20",x"4C",x"54",x"20",x"3E",x"20",x"4D",x"2A",x"20",x"42",x"59",x"45",x"20",x"42", -- 31D0-31DF
  x"59",x"45",x"20",x"20",x"2B",x"21",x"20",x"52",x"3E",x"20",x"3E",x"52",x"20",x"52",x"20",x"2C", -- 31E0-31EF
  x"20",x"45",x"58",x"45",x"43",x"55",x"54",x"45",x"20",x"4B",x"45",x"59",x"20",x"45",x"4D",x"49", -- 31F0-31FF
  x"54",x"20",x"53",x"48",x"4C",x"31",x"36",x"20",x"44",x"49",x"47",x"20",x"54",x"59",x"50",x"45", -- 3200-320F
  x"20",x"48",x"47",x"2E",x"20",x"4D",x"2E",x"20",x"4D",x"3F",x"20",x"43",x"52",x"20",x"66",x"6C", -- 3210-321F
  x"3E",x"20",x"2F",x"66",x"6C",x"3E",x"20",x"66",x"72",x"3E",x"20",x"2F",x"66",x"72",x"3E",x"20", -- 3220-322F
  x"46",x"45",x"48",x"4C",x"45",x"52",x"54",x"45",x"58",x"54",x"20",x"44",x"49",x"53",x"41",x"42", -- 3230-323F
  x"4C",x"45",x"20",x"77",x"65",x"69",x"74",x"65",x"72",x"20",x"6E",x"61",x"63",x"68",x"20",x"54", -- 3240-324F
  x"61",x"73",x"74",x"65",x"20",x"45",x"53",x"43",x"41",x"50",x"45",x"20",x"20",x"45",x"52",x"52", -- 3250-325F
  x"4F",x"52",x"20",x"3F",x"3F",x"3F",x"20",x"46",x"45",x"48",x"4C",x"45",x"52",x"54",x"45",x"58", -- 3260-326F
  x"54",x"20",x"45",x"52",x"52",x"4F",x"52",x"20",x"2D",x"20",x"46",x"65",x"68",x"6C",x"65",x"72", -- 3270-327F
  x"20",x"4E",x"75",x"6D",x"6D",x"65",x"72",x"20",x"20",x"43",x"53",x"50",x"21",x"20",x"43",x"53", -- 3280-328F
  x"50",x"3F",x"20",x"4C",x"4F",x"43",x"41",x"4C",x"20",x"45",x"4E",x"44",x"5F",x"4C",x"4F",x"43", -- 3290-329F
  x"41",x"4C",x"20",x"4C",x"30",x"20",x"4C",x"31",x"20",x"4C",x"32",x"20",x"4C",x"33",x"20",x"4C", -- 32A0-32AF
  x"34",x"20",x"4C",x"35",x"20",x"4C",x"36",x"20",x"4C",x"37",x"20",x"27",x"20",x"49",x"4E",x"43", -- 32B0-32BF
  x"52",x"34",x"20",x"4B",x"45",x"59",x"5F",x"49",x"4E",x"54",x"20",x"4B",x"45",x"59",x"43",x"4F", -- 32C0-32CF
  x"44",x"45",x"32",x"20",x"45",x"58",x"50",x"45",x"43",x"54",x"20",x"44",x"49",x"47",x"49",x"54", -- 32D0-32DF
  x"20",x"4E",x"55",x"4D",x"42",x"45",x"52",x"20",x"57",x"4F",x"52",x"44",x"20",x"5A",x"3D",x"20", -- 32E0-32EF
  x"46",x"49",x"4E",x"44",x"20",x"4C",x"43",x"46",x"41",x"20",x"43",x"4F",x"4D",x"50",x"49",x"4C", -- 32F0-32FF
  x"45",x"2C",x"20",x"43",x"52",x"45",x"41",x"54",x"45",x"20",x"49",x"4E",x"54",x"45",x"52",x"50", -- 3300-330F
  x"52",x"45",x"54",x"20",x"51",x"55",x"49",x"54",x"20",x"2F",x"6F",x"6B",x"3E",x"20",x"6F",x"6B", -- 3310-331F
  x"20",x"6F",x"6B",x"3E",x"20",x"2F",x"6F",x"6B",x"3E",x"20",x"6F",x"6B",x"20",x"53",x"54",x"41", -- 3320-332F
  x"52",x"54",x"20",x"46",x"4F",x"52",x"54",x"59",x"2D",x"46",x"4F",x"52",x"54",x"48",x"20",x"53", -- 3330-333F
  x"4D",x"55",x"44",x"47",x"45",x"20",x"28",x"49",x"4D",x"4D",x"45",x"44",x"49",x"41",x"54",x"45", -- 3340-334F
  x"3A",x"29",x"20",x"28",x"43",x"4F",x"4D",x"50",x"49",x"4C",x"45",x"3A",x"29",x"20",x"28",x"3A", -- 3350-335F
  x"29",x"20",x"49",x"4D",x"4D",x"45",x"44",x"49",x"41",x"54",x"45",x"3A",x"20",x"43",x"4F",x"4D", -- 3360-336F
  x"50",x"49",x"4C",x"45",x"3A",x"20",x"3A",x"20",x"3B",x"20",x"4C",x"47",x"2E",x"20",x"4E",x"47", -- 3370-337F
  x"2E",x"20",x"78",x"20",x"2C",x"20",x"44",x"55",x"4D",x"50",x"5A",x"20",x"27",x"20",x"53",x"54", -- 3380-338F
  x"41",x"52",x"54",x"20",x"20",x"44",x"55",x"4D",x"50",x"5A",x"3E",x"20",x"20",x"20",x"20",x"20", -- 3390-339F
  x"2D",x"2D",x"20",x"20",x"2D",x"20",x"2F",x"44",x"55",x"4D",x"50",x"5A",x"3E",x"20",x"52",x"41", -- 33A0-33AF
</DUMPZ></ok>
</sekt> 
 <ok></ok>
( -------- zwischen diesen beiden Zeilen ist momentan die Aufteilung: hier endet FFINIT1.txt und <ok></ok>
( ------------------------------------------------------------- und hier beginnt FFINIT2.txt <ok></ok>
<sekt inhalt="Variablen"> 
2F20 CONSTANT RAMP1 RAMP1 1+ RAMP1 ! ( bis 2F17 sind neu BASE TIB ... ) <ok></ok><fl>083A 33AE </fl><fr>083F 33B4 </fr>
: VARIABLE RAMP1 @ DUP CONSTANT DUP 1+ RAMP1 ! ! ; <ok></ok><fl>083F 33B4 </fl><fr>084D 33BD </fr>
</sekt> 
 <ok></ok>
<sekt inhalt="noch paar hilfreiche Funktionen"> 
: MOVE ( adr1 adr2 n --> ) <ok></ok><fl>084D 33BD </fl><fr>0851 33C2 </fr>
  BEGIN DUP WHILE ROT ROT OVER @ OVER ! SWAP 1+ SWAP 1+ ROT 1- REPEAT DROP 2DROP ; <ok></ok><fl>0851 33C2 </fl><fr>0863 33C2 </fr>
: FILL ( adr n b --> ) <ok></ok><fl>0863 33C2 </fl><fr>0867 33C7 </fr>
  ROT ROT BEGIN DUP WHILE ROT ROT 2DUP ! 1+ ROT 1- REPEAT DROP 2DROP ; <ok></ok><fl>0867 33C7 </fl><fr>0876 33C7 </fr>
 <ok></ok>
: DUMP ( addr n --> ) <ok></ok><fl>0876 33C7 </fl><fr>087A 33CC </fr>
  BEGIN SWAP ( CR DUP M. ) DUP @ M. 1+ SWAP 1- DUP 0= UNTIL 2DROP ; <ok></ok><fl>087A 33CC </fl><fr>0886 33CC </fr>
 <ok></ok>
: MAX ( a b --> c ) <ok></ok><fl>0886 33CC </fl><fr>088A 33D0 </fr>
  2DUP LT IF SWAP END_IF DROP ; <ok></ok><fl>088A 33D0 </fl><fr>0890 33D0 </fr>
: MIN ( a b --> c ) <ok></ok><fl>0890 33D0 </fl><fr>0894 33D4 </fr>
  2DUP > IF SWAP END_IF DROP ; <ok></ok><fl>0894 33D4 </fl><fr>089A 33D4 </fr>
</sekt> 
 <ok></ok>
<sekt inhalt="Rechenoperationen zu verschiedenen Datentypen"> 
( leere Tabellenfelder sind nicht in Verwendung ) <ok></ok>
<table border="1"> 
  <tr><th>Rechenoperation</th>        <th>16-Bit-Arithmetik</th>        <th>große ganze Zahlen</th></tr> <ok></ok>
  <tr><td>absoluter Betrag</td>       <td>ABS ( a --> |a| ) </td>       <td>ABS ( n --> |n| )</td></tr> <ok></ok>
  <tr><td>Addition</td>               <td>M+ ( a b --> a+b ) </td>      <td>+ ( m n --> m+n ) </td></tr> <ok></ok>
  <tr><td>Subtraktion</td>            <td>M- ( a b --> a-b ) </td>      <td>- ( m n --> m-n ) </td></tr> <ok></ok>
  <tr><td>Stapelspitze ausgeben</td>  <td>M. ( a -->  /string/ )</td>   <td>. ( m -->  /string/ )</td></tr> <ok></ok>
  <tr><td>Speicherinhalt ausgeben</td><td>M? ( adr -->  /string/ )</td> <td>? ( adr -->  /string/ )</td></tr> <ok></ok>
  <tr><td>Addition mit Übertrag</td>  <td>U+ ( u a b --> u' a+b+u ) </td><td></td></tr> <ok></ok>
  <tr><td>Multiplikation mit Übertrag</td><td>U* ( u a b --> u' a*b+u ) </td><td></td></tr> <ok></ok>
  <tr><td>Inkrementieren</td>         <td>1+ ( a --> a+1 ) </td>        <td></td></tr> <ok></ok>
  <tr><td>Dekrementieren</td>         <td>1- ( a --> a+1 ) </td>        <td></td></tr> <ok></ok>
  <tr><td>kleiner als "&lt;"</td>     <td>LT ( a b --> a&lt;b )</td>    <td></td></tr> <ok></ok>
  <tr><td>größer als</td>             <td>> ( a b --> a>b )</td>        <td></td></tr> <ok></ok>
  <tr><td>Gleichheit</td>             <td>= ( a b --> a=b )</td>        <td></td></tr> <ok></ok>
  <tr><td>Maximum</td>                <td>MAX ( a b --> max )</td>      <td></td></tr> <ok></ok>
  <tr><td>Minimum</td>                <td>MIN ( a b --> min )</td>      <td></td></tr> <ok></ok>
  <tr><td>kleiner als Null</td>       <td>0LT ( a --> a&lt;0 )</td>    <td>0LT ( a --> a&lt;0 )</td></tr> <ok></ok>
  <tr><td>gleich Null</td>            <td>0= ( a --> a=0 )</td>        <td>0= ( a --> a=0 )</td></tr> <ok></ok>
  <tr><td>Division mit Rest</td>      <td>M/MOD ( a b --> q r )</td>    <td>/MOD ( m n --> q r )</td></tr> <ok></ok>
  <tr><td>Division</td>               <td></td>                         <td>/ ( m n --> q )</td></tr> <ok></ok>
  <tr><td>Rest</td>                   <td></td>                         <td>MOD ( m n --> r )</td></tr> <ok></ok>
  <tr><td>Multiplikation</td>         <td></td>                         <td>* ( m n --> m*n )</td></tr> <ok></ok>
  <tr><td>größter gemeinsamer Teiler</td><td></td>                      <td>GGT ( m n --> ggt )</td></tr> <ok></ok>
  <tr><td>Kürzen</td>                 <td></td>                         <td>BK ( m n --> m/ggt n/ggt )</td></tr> <ok></ok>
  <tr><td>Potenzieren</td>            <td></td>                         <td>^ ( m n --> m^n )</td></tr> <ok></ok>
  </table> <ok></ok>
</sekt> 
 <ok></ok>
<sekt inhalt="Multiplikation"> 
A017 MCODE MULT_I <ok></ok><fl>089A 33D4 </fl><fr>08A0 33DB </fr>
A018 MCODE MULT_II <ok></ok><fl>08A0 33DB </fl><fr>08A6 33E3 </fr>
: SUPERMULT ( a u adrc adrb n --> a u' adrc' adrb' ) <ok></ok><fl>08A6 33E3 </fl><fr>08AA 33ED </fr>
  >R <ok></ok><fl>08AA 33ED </fl><fr>08AB 33ED </fr>
  BEGIN MULT_I MULT_II UNTIL <ok></ok><fl>08AB 33ED </fl><fr>08AE 33ED </fr>
  R> DROP ; ( /;> ) <ok></ok><fl>08AE 33ED </fl><fr>08B1 33ED </fr>
 <ok></ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
1401 CONSTANT A <ok></ok><fl>08B1 33ED </fl><fr>08B6 33EF </fr>
1601 CONSTANT B <ok></ok><fl>08B6 33EF </fl><fr>08BB 33F1 </fr>
1801 CONSTANT C <ok></ok><fl>08BB 33F1 </fl><fr>08C0 33F3 </fr>
A 1FF 1111 FILL <ok></ok>
B 1FF 1111 FILL <ok></ok>
C 3FF 0000 FILL <ok></ok>
 <ok></ok>
1111 0 C B 4 SUPERMULT M. M. M. M. <ok>1605 1805 0123 1111 </ok>
C 8 DUMP <ok>4321 4444 4444 4444 0000 0000 0000 0000 </ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
: SMUL ( s1 l1 x1 s2 l2 x2 x3 --> s3 l3 x3) <ok></ok><fl>08C0 33F3 </fl><fr>08C4 33F8 </fr>
       ( L0 L1 L2 L3 L4 L5 L6 ) <ok></ok><fl>08C4 33F8 </fl><fr>08C4 33F8 </fr>
  7 LOCAL <ok></ok><fl>08C4 33F8 </fl><fr>08C6 33F8 </fr>
  L6 ! L5 ! L4 ! L3 ! L2 ! L1 ! L0 ! <ok></ok><fl>08C6 33F8 </fl><fr>08D4 33F8 </fr>
  L0 @ L3 @ IF NOT END_IF <ok></ok><fl>08D4 33F8 </fl><fr>08DA 33F8 </fr>
  L1 @ L4 @ M+ 1+ <ok></ok><fl>08DA 33F8 </fl><fr>08E0 33F8 </fr>
  L6 @ OVER 0 FILL <ok></ok><fl>08E0 33F8 </fl><fr>08E5 33F8 </fr>
  L6 @  <ok></ok><fl>08E5 33F8 </fl><fr>08E7 33F8 </fr>
  DUP L2 @ L1 @ BEGIN <ok></ok><fl>08E7 33F8 </fl><fr>08EC 33F8 </fr>
    0 2OVER @ ROT ROT L5 @ L4 @ ( ... a u  adrc  adrb n ) <ok></ok><fl>08EC 33F8 </fl><fr>08F5 33F8 </fr>
    SUPERMULT                   ( ... a u' adrc' adrb' ) <ok></ok><fl>08F5 33F8 </fl><fr>08F6 33F8 </fr>
    DROP ! DROP <ok></ok><fl>08F6 33F8 </fl><fr>08F9 33F8 </fr>
 <ok></ok><fl>08F9 33F8 </fl><fr>08F9 33F8 </fr>
(    vorher: ) <ok></ok><fl>08F9 33F8 </fl><fr>08F9 33F8 </fr>
(    L4 @ 0  <ok></ok><fl>08F9 33F8 </fl><fr>08F9 33F8 </fr>
(    BEGIN OVER WHILE SWAP 1- SWAP <ok></ok><fl>08F9 33F8 </fl><fr>08F9 33F8 </fr>
(      0 SWAP  <ok></ok><fl>08F9 33F8 </fl><fr>08F9 33F8 </fr>
(      L6 @ @ L5 @ @ L2 @ @ U* D+  <ok></ok><fl>08F9 33F8 </fl><fr>08F9 33F8 </fr>
(      L6 @ DUP 1+ L6 ! ! <ok></ok><fl>08F9 33F8 </fl><fr>08F9 33F8 </fr>
(      L5 @ 1+ L5 ! <ok></ok><fl>08F9 33F8 </fl><fr>08F9 33F8 </fr>
(      REPEAT <ok></ok><fl>08F9 33F8 </fl><fr>08F9 33F8 </fr>
(    L6 @ ! DROP <ok></ok><fl>08F9 33F8 </fl><fr>08F9 33F8 </fr>
 <ok></ok><fl>08F9 33F8 </fl><fr>08F9 33F8 </fr>
    ROT 1+ ROT 1+ ROT 1- ( 1 L2 +! 1 L6 +! <ok></ok><fl>08F9 33F8 </fl><fr>08FF 33F8 </fr>
    DUP 0= UNTIL DROP 2DROP <ok></ok><fl>08FF 33F8 </fl><fr>0904 33F8 </fr>
  END_LOCAL <ok></ok><fl>0904 33F8 </fl><fr>0905 33F8 </fr>
  ; <ok></ok><fl>0905 33F8 </fl><fr>0906 33F8 </fr>
 <ok></ok>
C 8 0 FILL <ok></ok>
0 2 A 0 2 B C SMUL M. M. M. <ok>1801 0005 0000 </ok>
C 8 DUMP <ok>4321 8765 4567 0123 0000 0000 0000 0000 </ok>
 <ok></ok>
C 201 0 FILL <ok></ok>
0 100 A 0 100 B C SMUL M. M. M. <ok>1801 0201 0000 </ok>
C 8 DUMP <ok>4321 8765 CBA9 0FED 5432 9876 DCBA 20FE </ok>
 <ok></ok>
C 101 0 FILL <ok></ok>
0 80 A 0 80 B C SMUL M. M. M. <ok>1801 0101 0000 </ok>
C 8 DUMP <ok>4321 8765 CBA9 0FED 5432 9876 DCBA 20FE </ok>
 <ok></ok>
( C 2001 0 FILL <ok></ok>
( 0 1000 A 0 1000 B C SMUL M. M. M. <ok></ok>
( C 8 DUMP <ok></ok>
</sekt> 
 <ok></ok>
<sekt inhalt="Addition">  
: ADDIER ( s1 l1 x1 s2 l2 x2 x3 --> s3 l3 x3 ) <ok></ok><fl>0906 33F8 </fl><fr>090A 33FF </fr>
         ( L0 L1 L2 L3 L4 L5 L6 ) <ok></ok><fl>090A 33FF </fl><fr>090A 33FF </fr>
  7 LOCAL <ok></ok><fl>090A 33FF </fl><fr>090C 33FF </fr>
  L6 ! L5 ! L4 ! L3 ! L2 ! L1 ! L0 ! <ok></ok><fl>090C 33FF </fl><fr>091A 33FF </fr>
  L0 @ L1 @ L4 @ MAX 1+ L6 @ <ok></ok><fl>091A 33FF </fl><fr>0924 33FF </fr>
  L0 @ L3 @ = IF <ok></ok><fl>0924 33FF </fl><fr>092A 33FF </fr>
    0 L1 @ L4 @ MAX 0 BEGIN ROT <ok></ok><fl>092A 33FF </fl><fr>0932 33FF </fr>
                 ( hier ist mal ! @ gewesen!!! ) <ok></ok><fl>0932 33FF </fl><fr>0932 33FF </fr>
      OVER DUP L1 @ LT IF L2 @ DUP @ SWAP 1+ L2 ! ELSE 0 END_IF <ok></ok><fl>0932 33FF </fl><fr>0942 33FF </fr>
      SWAP L4 @ LT IF L5 @ DUP @ SWAP 1+ L5 ! ELSE 0 END_IF <ok></ok><fl>0942 33FF </fl><fr>0951 33FF </fr>
      U+ L6 @ DUP 1+ L6 ! ! <ok></ok><fl>0951 33FF </fl><fr>0959 33FF </fr>
      ROT ROT 1+ 2DUP M- 0= UNTIL 2DROP L6 @ ! <ok></ok><fl>0959 33FF </fl><fr>0964 33FF </fr>
    ELSE SWAP 1 M- SWAP <ok></ok><fl>0964 33FF </fl><fr>0969 33FF </fr>
      1 L1 @ L4 @ MAX 0 BEGIN ROT <ok></ok><fl>0969 33FF </fl><fr>0971 33FF </fr>
        OVER DUP L1 @ LT IF L2 @ DUP @ SWAP 1+ L2 ! ELSE 0 END_IF <ok></ok><fl>0971 33FF </fl><fr>0981 33FF </fr>
        SWAP L4 @ LT IF L5 @ DUP @ SWAP 1+ L5 ! NOT ELSE -1 END_IF <ok></ok><fl>0981 33FF </fl><fr>0991 33FF </fr>
        U+ L6 @ DUP 1+ L6 ! ! <ok></ok><fl>0991 33FF </fl><fr>0999 33FF </fr>
        ROT ROT 1+ 2DUP M- 0= UNTIL 2DROP ( DUP M. <ok></ok><fl>0999 33FF </fl><fr>09A1 33FF </fr>
        0= IF DUP L6 ! <ok></ok><fl>09A1 33FF </fl><fr>09A6 33FF </fr>
          ROT NOT ROT ROT <ok></ok><fl>09A6 33FF </fl><fr>09AA 33FF </fr>
          1 L1 @ L4 @ MAX 0 BEGIN ROT <ok></ok><fl>09AA 33FF </fl><fr>09B2 33FF </fr>
            0 L6 @ @ NOT U+  <ok></ok><fl>09B2 33FF </fl><fr>09B8 33FF </fr>
            L6 @ DUP 1+ L6 ! ! <ok></ok><fl>09B8 33FF </fl><fr>09BF 33FF </fr>
            ROT ROT 1+ 2DUP M- 0= UNTIL 2DROP DROP <ok></ok><fl>09BF 33FF </fl><fr>09C8 33FF </fr>
          END_IF <ok></ok><fl>09C8 33FF </fl><fr>09C8 33FF </fr>
      END_IF  <ok></ok><fl>09C8 33FF </fl><fr>09C8 33FF </fr>
  END_LOCAL ; <ok></ok><fl>09C8 33FF </fl><fr>09CA 33FF </fr>
 <ok></ok>
 <ok></ok>
C 8 0 FILL <ok></ok>
0 2 A 0 2 B C ADDIER M. M. M. <ok>1801 0003 0000 </ok>
C 8 DUMP <ok>2222 2222 0000 0000 0000 0000 0000 0000 </ok>
 <ok></ok>
C 8 0 FILL <ok></ok>
0 5 A 0 7 B C ADDIER M. M. M. <ok>1801 0008 0000 </ok>
C 8 DUMP <ok>2222 2222 2222 2222 2222 1111 1111 0000 </ok>
 <ok></ok>
C 8 0 FILL <ok></ok>
0 7 A 0 3 B C ADDIER M. M. M. <ok>1801 0008 0000 </ok>
C 8 DUMP <ok>2222 2222 2222 1111 1111 1111 1111 0000 </ok>
 <ok></ok>
A 8 FFFF FILL <ok></ok>
C 8 0 FILL <ok></ok>
0 2 A 0 2 B C ADDIER M. M. M. <ok>1801 0003 0000 </ok>
C 8 DUMP ( 1110 1111 0001 0000 ) <ok>1110 1111 0001 0000 0000 0000 0000 0000 </ok>
 <ok></ok>
 <ok></ok>
A 8 2222 FILL <ok></ok>
C 8 0 FILL <ok></ok>
0 2 A -1 2 B C ADDIER M. M. M. <ok>1801 0002 0000 </ok>
C 8 DUMP <ok>1111 1111 0000 0000 0000 0000 0000 0000 </ok>
 <ok></ok>
C 8 0 FILL <ok></ok>
-1 2 A 0 2 B C ADDIER M. M. M. <ok>1801 0002 FFFF </ok>
C 8 DUMP <ok>1111 1111 0000 0000 0000 0000 0000 0000 </ok>
 <ok></ok>
C 8 0 FILL <ok></ok>
0 2 B -1 2 A C ADDIER M. M. M. <ok>1801 0002 FFFF </ok>
C 8 DUMP <ok>1111 1111 0000 0000 0000 0000 0000 0000 </ok>
 <ok></ok>
C 8 0 FILL <ok></ok>
-1 2 B 0 2 A C ADDIER M. M. M. <ok>1801 0002 0000 </ok>
C 8 DUMP <ok>1111 1111 0000 0000 0000 0000 0000 0000 </ok>
</sekt> 
 <ok></ok>
<sekt inhalt="Division"> 
A014 MCODE DI32  <ok></ok><fl>09CA 33FF </fl><fr>09D0 3404 </fr>
: DIV32 ( a b d --> r q ) <ok></ok><fl>09D0 3404 </fl><fr>09D4 340A </fr>
  10 BEGIN >R DI32 R> 1- DUP 0= UNTIL 2DROP ; <ok></ok><fl>09D4 340A </fl><fr>09DE 340A </fr>
: M/MOD ( b d --> r q ) 0 ROT ROT DIV32 ; <ok></ok><fl>09DE 340A </fl><fr>09E7 3410 </fr>
 <ok></ok>
 <ok></ok>
 <ok></ok>
: SDIV ( s1 l1 x1 s2 l2 x2 x3 --> s3 l3 x3 s4 l4 r4 ) <ok></ok><fl>09E7 3410 </fl><fr>09EB 3415 </fr>
       ( L0 L1 L2 L3 L4 L5 L6 ) <ok></ok><fl>09EB 3415 </fl><fr>09EB 3415 </fr>
  7 LOCAL <ok></ok><fl>09EB 3415 </fl><fr>09ED 3415 </fr>
  L6 ! L5 ! L4 ! L3 ! L2 ! L1 ! L0 ! <ok></ok><fl>09ED 3415 </fl><fr>09FB 3415 </fr>
L1 @ L4 @ LT IF L0 @ L1 @ L2 @ 0 0 0 ELSE <ok></ok><fl>09FB 3415 </fl><fr>0A0B 3415 </fr>
  L1 @ 0 BEGIN <ok></ok><fl>0A0B 3415 </fl><fr>0A0E 3415 </fr>
    L2 @ OVER M+ @ NOT OVER L6 @ M+ ! <ok></ok><fl>0A0E 3415 </fl><fr>0A19 3415 </fr>
    1+ 2DUP M- 0= UNTIL 2DROP <ok></ok><fl>0A19 3415 </fl><fr>0A1F 3415 </fr>
  L6 @ L1 @ M+ L4 @ M- L2 ! <ok></ok><fl>0A1F 3415 </fl><fr>0A29 3415 </fr>
  -1 L6 @ L1 @ M+ ! 1 L1 +! <ok></ok><fl>0A29 3415 </fl><fr>0A33 3415 </fr>
  L1 @ L4 @ M- 0 BEGIN <ok></ok><fl>0A33 3415 </fl><fr>0A39 3415 </fr>
    L2 @ L4 @ M+ @ NOT <ok></ok><fl>0A39 3415 </fl><fr>0A40 3415 </fr>
    L2 @ L4 @ M+ 1- @ NOT <ok></ok><fl>0A40 3415 </fl><fr>0A48 3415 </fr>
    L5 @ L4 @ M+ 1- @      ( a b c ) <ok></ok><fl>0A48 3415 </fl><fr>0A4F 3415 </fr>
    DIV32  <ok></ok><fl>0A4F 3415 </fl><fr>0A50 3415 </fr>
    SWAP DROP              ( q ) <ok></ok><fl>0A50 3415 </fl><fr>0A52 3415 </fr>
    DUP L2 @ L4 @ M+ 1+ ! <ok></ok><fl>0A52 3415 </fl><fr>0A5A 3415 </fr>
    0 L2 @ L5 @ L4 @       ( c ü adrc adrb n ) <ok></ok><fl>0A5A 3415 </fl><fr>0A61 3415 </fr>
    SUPERMULT <ok></ok><fl>0A61 3415 </fl><fr>0A62 3415 </fr>
    2DROP SWAP DROP <ok></ok><fl>0A62 3415 </fl><fr>0A65 3415 </fr>
    0 L2 @ L4 @ M+ @ U+ L2 @ L4 @ M+ ! <ok></ok><fl>0A65 3415 </fl><fr>0A73 3415 </fr>
BEGIN WHILE <ok></ok><fl>0A73 3415 </fl><fr>0A74 3415 </fr>
 1 L4 @ 0 BEGIN ROT <ok></ok><fl>0A74 3415 </fl><fr>0A79 3415 </fr>
   OVER L2 @ OVER M+ @ <ok></ok><fl>0A79 3415 </fl><fr>0A7F 3415 </fr>
   SWAP L5 @ M+ @ NOT <ok></ok><fl>0A7F 3415 </fl><fr>0A85 3415 </fr>
   U+ SWAP >R OVER L2 @ M+ ! R> <ok></ok><fl>0A85 3415 </fl><fr>0A8E 3415 </fr>
   ROT ROT 1+ 2DUP M- 0= UNTIL 2DROP <ok></ok><fl>0A8E 3415 </fl><fr>0A96 3415 </fr>
(   0 L2 @ L4 @ M+ @ U+ L2 @ L4 @ M+ ! <ok></ok><fl>0A96 3415 </fl><fr>0A96 3415 </fr>
(   DUP M. 7 EMIT <ok></ok><fl>0A96 3415 </fl><fr>0A96 3415 </fr>
 -1 L2 @ L4 @ M+ 1+ +! <ok></ok><fl>0A96 3415 </fl><fr>0A9E 3415 </fr>
REPEAT <ok></ok><fl>0A9E 3415 </fl><fr>0A9F 3415 </fr>
    -1 L2 +! <ok></ok><fl>0A9F 3415 </fl><fr>0AA2 3415 </fr>
    1+ 2DUP M- 0= UNTIL 2DROP <ok></ok><fl>0AA2 3415 </fl><fr>0AA8 3415 </fr>
  L4 @ 0 BEGIN <ok></ok><fl>0AA8 3415 </fl><fr>0AAB 3415 </fr>
    L6 @ OVER M+ @ NOT OVER L6 @ M+ ! <ok></ok><fl>0AAB 3415 </fl><fr>0AB6 3415 </fr>
    1+ 2DUP M- 0= UNTIL 2DROP <ok></ok><fl>0AB6 3415 </fl><fr>0ABC 3415 </fr>
  L4 @ L6 @ 1- ! <ok></ok><fl>0ABC 3415 </fl><fr>0AC2 3415 </fr>
  L1 @ L4 @ M- L6 @ L4 @ M+ ! <ok></ok><fl>0AC2 3415 </fl><fr>0ACD 3415 </fr>
( CR ." ++" L6 @ L1 @ 1+ DUMP ." ++" <ok></ok><fl>0ACD 3415 </fl><fr>0ACD 3415 </fr>
  L0 @ L4 @ L6 @ <ok></ok><fl>0ACD 3415 </fl><fr>0AD3 3415 </fr>
  L0 @ L3 @ IF NOT END_IF <ok></ok><fl>0AD3 3415 </fl><fr>0AD9 3415 </fr>
  L1 @ L4 @ M- <ok></ok><fl>0AD9 3415 </fl><fr>0ADE 3415 </fr>
  L6 @ L4 @ M+ 1+ <ok></ok><fl>0ADE 3415 </fl><fr>0AE4 3415 </fr>
 END_IF <ok></ok><fl>0AE4 3415 </fl><fr>0AE4 3415 </fr>
  END_LOCAL <ok></ok><fl>0AE4 3415 </fl><fr>0AE5 3415 </fr>
  ; <ok></ok><fl>0AE5 3415 </fl><fr>0AE6 3415 </fr>
 <ok></ok>
( 333333 4 ^ 10 * VARIABLE NA <ok></ok>
( 333333 DUP * 10 * VARIABLE NB <ok></ok>
( NA @ 10 DUMP <ok></ok>
( NA @ NB @ 2OPERANDEN->2SLX OVER M. DUP M. SDIV <ok></ok>
 <ok></ok>
654321 A ! <ok></ok>
234567 A 1+ ! <ok></ok>
000001 A 2 M+ ! <ok></ok>
432101 B ! <ok></ok>
A98765 B 1+ ! <ok></ok>
 <ok></ok>
0 3 A 0 2 B C SMUL M. M. M. <ok>1801 0006 0000 </ok>
C 8 DUMP <ok>8421 7813 0017 AC1A 0000 0000 0000 0000 </ok>
 <ok></ok>
0 4 C 0 2 B A SDIV M. M. M. M. M. M. <ok>1404 0003 0000 1401 0002 0000 </ok>
A 8 DUMP <ok>0000 0000 0003 4321 4567 0001 2222 2222 </ok>
</sekt> 
 <ok></ok>
<sekt inhalt="Zahlenspeicher"> 
0 VARIABLE OPERAND1 <ok></ok><fl>0AE6 3415 </fl><fr>0AEB 341E </fr>
0 VARIABLE OPERAND2 <ok></ok><fl>0AEB 341E </fl><fr>0AF0 3427 </fr>
1800 VARIABLE ERGEBNIS <ok></ok><fl>0AF0 3427 </fl><fr>0AF5 3430 </fr>
1800 VARIABLE ZAHLENSPEICHER <ok></ok><fl>0AF5 3430 </fl><fr>0AFA 343F </fr>
2000 VARIABLE SPEICHERENDE ( wird in INIT aktualisiert ) <ok></ok><fl>0AFA 343F </fl><fr>0AFF 344C </fr>
0 VARIABLE SCHIEB <ok></ok><fl>0AFF 344C </fl><fr>0B04 3453 </fr>
0 VARIABLE UBIT <ok></ok><fl>0B04 3453 </fl><fr>0B09 3458 </fr>
 <ok></ok>
: TRIM ( sz lz az --> sz lz' az ) <ok></ok><fl>0B09 3458 </fl><fr>0B0D 345D </fr>
  SWAP 2DUP M+ 1- ( sz az lz ez  <ok></ok><fl>0B0D 345D </fl><fr>0B11 345D </fr>
  BEGIN OVER 0= NOT OVER @ 0= AND WHILE  <ok></ok><fl>0B11 345D </fl><fr>0B19 345D </fr>
    SWAP 1- SWAP 1- REPEAT ( sz az lz' ez' ) <ok></ok><fl>0B19 345D </fl><fr>0B1E 345D </fr>
  DROP SWAP ( sz lz' az ) <ok></ok><fl>0B1E 345D </fl><fr>0B20 345D </fr>
  ; <ok></ok><fl>0B20 345D </fl><fr>0B21 345D </fr>
 <ok></ok>
1A01 20 0 FILL <ok></ok>
1A01 11 7 FILL <ok></ok>
0 20 1A01 TRIM ROT M. SWAP M. M. <ok>0000 0011 1A01 </ok>
 <ok></ok>
: SLX->ERGEBNIS_KURZ ( sz lz az --> z ) <ok></ok><fl>0B21 345D </fl><fr>0B25 3470 </fr>
  1-             ( sz lz az-1 ) <ok></ok><fl>0B25 3470 </fl><fr>0B26 3470 </fr>
  SWAP OVER !    ( sz az-1 ) <ok></ok><fl>0B26 3470 </fl><fr>0B29 3470 </fr>
  04 000 MLIT OR ( sz z )  <ok></ok><fl>0B29 3470 </fl><fr>0B2D 3470 </fr>
  SWAP IF MINUS END_IF ( z ) <ok></ok><fl>0B2D 3470 </fl><fr>0B30 3470 </fr>
  ; <ok></ok><fl>0B30 3470 </fl><fr>0B31 3470 </fr>
 <ok></ok>
: SLX->ERGEBNIS ( sz lz az --> z ) <ok></ok><fl>0B31 3470 </fl><fr>0B35 347E </fr>
  OVER IF <ok></ok><fl>0B35 347E </fl><fr>0B37 347E </fr>
    OVER 1 = ( falls lz=1 ) <ok></ok><fl>0B37 347E </fl><fr>0B3A 347E </fr>
    OVER @ 0C 000 MLIT AND 0= AND ( und az@ kleiner 4000 ) <ok></ok><fl>0B3A 347E </fl><fr>0B42 347E </fr>
    IF @ SWAP DROP SWAP IF MINUS END_IF  <ok></ok><fl>0B42 347E </fl><fr>0B49 347E </fr>
      ELSE SLX->ERGEBNIS_KURZ END_IF ( z ) <ok></ok><fl>0B49 347E </fl><fr>0B4B 347E </fr>
    ELSE 2DROP DROP 0 END_IF ( 0 zum Beispiel bei 1/7 ) <ok></ok><fl>0B4B 347E </fl><fr>0B4F 347E </fr>
  ; <ok></ok><fl>0B4F 347E </fl><fr>0B50 347E </fr>
 <ok></ok>
0 11 1A01 SLX->ERGEBNIS M. ( 5A00 ) <ok>5A00 </ok>
1A00 @ M. ( 0011 ) <ok>0011 </ok>
 <ok></ok>
: OPERAND->SLX ( op --> sx lx ax ) <ok></ok><fl>0B50 347E </fl><fr>0B54 348B </fr>
  DUP @ ( op x ) <ok></ok><fl>0B54 348B </fl><fr>0B56 348B </fr>
  DUP 0LT IF MINUS -1 ELSE 0 END_IF <ok></ok><fl>0B56 348B </fl><fr>0B5D 348B </fr>
  ROT ROT ( sx op xabs ) <ok></ok><fl>0B5D 348B </fl><fr>0B5F 348B </fr>
  DUP 04 000 MLIT AND IF <ok></ok><fl>0B5F 348B </fl><fr>0B65 348B </fr>
    SWAP DROP <ok></ok><fl>0B65 348B </fl><fr>0B67 348B </fr>
    UBIT @ IF -1 ELSE 3FFF END_IF AND <ok></ok><fl>0B67 348B </fl><fr>0B6E 348B </fr>
    DUP @ SWAP 1+ <ok></ok><fl>0B6E 348B </fl><fr>0B72 348B </fr>
    ELSE <ok></ok><fl>0B72 348B </fl><fr>0B73 348B </fr>
      OVER ! 1 SWAP  <ok></ok><fl>0B73 348B </fl><fr>0B77 348B </fr>
      END_IF <ok></ok><fl>0B77 348B </fl><fr>0B77 348B </fr>
  ; <ok></ok><fl>0B77 348B </fl><fr>0B78 348B </fr>
 <ok></ok>
77 OPERAND1 ! <ok></ok>
OPERAND1 OPERAND->SLX M. M. M. <ok>2F21 0001 0000 </ok>
-77 OPERAND1 ! <ok></ok>
OPERAND1 OPERAND->SLX M. M. M. <ok>2F21 0001 FFFF </ok>
05 0800 MLIT OPERAND1 ! <ok></ok>
OPERAND1 OPERAND->SLX M. M. M. <ok>1801 0000 0000 </ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
: ERGEBNIS_NEU! ( ergneu --> ) <ok></ok><fl>0B78 348B </fl><fr>0B7C 3499 </fr>
  DUP SPEICHERENDE @ LT NOT IF " INIT" INTERPRET 0369 ERROR END_IF <ok></ok><fl>0B7C 3499 </fl><fr>0B88 349E </fr>
  ERGEBNIS ! ; <ok></ok><fl>0B88 349E </fl><fr>0B8B 349E </fr>
 <ok></ok>
: SPEICHERHOL ( l --> addr ) <ok></ok><fl>0B8B 349E </fl><fr>0B8F 34AA </fr>
  ERGEBNIS @ 2DUP ! <ok></ok><fl>0B8F 34AA </fl><fr>0B93 34AA </fr>
  1+ 2DUP M+ ERGEBNIS_NEU! <ok></ok><fl>0B93 34AA </fl><fr>0B97 34AA </fr>
  2DUP SWAP 0 FILL <ok></ok><fl>0B97 34AA </fl><fr>0B9B 34AA </fr>
  SWAP DROP <ok></ok><fl>0B9B 34AA </fl><fr>0B9D 34AA </fr>
  ; <ok></ok><fl>0B9D 34AA </fl><fr>0B9E 34AA </fr>
 <ok></ok>
: 2OPERANDEN->2SLX ( op1 op2 --> sx lx ax sy ly ay az ) <ok></ok><fl>0B9E 34AA </fl><fr>0BA2 34BB </fr>
  OPERAND2 ! <ok></ok><fl>0BA2 34BB </fl><fr>0BA4 34BB </fr>
  OPERAND1 ! <ok></ok><fl>0BA4 34BB </fl><fr>0BA6 34BB </fr>
  OPERAND1 OPERAND->SLX <ok></ok><fl>0BA6 34BB </fl><fr>0BA8 34BB </fr>
  OVER >R <ok></ok><fl>0BA8 34BB </fl><fr>0BAA 34BB </fr>
  OPERAND2 OPERAND->SLX <ok></ok><fl>0BAA 34BB </fl><fr>0BAC 34BB </fr>
  OVER R> M+ 1+ <ok></ok><fl>0BAC 34BB </fl><fr>0BB0 34BB </fr>
  SPEICHERHOL <ok></ok><fl>0BB0 34BB </fl><fr>0BB1 34BB </fr>
  ; <ok></ok><fl>0BB1 34BB </fl><fr>0BB2 34BB </fr>
 <ok></ok>
77 88 2OPERANDEN->2SLX M. M. M. M. M. M. M. <ok>1801 2F22 0001 0000 2F21 0001 0000 </ok>
77 05 0800 MLIT 2OPERANDEN->2SLX M. M. M. M. M. M. M. <ok>1805 1801 0003 0000 2F21 0001 0000 </ok>
</sekt> 
 <ok></ok>
<sekt inhalt="+ - * /MOD ."> 
: + ( x y --> z ) <ok></ok><fl>0BB2 34BB </fl><fr>0BB6 34BD </fr>
  2OPERANDEN->2SLX ADDIER TRIM SLX->ERGEBNIS ; <ok></ok><fl>0BB6 34BD </fl><fr>0BBB 34BD </fr>
: - ( x y --> z ) <ok></ok><fl>0BBB 34BD </fl><fr>0BBF 34BF </fr>
  MINUS + ; <ok></ok><fl>0BBF 34BF </fl><fr>0BC2 34BF </fr>
: * ( x y --> z ) <ok></ok><fl>0BC2 34BF </fl><fr>0BC6 34C1 </fr>
  2OPERANDEN->2SLX SMUL TRIM SLX->ERGEBNIS ; <ok></ok><fl>0BC6 34C1 </fl><fr>0BCB 34C1 </fr>
 <ok></ok>
 <ok></ok>
IMMEDIATE: RECURSE LFA @ 4 M+ COMPILE, ; <ok></ok><fl>0BCB 34C1 </fl><fr>0BD5 34C9 </fr>
: /MOD ( x y --> r q ) <ok></ok><fl>0BD5 34C9 </fl><fr>0BD9 34CE </fr>
  DUP 0= IF 0 ERROR END_IF <ok></ok><fl>0BD9 34CE </fl><fr>0BDE 34CE </fr>
  DUP OPERAND1 ! <ok></ok><fl>0BDE 34CE </fl><fr>0BE1 34CE </fr>
  OPERAND1 OPERAND->SLX  <ok></ok><fl>0BE1 34CE </fl><fr>0BE3 34CE </fr>
  ROT DROP OVER M+ 1- @ ( ly ty ) <ok></ok><fl>0BE3 34CE </fl><fr>0BE9 34CE </fr>
  SWAP 1 > IF <ok></ok><fl>0BE9 34CE </fl><fr>0BED 34CE </fr>
    1 BEGIN OVER 0LT NOT WHILE  <ok></ok><fl>0BED 34CE </fl><fr>0BF2 34CE </fr>
      SWAP DUP M+ SWAP DUP + REPEAT <ok></ok><fl>0BF2 34CE </fl><fr>0BF9 34CE </fr>
    SWAP DROP DUP SCHIEB ! <ok></ok><fl>0BF9 34CE </fl><fr>0BFE 34CE </fr>
    ROT OVER * <ok></ok><fl>0BFE 34CE </fl><fr>0C01 34CE </fr>
    ROT ROT * <ok></ok><fl>0C01 34CE </fl><fr>0C04 34CE </fr>
    ELSE DROP 1 SCHIEB ! END_IF  <ok></ok><fl>0C04 34CE </fl><fr>0C09 34CE </fr>
  2OPERANDEN->2SLX SDIV <ok></ok><fl>0C09 34CE </fl><fr>0C0B 34CE </fr>
  TRIM SLX->ERGEBNIS >R  <ok></ok><fl>0C0B 34CE </fl><fr>0C0E 34CE </fr>
  TRIM SLX->ERGEBNIS R> <ok></ok><fl>0C0E 34CE </fl><fr>0C11 34CE </fr>
  SCHIEB @ 1- IF  <ok></ok><fl>0C11 34CE </fl><fr>0C15 34CE </fr>
    SWAP SCHIEB @ RECURSE SWAP DROP <ok></ok><fl>0C15 34CE </fl><fr>0C1B 34CE </fr>
    SWAP END_IF <ok></ok><fl>0C1B 34CE </fl><fr>0C1C 34CE </fr>
  ; <ok></ok><fl>0C1C 34CE </fl><fr>0C1D 34CE </fr>
 <ok></ok>
: HG0. ( n -->  /hexstring/ ) <ok></ok><fl>0C1D 34CE </fl><fr>0C21 34D3 </fr>
  0 >R <ok></ok><fl>0C21 34D3 </fl><fr>0C23 34D3 </fr>
  SHL16 DUP IF DIG EMIT R> DROP -1 >R ELSE DROP END_IF <ok></ok><fl>0C23 34D3 </fl><fr>0C2E 34D3 </fr>
  SHL16 DUP R OR IF DIG EMIT R> DROP -1 >R ELSE DROP END_IF <ok></ok><fl>0C2E 34D3 </fl><fr>0C3B 34D3 </fr>
  SHL16 DUP R OR IF DIG EMIT ELSE DROP END_IF <ok></ok><fl>0C3B 34D3 </fl><fr>0C44 34D3 </fr>
  SHL16 DIG EMIT DROP R> DROP ; <ok></ok><fl>0C44 34D3 </fl><fr>0C4B 34D3 </fr>
 <ok></ok>
: . ( n --> ) ( erstmal nur hexadezimale Ausgabe ) <ok></ok><fl>0C4B 34D3 </fl><fr>0C4F 34D5 </fr>
  OPERAND1 ! <ok></ok><fl>0C4F 34D5 </fl><fr>0C51 34D5 </fr>
  OPERAND1 OPERAND->SLX ( sx lx ax ) <ok></ok><fl>0C51 34D5 </fl><fr>0C53 34D5 </fr>
  ROT IF ." -" END_IF <ok></ok><fl>0C53 34D5 </fl><fr>0C58 34D7 </fr>
  OVER M+  <ok></ok><fl>0C58 34D7 </fl><fr>0C5A 34D7 </fr>
  1- DUP @ HG0. SWAP 1- SWAP <ok></ok><fl>0C5A 34D7 </fl><fr>0C61 34D7 </fr>
  BEGIN OVER WHILE 1- DUP @ HG. SWAP 1- SWAP REPEAT DROP <ok></ok><fl>0C61 34D7 </fl><fr>0C6C 34D7 </fr>
  DROP  <ok></ok><fl>0C6C 34D7 </fl><fr>0C6D 34D7 </fr>
  20 EMIT <ok></ok><fl>0C6D 34D7 </fl><fr>0C6F 34D7 </fr>
  ; <ok></ok><fl>0C6F 34D7 </fl><fr>0C70 34D7 </fr>
 <ok></ok>
1111 1111 * . <ok>1234321 </ok>
 <ok></ok>
: B. SWAP . . ; <ok></ok><fl>0C70 34D7 </fl><fr>0C78 34DA </fr>
 <ok></ok>
 <ok></ok>
 <ok></ok>
7 3 /MOD . .  <ok>2 1 </ok>
3333 DUP * DUP * 10 * DUP . <ok>68D9E840B77E910 </ok>
3333 DUP * 10 * DUP . <ok>A3D5C290 </ok>
/MOD B. <ok>0 A3D5C29 </ok>
3333 DUP * . <ok>A3D5C29 </ok>
 <ok></ok>
1111 DUP * 8 * DUP . <ok>91A1908 </ok>
1111 8 * DUP . <ok>8888 </ok>
/MOD B. <ok>0 1111 </ok>
 <ok></ok>
1111 DUP * DUP . <ok>1234321 </ok>
1111 DUP . <ok>1111 </ok>
/MOD B. <ok>0 1111 </ok>
</sekt> 
 <ok></ok>
<sekt inhalt="Zwischenergebnisse nicht unnötig speichern"> 
ZAHLENSPEICHER @ VARIABLE BLOCKANFANG <ok></ok><fl>0C78 34DA </fl><fr>0C7D 34E6 </fr>
ZAHLENSPEICHER @ VARIABLE BLOCKENDE <ok></ok><fl>0C7D 34E6 </fl><fr>0C82 34F0 </fr>
: NEBENRECHNUNG ( --> erg ) ERGEBNIS @ ; <ok></ok><fl>0C82 34F0 </fl><fr>0C89 34FE </fr>
: HAUPTRECHNUNG ( erg --> ) ERGEBNIS ! ; <ok></ok><fl>0C89 34FE </fl><fr>0C90 350C </fr>
: RECHENBLOCK BLOCKENDE @ BLOCKANFANG ! <ok></ok><fl>0C90 350C </fl><fr>0C98 3518 </fr>
  ERGEBNIS @ BLOCKENDE ! ; <ok></ok><fl>0C98 3518 </fl><fr>0C9D 3518 </fr>
: SPEICHERDA ( adr --> flag ) <ok></ok><fl>0C9D 3518 </fl><fr>0CA1 3523 </fr>
  0 OVER ! DUP @ SWAP -1 OVER ! NOOP @ 1+ OR 0= ; <ok></ok><fl>0CA1 3523 </fl><fr>0CB0 3523 </fr>
: INIT <ok></ok><fl>0CB0 3523 </fl><fr>0CB4 3528 </fr>
  0 1C00 <ok></ok><fl>0CB4 3528 </fl><fr>0CB6 3528 </fr>
  07 000 MLIT SPEICHERDA IF 2DROP -1 07 000 MLIT END_IF <ok></ok><fl>0CB6 3528 </fl><fr>0CC0 3528 </fr>
  06 000 MLIT SPEICHERDA IF 2DROP -1 06 000 MLIT END_IF <ok></ok><fl>0CC0 3528 </fl><fr>0CCA 3528 </fr>
  04 000 MLIT SPEICHERDA IF 2DROP -1 04 000 MLIT END_IF <ok></ok><fl>0CCA 3528 </fl><fr>0CD4 3528 </fr>
  2000 <ok></ok><fl>0CD4 3528 </fl><fr>0CD5 3528 </fr>
  05 FFF MLIT SPEICHERDA IF DROP 06 000 MLIT END_IF <ok></ok><fl>0CD5 3528 </fl><fr>0CDE 3528 </fr>
  06 FFF MLIT SPEICHERDA IF DROP 07 000 MLIT END_IF <ok></ok><fl>0CDE 3528 </fl><fr>0CE7 3528 </fr>
  07 7FF MLIT SPEICHERDA IF DROP 07 800 MLIT END_IF <ok></ok><fl>0CE7 3528 </fl><fr>0CF0 3528 </fr>
  SPEICHERENDE ! ZAHLENSPEICHER ! UBIT !   <ok></ok><fl>0CF0 3528 </fl><fr>0CF6 3528 </fr>
  ZAHLENSPEICHER @ ERGEBNIS ! RECHENBLOCK RECHENBLOCK <ok></ok><fl>0CF6 3528 </fl><fr>0CFC 3528 </fr>
  ; <ok></ok><fl>0CFC 3528 </fl><fr>0CFD 3528 </fr>
 <ok></ok>
INIT <ok></ok>
ERGEBNIS M? <ok>1C00 </ok>
 <ok></ok>
: A+0 ( a --> a+0 )  <ok></ok><fl>0CFD 3528 </fl><fr>0D01 352C </fr>
  DUP OPERAND1 ! <ok></ok><fl>0D01 352C </fl><fr>0D04 352C </fr>
  OPERAND1 OPERAND->SLX ( a sz lz az ) <ok></ok><fl>0D04 352C </fl><fr>0D06 352C </fr>
  DUP OPERAND1 M- IF <ok></ok><fl>0D06 352C </fl><fr>0D0A 352C </fr>
    ERGEBNIS @ 1+ SWAP OVER 2OVER ( a sz lz erg+1 az erg+1 lz erg+1 ) <ok></ok><fl>0D0A 352C </fl><fr>0D10 352C </fr>
    OVER M+ ERGEBNIS_NEU!         ( a sz lz erg+1 az erg+1 lz ) <ok></ok><fl>0D10 352C </fl><fr>0D13 352C </fr>
    MOVE SLX->ERGEBNIS_KURZ       ( a a+0 ) <ok></ok><fl>0D13 352C </fl><fr>0D15 352C </fr>
    SWAP DROP                     ( a+0 ) <ok></ok><fl>0D15 352C </fl><fr>0D17 352C </fr>
    ELSE 2DROP DROP END_IF        ( a+0 ) <ok></ok><fl>0D17 352C </fl><fr>0D1A 352C </fr>
  ; <ok></ok><fl>0D1A 352C </fl><fr>0D1B 352C </fr>
 <ok></ok>
05 0A00 MLIT A+0 M. <ok>5C00 </ok>
 <ok></ok>
: B+0 ( a b --> a+0 b+0 ) <ok></ok><fl>0D1B 352C </fl><fr>0D1F 3530 </fr>
  SWAP A+0 SWAP A+0 ; <ok></ok><fl>0D1F 3530 </fl><fr>0D24 3530 </fr>
</sekt> 
 <ok></ok>
 <ok></ok>
 <ok></ok>
<sekt inhalt="Anwenden in + - * / MOD GGT BK..."> 
: + ( x y --> z ) NEBENRECHNUNG ROT ROT + SWAP HAUPTRECHNUNG A+0 ; <ok></ok><fl>0D24 3530 </fl><fr>0D30 3532 </fr>
: - ( x y --> z ) NEBENRECHNUNG ROT ROT - SWAP HAUPTRECHNUNG A+0 ; <ok></ok><fl>0D30 3532 </fl><fr>0D3C 3534 </fr>
: * ( x y --> z ) NEBENRECHNUNG ROT ROT * SWAP HAUPTRECHNUNG A+0 ; <ok></ok><fl>0D3C 3534 </fl><fr>0D48 3536 </fr>
: / ( b d --> q ) <ok></ok><fl>0D48 3536 </fl><fr>0D4C 3538 </fr>
  NEBENRECHNUNG ROT ROT  <ok></ok><fl>0D4C 3538 </fl><fr>0D4F 3538 </fr>
  /MOD SWAP DROP <ok></ok><fl>0D4F 3538 </fl><fr>0D52 3538 </fr>
  SWAP HAUPTRECHNUNG A+0 <ok></ok><fl>0D52 3538 </fl><fr>0D55 3538 </fr>
  ; <ok></ok><fl>0D55 3538 </fl><fr>0D56 3538 </fr>
: MOD ( b d --> r )  <ok></ok><fl>0D56 3538 </fl><fr>0D5A 353C </fr>
  NEBENRECHNUNG ROT ROT  <ok></ok><fl>0D5A 353C </fl><fr>0D5D 353C </fr>
  /MOD DROP  <ok></ok><fl>0D5D 353C </fl><fr>0D5F 353C </fr>
  SWAP HAUPTRECHNUNG A+0 <ok></ok><fl>0D5F 353C </fl><fr>0D62 353C </fr>
  ; <ok></ok><fl>0D62 353C </fl><fr>0D63 353C </fr>
 <ok></ok>
: GGT ( a b --> ggt ) <ok></ok><fl>0D63 353C </fl><fr>0D67 3540 </fr>
  NEBENRECHNUNG ROT ROT <ok></ok><fl>0D67 3540 </fl><fr>0D6A 3540 </fr>
  BEGIN DUP WHILE <ok></ok><fl>0D6A 3540 </fl><fr>0D6C 3540 </fr>
    SWAP OVER MOD REPEAT DROP  <ok></ok><fl>0D6C 3540 </fl><fr>0D71 3540 </fr>
  SWAP HAUPTRECHNUNG A+0 ; <ok></ok><fl>0D71 3540 </fl><fr>0D75 3540 </fr>
: BK ( a b --> a/ggt b/ggt )  <ok></ok><fl>0D75 3540 </fl><fr>0D79 3543 </fr>
  NEBENRECHNUNG ROT ROT <ok></ok><fl>0D79 3543 </fl><fr>0D7C 3543 </fr>
  2DUP GGT ROT OVER / ROT ROT /  <ok></ok><fl>0D7C 3543 </fl><fr>0D84 3543 </fr>
  ROT HAUPTRECHNUNG B+0 ; <ok></ok><fl>0D84 3543 </fl><fr>0D88 3543 </fr>
 <ok></ok>
 <ok></ok>
 <ok></ok>
777 99 BK B. <ok>27D 33 </ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
( je einmal * und + in NNUMBER ) <ok></ok>
: NNUMBER ( baddr n --> a faddr ) <ok></ok><fl>0D88 3543 </fl><fr>0D8C 354B </fr>
  NEBENRECHNUNG ROT ROT <ok></ok><fl>0D8C 354B </fl><fr>0D8F 354B </fr>
  7 LOCAL ( L3 L4 nicht verwendet <ok></ok><fl>0D8F 354B </fl><fr>0D91 354B </fr>
  L1 ! L0 ! <ok></ok><fl>0D91 354B </fl><fr>0D95 354B </fr>
  0 L1 @ IF <ok></ok><fl>0D95 354B </fl><fr>0D99 354B </fr>
    DUP L2 ! 1 L5 ! ( Vorzeichen ) <ok></ok><fl>0D99 354B </fl><fr>0D9F 354B </fr>
    BEGIN ( M23 Vorzeichen gucken ) <ok></ok><fl>0D9F 354B </fl><fr>0D9F 354B </fr>
      -1 L6 !  <ok></ok><fl>0D9F 354B </fl><fr>0DA2 354B </fr>
      L0 @ L2 @ M+ C@ <ok></ok><fl>0DA2 354B </fl><fr>0DA8 354B </fr>
      2B ( 43 2B ) = IF L2 @ 1+ L2 ! 0 L6 ! ELSE <ok></ok><fl>0DA8 354B </fl><fr>0DB4 354B </fr>
        L0 @ L2 @ M+ C@ <ok></ok><fl>0DB4 354B </fl><fr>0DBA 354B </fr>
        2D ( 45 2D ) = IF L2 @ 1+ L2 ! <ok></ok><fl>0DBA 354B </fl><fr>0DC2 354B </fr>
          0 L6 ! <ok></ok><fl>0DC2 354B </fl><fr>0DC5 354B </fr>
          L5 @ MINUS L5 ! END_IF <ok></ok><fl>0DC5 354B </fl><fr>0DCA 354B </fr>
        END_IF <ok></ok><fl>0DCA 354B </fl><fr>0DCA 354B </fr>
      L6 @ UNTIL <ok></ok><fl>0DCA 354B </fl><fr>0DCD 354B </fr>
    L2 @ L1 @ LT IF <ok></ok><fl>0DCD 354B </fl><fr>0DD3 354B </fr>
      BEGIN <ok></ok><fl>0DD3 354B </fl><fr>0DD3 354B </fr>
        L0 @ L2 @ M+ C@ <ok></ok><fl>0DD3 354B </fl><fr>0DD9 354B </fr>
        DUP IF ( oo L1 auf Bytes ) <ok></ok><fl>0DD9 354B </fl><fr>0DDB 354B </fr>
          DIGIT NOT IF DROP L1 @ MINUS L1 ! ELSE <ok></ok><fl>0DDB 354B </fl><fr>0DE5 354B </fr>
            SWAP BASE @ * + <ok></ok><fl>0DE5 354B </fl><fr>0DEA 354B </fr>
            L2 @ 1+ L2 !  <ok></ok><fl>0DEA 354B </fl><fr>0DEF 354B </fr>
            END_IF <ok></ok><fl>0DEF 354B </fl><fr>0DEF 354B </fr>
          ELSE DROP L2 @ L1 ! END_IF <ok></ok><fl>0DEF 354B </fl><fr>0DF5 354B </fr>
        L2 @ L1 @ LT NOT UNTIL <ok></ok><fl>0DF5 354B </fl><fr>0DFC 354B </fr>
      END_IF ( M19 ) <ok></ok><fl>0DFC 354B </fl><fr>0DFC 354B </fr>
    END_IF ( M19 ) <ok></ok><fl>0DFC 354B </fl><fr>0DFC 354B </fr>
  L5 @ 0LT IF MINUS END_IF <ok></ok><fl>0DFC 354B </fl><fr>0E01 354B </fr>
  L2 @ L1 @ M- ( oo noch kein fadr !!!!!!!!!!!! siehe NNUMBER ) <ok></ok><fl>0E01 354B </fl><fr>0E06 354B </fr>
  DUP IF DROP L0 @ L2 @ M+ END_IF ( jetzt faddr ) <ok></ok><fl>0E06 354B </fl><fr>0E0E 354B </fr>
  END_LOCAL <ok></ok><fl>0E0E 354B </fl><fr>0E0F 354B </fr>
  ROT HAUPTRECHNUNG SWAP A+0 SWAP <ok></ok><fl>0E0F 354B </fl><fr>0E14 354B </fr>
  ; <ok></ok><fl>0E14 354B </fl><fr>0E15 354B </fr>
 <ok></ok>
( zum Testen erst nur Zahleneingabe mit N" ) <ok></ok>
22 WORD: N" ( /number/  --> n ) NNUMBER DROP ; <ok></ok><fl>0E15 354B </fl><fr>0E1D 354E </fr>
 <ok></ok>
N" 111111111111111" DUP * DUP . DUP M. <ok>123456789ABCDEFEDCBA987654321 5C17 </ok>
N" 111111111111111" DUP . DUP M. <ok>111111111111111 5C20 </ok>
/MOD OVER M. DUP M. B. <ok>0000 5C58 0 111111111111111 </ok>
 <ok></ok>
N" 0026D4346A00" DUP . <ok>26D4346A00 </ok>
N" 00000FC82800" DUP . <ok>FC82800 </ok>
2DUP /MOD B. <ok>D6A2200 275 </ok>
2DUP BK B.  <ok>3135 14 </ok>
( richtig wäre D6A2200 275 bei /MOD ) <ok></ok>
( richtig wäre 3135 14 bei BK ) <ok></ok>
 <ok></ok>
N" 00A7426290A8C945E959A780" DUP . <ok>A7426290A8C945E959A780 </ok>
N" 000002330657FDD698" DUP . <ok>2330657FDD698 </ok>
/MOD B.  <ok>158B5843D5ED0 4C0CF598D2 </ok>
( richtig wäre 158B5843D5ED0 4C0CF598D2 ) <ok></ok>
( und nicht   0325AF2C3F8838 4C0CF598D3 ) <ok></ok>
 <ok></ok>
( als vorlaeufigen Abschluss nochmal ) <ok></ok>
" 111111111111111" NNUMBER DROP DUP * . <ok>123456789ABCDEFEDCBA987654321 </ok>
 <ok></ok>
N" 000002330657FDD698" N" 4C0CF598D3" * . <ok>A7426290A9A396BD1A1F48 </ok>
N" 000002330657FDD698" N" 4C0CF598D2" * . <ok>A7426290A77090651C48B0 </ok>
 <ok></ok>
 <ok></ok>
( wenn alles so geht, kann es richtig losgehen )<id id="NNUMBER"/> <ok></ok>
: REPLACE: ( /name/ )  <ok></ok><fl>0E1D 354E </fl><fr>0E21 3557 </fr>
  CSP! ( oo ) <ok></ok><fl>0E21 3557 </fl><fr>0E22 3557 </fr>
  20 WORD FIND DUP IF  <ok></ok><fl>0E22 3557 </fl><fr>0E27 3557 </fr>
    LCFA DROP 1+ ( pfa <ok></ok><fl>0E27 3557 </fl><fr>0E2A 3557 </fr>
(    HERE OVER M- 1- JRBIT XSETBT SWAP ! <ok></ok><fl>0E2A 3557 </fl><fr>0E2A 3557 </fr>
    HERE SWAP DP ! DUP COMPILE, RETURN , DP ! <ok></ok><fl>0E2A 3557 </fl><fr>0E34 3557 </fr>
    1 STAT ! <ok></ok><fl>0E34 3557 </fl><fr>0E37 3557 </fr>
    ELSE 2DROP 3 ERROR END_IF ; <ok></ok><fl>0E37 3557 </fl><fr>0E3C 3557 </fr>
 <ok></ok>
REPLACE: NUMBER NNUMBER ; <ok></ok><fl>0E3C 3557 </fl><fr>0E3E 3557 </fr>
111111111111111 DUP * . <ok>123456789ABCDEFEDCBA987654321 </ok>
 <ok></ok>
 <ok></ok>
 <ok></ok>
: ^ ( a n --> a^n ) <ok></ok><fl>0E3E 3557 </fl><fr>0E42 3559 </fr>
  NEBENRECHNUNG ROT ROT ( erg a n ) <ok></ok><fl>0E42 3559 </fl><fr>0E45 3559 </fr>
  4 LOCAL <ok></ok><fl>0E45 3559 </fl><fr>0E47 3559 </fr>
  DUP 0LT IF 12 ERROR END_IF     <ok></ok><fl>0E47 3559 </fl><fr>0E4C 3559 </fr>
  2           ( a n 2 )         <ok></ok><fl>0E4C 3559 </fl><fr>0E4D 3559 </fr>
  L3 ! L2 ! L1 !    (  R1-3: a  n  2 ) <ok></ok><fl>0E4D 3559 </fl><fr>0E53 3559 </fr>
  1           ( p=1          a  n  2 ) <ok></ok><fl>0E53 3559 </fl><fr>0E54 3559 </fr>
  BEGIN       ( p            a  n  2 ) <ok></ok><fl>0E54 3559 </fl><fr>0E54 3559 </fr>
    L2 @ L3 @ ( p n 2        a  n  2 ) <ok></ok><fl>0E54 3559 </fl><fr>0E58 3559 </fr>
    M/MOD     ( p r n/2      a  n  2 ) <ok></ok><fl>0E58 3559 </fl><fr>0E59 3559 </fr>
    L2 !      ( p r          a n/2 2 ) <ok></ok><fl>0E59 3559 </fl><fr>0E5B 3559 </fr>
    IF        ( p            a n/2 2 ) <ok></ok><fl>0E5B 3559 </fl><fr>0E5C 3559 </fr>
      L1 @    ( p a          a n/2 2 ) <ok></ok><fl>0E5C 3559 </fl><fr>0E5E 3559 </fr>
      *      ( p*a          a n/2 2 ) <ok></ok><fl>0E5E 3559 </fl><fr>0E5F 3559 </fr>
      END_IF  ( p*a          a n/2 2 ) <ok></ok><fl>0E5F 3559 </fl><fr>0E5F 3559 </fr>
    L2 @      ( p*a n/2      a n/2 2 ) <ok></ok><fl>0E5F 3559 </fl><fr>0E61 3559 </fr>
    WHILE     ( p*a          a n/2 2 ) <ok></ok><fl>0E61 3559 </fl><fr>0E62 3559 </fr>
      L1 @    ( p*a a        a n/2 2 ) <ok></ok><fl>0E62 3559 </fl><fr>0E64 3559 </fr>
      L1 @    ( p*a a a      a n/2 2 ) <ok></ok><fl>0E64 3559 </fl><fr>0E66 3559 </fr>
      *      ( p*a a*a      a n/2 2 ) <ok></ok><fl>0E66 3559 </fl><fr>0E67 3559 </fr>
      L1 !    ( p*a        a*a n/2 2 ) <ok></ok><fl>0E67 3559 </fl><fr>0E69 3559 </fr>
      REPEAT  ( p*a        a*a n/2 2 ) <ok></ok><fl>0E69 3559 </fl><fr>0E6A 3559 </fr>
  END_LOCAL   ( a^n ) <ok></ok><fl>0E6A 3559 </fl><fr>0E6B 3559 </fr>
  SWAP HAUPTRECHNUNG A+0 <ok></ok><fl>0E6B 3559 </fl><fr>0E6E 3559 </fr>
  ;           ( a^n ) <ok></ok><fl>0E6E 3559 </fl><fr>0E6F 3559 </fr>
 <ok></ok>
 <ok></ok>
3333 2 ^ 10 * . <ok>A3D5C290 </ok>
1111 2 ^ . <ok>1234321 </ok>
 <ok></ok>
 <ok></ok>
10 20 ^ 10 10 ^ DUP -1 + SWAP 1 + * - . <ok>1 </ok>
</sekt> 
 <ok></ok>
<sekt inhalt="nochmal . für beliebige Zahlenbasis"> 
: . ( a -->  /zahl/ ) <ok></ok><fl>0E6F 3559 </fl><fr>0E73 355B </fr>
  BASE @ 10 = IF . ELSE <ok></ok><fl>0E73 355B </fl><fr>0E7A 355B </fr>
    NEBENRECHNUNG SWAP <ok></ok><fl>0E7A 355B </fl><fr>0E7C 355B </fr>
    DUP 0LT IF MINUS ." -" END_IF <ok></ok><fl>0E7C 355B </fl><fr>0E83 355D </fr>
    DUP 0= IF ." 0 " DROP ELSE <ok></ok><fl>0E83 355D </fl><fr>0E8B 3560 </fr>
      -1 SWAP ( Stapelmarkierung ) <ok></ok><fl>0E8B 3560 </fl><fr>0E8D 3560 </fr>
      BEGIN DUP WHILE BASE @ /MOD REPEAT DROP <ok></ok><fl>0E8D 3560 </fl><fr>0E94 3560 </fr>
      BEGIN DUP 0LT NOT WHILE 30 M+ DUP 39 > IF 7 M+ END_IF EMIT REPEAT <ok></ok><fl>0E94 3560 </fl><fr>0EA2 3560 </fr>
      20 EMIT DROP END_IF <ok></ok><fl>0EA2 3560 </fl><fr>0EA5 3560 </fr>
    HAUPTRECHNUNG <ok></ok><fl>0EA5 3560 </fl><fr>0EA6 3560 </fr>
    END_IF <ok></ok><fl>0EA6 3560 </fl><fr>0EA6 3560 </fr>
  ; <ok></ok><fl>0EA6 3560 </fl><fr>0EA7 3560 </fr>
: B. SWAP . . ; ( muss hier nochmal stehen ) <ok></ok><fl>0EA7 3560 </fl><fr>0EAF 3563 </fr>
 <ok></ok>
777 99 BK B. <ok>27D 33 </ok>
INIT <ok></ok>
</sekt> 
 <ok></ok>
<sekt inhalt="Array-Objekte"> 
: ZERLEG ( a --> adr i ) <ok></ok><fl>0EAF 3563 </fl><fr>0EB3 356A </fr>
  UBIT @ IF -1 ELSE 3FFF END_IF AND DUP 1+ SWAP @ ; <ok></ok><fl>0EB3 356A </fl><fr>0EBF 356A </fr>
 <ok></ok>
N" 111111111111111" DUP * DUP . <ok>123456789ABCDEFEDCBA987654321 </ok>
DUP ZERLEG SWAP M. M. <ok>1C06 0008 </ok>
 <ok></ok>
: OBJ? ( a --> flag ) <ok></ok><fl>0EBF 356A </fl><fr>0EC3 356F </fr>
  ABS DUP 04 000 MLIT LT IF DROP 0 ELSE <ok></ok><fl>0EC3 356F </fl><fr>0ECD 356F </fr>
    ZERLEG SWAP DROP 04 000 MLIT LT IF 0 ELSE -1  <ok></ok><fl>0ECD 356F </fl><fr>0ED8 356F </fr>
      END_IF END_IF <ok></ok><fl>0ED8 356F </fl><fr>0ED8 356F </fr>
  ; <ok></ok><fl>0ED8 356F </fl><fr>0ED9 356F </fr>
 <ok></ok>
: L ( a i -> b ) <ok></ok><fl>0ED9 356F </fl><fr>0EDD 3571 </fr>
  OVER OBJ? IF <ok></ok><fl>0EDD 3571 </fl><fr>0EE0 3571 </fr>
    SWAP ZERLEG 3FFF AND ( i adr j ) <ok></ok><fl>0EE0 3571 </fl><fr>0EE4 3571 </fr>
    ROT 2DUP ( adr j i j i ) <ok></ok><fl>0EE4 3571 </fl><fr>0EE6 3571 </fr>
    > IF SWAP DROP M+ @ ELSE 2DROP DROP 0 END_IF <ok></ok><fl>0EE6 3571 </fl><fr>0EF0 3571 </fr>
    ELSE IF DROP 0 END_IF END_IF ; <ok></ok><fl>0EF0 3571 </fl><fr>0EF5 3571 </fr>
 <ok></ok>
: G ( a i -> a i b ) 2DUP L ; <ok></ok><fl>0EF5 3571 </fl><fr>0EFC 3573 </fr>
 <ok></ok>
: H ( a i b --> a' ) <ok></ok><fl>0EFC 3573 </fl><fr>0F00 3575 </fr>
  DUP >R <ok></ok><fl>0F00 3575 </fl><fr>0F02 3575 </fr>
  ROT ROT ( b a i ) <ok></ok><fl>0F02 3575 </fl><fr>0F04 3575 </fr>
  OVER OBJ? 0= OVER 0= AND R> OBJ? 0= AND IF 2DROP ELSE <ok></ok><fl>0F04 3575 </fl><fr>0F11 3575 </fr>
    OVER OBJ? 0= IF  <ok></ok><fl>0F11 3575 </fl><fr>0F15 3575 </fr>
      DUP 1+ SPEICHERHOL ( b a i addrneu ) <ok></ok><fl>0F15 3575 </fl><fr>0F18 3575 </fr>
      ROT OVER ! ( b i addrneu ) <ok></ok><fl>0F18 3575 </fl><fr>0F1B 3575 </fr>
(      OVER 1+ OVER 1- ! ( b i addrneu ( aha, macht schon SPEICHERHOL ) <ok></ok><fl>0F1B 3575 </fl><fr>0F1B 3575 </fr>
      04 000 MLIT OVER 1- +! ( das ist jetzt neu fuer OBJ? ) <ok></ok><fl>0F1B 3575 </fl><fr>0F21 3575 </fr>
      DUP >R M+ ! R> ( addrneu ) <ok></ok><fl>0F21 3575 </fl><fr>0F26 3575 </fr>
      1- 04 000 MLIT OR <ok></ok><fl>0F26 3575 </fl><fr>0F2B 3575 </fr>
      ELSE <ok></ok><fl>0F2B 3575 </fl><fr>0F2C 3575 </fr>
        OVER                 ( b a i a ) <ok></ok><fl>0F2C 3575 </fl><fr>0F2D 3575 </fr>
        ZERLEG 3FFF AND      ( b a i addr j ) <ok></ok><fl>0F2D 3575 </fl><fr>0F30 3575 </fr>
        ROT                  ( b a addr j i ) <ok></ok><fl>0F30 3575 </fl><fr>0F31 3575 </fr>
        2DUP > IF SWAP DROP ROT >R M+ ! R> ELSE <ok></ok><fl>0F31 3575 </fl><fr>0F3C 3575 </fr>
          DUP 1+ SPEICHERHOL ( b a addr j i addrneu ) <ok></ok><fl>0F3C 3575 </fl><fr>0F3F 3575 </fr>
          SWAP >R DUP >R     ( b a addr j addrneu      addrneu i ) <ok></ok><fl>0F3F 3575 </fl><fr>0F43 3575 </fr>
          SWAP MOVE DROP R>  ( b addrneu            i ) <ok></ok><fl>0F43 3575 </fl><fr>0F47 3575 </fr>
(          R 1+ OVER 1- !    ( b addrneu                i ) <ok></ok><fl>0F47 3575 </fl><fr>0F47 3575 </fr>
          04 000 MLIT OVER 1- @ OR OVER 1- !   ( das ist jetzt neu fuer OBJ? ) <ok></ok><fl>0F47 3575 </fl><fr>0F51 3575 </fr>
          SWAP OVER R> M+ !  ( addrneu ) <ok></ok><fl>0F51 3575 </fl><fr>0F56 3575 </fr>
          1- 04 000 MLIT OR  ( a' ) <ok></ok><fl>0F56 3575 </fl><fr>0F5B 3575 </fr>
          END_IF <ok></ok><fl>0F5B 3575 </fl><fr>0F5B 3575 </fr>
        ZERLEG 3FFF AND      ( adr l ) <ok></ok><fl>0F5B 3575 </fl><fr>0F5E 3575 </fr>
        BEGIN 2DUP M+ 1- @ 0= OVER 1 > AND WHILE 1- REPEAT ( adr lneu ) <ok></ok><fl>0F5E 3575 </fl><fr>0F6A 3575 </fr>
        OVER @ OBJ? 0= OVER 1 = AND IF DROP @ ELSE <ok></ok><fl>0F6A 3575 </fl><fr>0F76 3575 </fr>
          SWAP 1- SWAP       ( addr-1 lneu ) <ok></ok><fl>0F76 3575 </fl><fr>0F79 3575 </fr>
          04 000 MLIT OR OVER ! 04 000 MLIT OR <ok></ok><fl>0F79 3575 </fl><fr>0F83 3575 </fr>
          END_IF   <ok></ok><fl>0F83 3575 </fl><fr>0F83 3575 </fr>
        END_IF <ok></ok><fl>0F83 3575 </fl><fr>0F83 3575 </fr>
    END_IF <ok></ok><fl>0F83 3575 </fl><fr>0F83 3575 </fr>
  ; <ok></ok><fl>0F83 3575 </fl><fr>0F84 3575 </fr>
   <ok></ok>
: . ( obj --> ) <ok></ok><fl>0F84 3575 </fl><fr>0F88 3577 </fr>
  DUP OBJ? IF <ok></ok><fl>0F88 3577 </fl><fr>0F8B 3577 </fr>
    ." [ " <ok></ok><fl>0F8B 3577 </fl><fr>0F8E 357A </fr>
    ZERLEG 3FFF AND OVER M+ SWAP ( eadr+1 aadr ) <ok></ok><fl>0F8E 357A </fl><fr>0F94 357A </fr>
    BEGIN 2DUP > WHILE DUP @ RECURSE 1+ REPEAT 2DROP <ok></ok><fl>0F94 357A </fl><fr>0F9D 357A </fr>
     ." ] " <ok></ok><fl>0F9D 357A </fl><fr>0FA0 357D </fr>
    ELSE . END_IF <ok></ok><fl>0FA0 357D </fl><fr>0FA2 357D </fr>
  ; <ok></ok><fl>0FA2 357D </fl><fr>0FA3 357D </fr>
: B. SWAP . . ; ( und hier nochmal ) <ok></ok><fl>0FA3 357D </fl><fr>0FAB 3580 </fr>
 <ok></ok>
7 DUP . <ok>7 </ok>
2 9 H DUP . <ok>[ 7 0 9 ] </ok>
3 11 H DUP . <ok>[ 7 0 9 11 ] </ok>
1 4 1 6 H H DUP . <ok>[ 7 [ 4 6 ] 9 11 ] </ok>
1 G 2 88 H H DUP .  <ok>[ 7 [ 4 6 88 ] 9 11 ] </ok>
1 G 2 0 H H DUP . <ok>[ 7 [ 4 6 ] 9 11 ] </ok>
0 G 2 1987 H H DUP . <ok>[ [ 7 0 1987 ] [ 4 6 ] 9 11 ] </ok>
1 0 H DUP . <ok>[ [ 7 0 1987 ] 0 9 11 ] </ok>
3 0 H DUP . <ok>[ [ 7 0 1987 ] 0 9 ] </ok>
2 0 H DUP . <ok>[ [ 7 0 1987 ] ] </ok>
2 2444 H DUP . <ok>[ [ 7 0 1987 ] 0 2444 ] </ok>
0 7777777 H DUP . <ok>[ 7777777 0 2444 ] </ok>
2 0 H DUP . <ok>7777777 </ok>
 <ok></ok>
 <ok></ok>
0 <ok></ok>
0 0 0 1 H 1 2 H 2 5 H H DUP . <ok>[ [ 1 2 5 ] ] </ok>
1 0 0 3 H 1 4 H 2 8 H H DUP . <ok>[ [ 1 2 5 ] [ 3 4 8 ] ] </ok>
2 0 0 9 H 1 2 H 2 1 H H CR DUP . <ok>
[ [ 1 2 5 ] [ 3 4 8 ] [ 9 2 1 ] ] </ok>
 <ok></ok>
0 1 4 H DUP . <ok>[ 0 4 ] </ok>
0 0 0 1 4 H H . <ok>[ [ 0 4 ] ] </ok>
 <ok></ok>
0  <ok></ok>
0 0 0 60 H 1 30 H 2 20 H H DUP . <ok>[ [ 60 30 20 ] ] </ok>
1 0 0 30 H 1 20 H 2 15 H H DUP . <ok>[ [ 60 30 20 ] [ 30 20 15 ] ] </ok>
2 0 0 20 H 1 15 H 2 12 H H CR DUP . <ok>
[ [ 60 30 20 ] [ 30 20 15 ] [ 20 15 12 ] ] </ok>
 <ok></ok>
0 VARIABLE SPMERK <ok></ok><fl>0FAB 3580 </fl><fr>0FB0 3587 </fr>
: [ ( ---> spmerk ) <ok></ok><fl>0FB0 3587 </fl><fr>0FB4 3589 </fr>
  SPMERK @ SP @ SPMERK ! <ok></ok><fl>0FB4 3589 </fl><fr>0FBA 3589 </fr>
  ; <ok></ok><fl>0FBA 3589 </fl><fr>0FBB 3589 </fr>
 <ok></ok>
: ] ( spmerk a b c d ... z --> matrix ) <ok></ok><fl>0FBB 3589 </fl><fr>0FBF 358B </fr>
  0 BEGIN SP @ 1- SPMERK @ M- WHILE <ok></ok><fl>0FBF 358B </fl><fr>0FC7 358B </fr>
    SP @ 2 M- SPMERK @ M- ROT H REPEAT <ok></ok><fl>0FC7 358B </fl><fr>0FD1 358B </fr>
  SWAP SPMERK ! <ok></ok><fl>0FD1 358B </fl><fr>0FD4 358B </fr>
  ; <ok></ok><fl>0FD4 358B </fl><fr>0FD5 358B </fr>
</sekt> 
 <ok></ok>
<sekt inhalt="Matrix invertieren"> 
: OBJ+0 ( obj --> obj+0 ) <ok></ok><fl>0FD5 358B </fl><fr>0FD9 3591 </fr>
  DUP OBJ? IF DUP >R <ok></ok><fl>0FD9 3591 </fl><fr>0FDE 3591 </fr>
    ZERLEG 3FFF AND          ( adr n ) <ok></ok><fl>0FDE 3591 </fl><fr>0FE1 3591 </fr>
    SWAP OVER M+ 1- SWAP     ( eadr-1 n ) <ok></ok><fl>0FE1 3591 </fl><fr>0FE6 3591 </fr>
      BEGIN DUP WHILE SWAP   ( n eadr-1 ) <ok></ok><fl>0FE6 3591 </fl><fr>0FE9 3591 </fr>
        DUP @ RECURSE OVER ! ( n eadr-1 ) <ok></ok><fl>0FE9 3591 </fl><fr>0FEE 3591 </fr>
        1- SWAP 1-           ( eadr-1 n-1 ) <ok></ok><fl>0FEE 3591 </fl><fr>0FF1 3591 </fr>
        REPEAT               ( adr-1 0 ) <ok></ok><fl>0FF1 3591 </fl><fr>0FF2 3591 </fr>
    2DROP R>                 ( obj ) <ok></ok><fl>0FF2 3591 </fl><fr>0FF4 3591 </fr>
    ELSE A+0 END_IF <ok></ok><fl>0FF4 3591 </fl><fr>0FF6 3591 </fr>
  ; <ok></ok><fl>0FF6 3591 </fl><fr>0FF7 3591 </fr>
 <ok></ok>
[ 12 18 1B ] OBJ+0 . <ok>[ 12 18 1B ] </ok>
 <ok></ok>
: OBJDUMP ( obj --> ) <ok></ok><fl>0FF7 3591 </fl><fr>0FFB 3599 </fr>
  DUP OBJ? IF <ok></ok><fl>0FFB 3599 </fl><fr>0FFE 3599 </fr>
    ZERLEG 3FFF AND                ( adr n ) <ok></ok><fl>0FFE 3599 </fl><fr>1001 3599 </fr>
      BEGIN DUP WHILE SWAP         ( n adr ) <ok></ok><fl>1001 3599 </fl><fr>1004 3599 </fr>
        CR OVER M. DUP M. DUP @    ( n adr a ) <ok></ok><fl>1004 3599 </fl><fr>100B 3599 </fr>
        DUP M. DUP ABS 3FFF > NOT IF -1 M. -1 M. <ok></ok><fl>100B 3599 </fl><fr>1017 3599 </fr>
          ELSE DUP ABS ZERLEG M. M. END_IF <ok></ok><fl>1017 3599 </fl><fr>101D 3599 </fr>
        DUP . RECURSE              ( n adr ) <ok></ok><fl>101D 3599 </fl><fr>1020 3599 </fr>
        1+ SWAP 1-                 ( adr+1 n-1 ) <ok></ok><fl>1020 3599 </fl><fr>1023 3599 </fr>
        REPEAT                     ( adr+n 0 ) <ok></ok><fl>1023 3599 </fl><fr>1024 3599 </fr>
    2DROP                          ( ) <ok></ok><fl>1024 3599 </fl><fr>1025 3599 </fr>
    ELSE DROP END_IF <ok></ok><fl>1025 3599 </fl><fr>1027 3599 </fr>
  ; <ok></ok><fl>1027 3599 </fl><fr>1028 3599 </fr>
 <ok></ok>
[ 12 18 1B ] OBJDUMP <ok>
0003 1C72 0012 FFFF FFFF 12 
0002 1C73 0018 FFFF FFFF 18 
0001 1C74 001B FFFF FFFF 1B </ok>
[ [ 12 18 1B ] [ 1E 21 24 ] ] OBJDUMP <ok>
0002 1C7E 5C75 4003 1C76 [ 12 18 1B ] 
0003 1C76 0012 FFFF FFFF 12 
0002 1C77 0018 FFFF FFFF 18 
0001 1C78 001B FFFF FFFF 1B 
0001 1C7F 5C79 4003 1C7A [ 1E 21 24 ] 
0003 1C7A 001E FFFF FFFF 1E 
0002 1C7B 0021 FFFF FFFF 21 
0001 1C7C 0024 FFFF FFFF 24 </ok>
 <ok></ok>
: OBJ_STRUCT_COPY ( obj --> copy ) <ok></ok><fl>1028 3599 </fl><fr>102C 35A9 </fr>
  DUP OBJ? IF <ok></ok><fl>102C 35A9 </fl><fr>102F 35A9 </fr>
    ERGEBNIS @ 04 000 MLIT OR SWAP   ( copy obj ) <ok></ok><fl>102F 35A9 </fl><fr>1036 35A9 </fr>
    ZERLEG DUP ERGEBNIS @ ! 3FFF AND ( copy adr n ) <ok></ok><fl>1036 35A9 </fl><fr>103D 35A9 </fr>
    ERGEBNIS @ 1+ SWAP               ( copy adr erg+1 n ) <ok></ok><fl>103D 35A9 </fl><fr>1041 35A9 </fr>
    2DUP M+ ERGEBNIS_NEU!            ( copy adr erg+1 n ) <ok></ok><fl>1041 35A9 </fl><fr>1044 35A9 </fr>
    ROT ROT BEGIN                    ( copy n adr erg+1 ) <ok></ok><fl>1044 35A9 </fl><fr>1046 35A9 </fr>
      OVER @ RECURSE OVER !          ( copy n adr erg+1 ) <ok></ok><fl>1046 35A9 </fl><fr>104B 35A9 </fr>
      ROT 1- DUP WHILE               ( copy adr erg+1 n-1 ) <ok></ok><fl>104B 35A9 </fl><fr>104F 35A9 </fr>
        ROT 1+ ROT 1+ REPEAT         ( copy n-1 adr+1 erg+2 ) <ok></ok><fl>104F 35A9 </fl><fr>1054 35A9 </fr>
    2DROP DROP                       ( copy ) <ok></ok><fl>1054 35A9 </fl><fr>1056 35A9 </fr>
    ELSE A+0 END_IF <ok></ok><fl>1056 35A9 </fl><fr>1058 35A9 </fr>
  ; <ok></ok><fl>1058 35A9 </fl><fr>1059 35A9 </fr>
 <ok></ok>
[ 111 222 333 ] DUP M. OBJ_STRUCT_COPY M. <ok>5C80 5C84 </ok>
[ [ 1  1 ] [ 3 2 ^ 3 4 ^ ] ] DUP M. OBJ_STRUCT_COPY M. <ok>5C8E 5C91 </ok>
 <ok></ok>
: SIZE ( obj --> n ) <ok></ok><fl>1059 35A9 </fl><fr>105D 35AE </fr>
  DUP OBJ? IF <ok></ok><fl>105D 35AE </fl><fr>1060 35AE </fr>
    ZERLEG SWAP DROP 3FFF AND  <ok></ok><fl>1060 35AE </fl><fr>1065 35AE </fr>
    ELSE DROP 1 END_IF  <ok></ok><fl>1065 35AE </fl><fr>1068 35AE </fr>
  ; <ok></ok><fl>1068 35AE </fl><fr>1069 35AE </fr>
 <ok></ok>
0 VARIABLE AMERK <ok></ok><fl>1069 35AE </fl><fr>106E 35B4 </fr>
0 VARIABLE ACBIT <ok></ok><fl>106E 35B4 </fl><fr>1073 35BA </fr>
0 VARIABLE ADBIT <ok></ok><fl>1073 35BA </fl><fr>1078 35C0 </fr>
: ADEBUG1 ACBIT @ IF CR CR ." ADEBUG1 " ERGEBNIS M? >R 2OVER B. 2DUP B. R> DUP . END_IF -1 2D04 ! ; <ok></ok><fl>1078 35C0 </fl><fr>1092 35D1 </fr>
: ADEBUG2 0 2D04 ! ACBIT @ IF CR CR ." ADEBUG2 " ERGEBNIS M? OVER . DUP . END_IF ; <ok></ok><fl>1092 35D1 </fl><fr>10A8 35E2 </fr>
 <ok></ok>
: [A*x-Y*Z]/gx ( A gx x Y Z --> A' x ) <ok></ok><fl>10A8 35E2 </fl><fr>10AC 35EF </fr>
  ( L0=nr L1=Nj L2=Nk L3=j L4=k L5=Y L6=Z L7=alternenner ) <ok></ok><fl>10AC 35EF </fl><fr>10AC 35EF </fr>
  8 LOCAL NEBENRECHNUNG L0 ! <ok></ok><fl>10AC 35EF </fl><fr>10B1 35EF </fr>
  ADEBUG1 <ok></ok><fl>10B1 35EF </fl><fr>10B2 35EF </fr>
  OVER SIZE L1 ! DUP SIZE L2 ! <ok></ok><fl>10B2 35EF </fl><fr>10BA 35EF </fr>
  L6 ! L5 ! SWAP L7 ! <ok></ok><fl>10BA 35EF </fl><fr>10C1 35EF </fr>
  L1 @ L3 ! BEGIN -1 L3 +! <ok></ok><fl>10C1 35EF </fl><fr>10C8 35EF </fr>
    OVER L3 @ L ( mat nenner mat[L3] ) <ok></ok><fl>10C8 35EF </fl><fr>10CC 35EF </fr>
    L2 @ L4 ! BEGIN -1 L4 +! ( CR L3 M? L4 M? ERGEBNIS M? <ok></ok><fl>10CC 35EF </fl><fr>10D3 35EF </fr>
      NEBENRECHNUNG ROT ROT SWAP ( mat erg mat[L3] nenner ) <ok></ok><fl>10D3 35EF </fl><fr>10D7 35EF </fr>
      OVER L4 @ L OVER * <ok></ok><fl>10D7 35EF </fl><fr>10DD 35EF </fr>
      L5 @ L3 @ L L6 @ L4 @ L * - <ok></ok><fl>10DD 35EF </fl><fr>10E9 35EF </fr>
      L7 @ / ( mat erg mat[L3] nenner bijneu ) <ok></ok><fl>10E9 35EF </fl><fr>10EC 35EF </fr>
      2SWAP SWAP ( mat nenner bijneu mat[L3] erg ) <ok></ok><fl>10EC 35EF </fl><fr>10EE 35EF </fr>
      HAUPTRECHNUNG SWAP A+0 ( mat nenner mat[L3] bijneu+0 ) <ok></ok><fl>10EE 35EF </fl><fr>10F1 35EF </fr>
      SWAP L4 @ ROT H ( mat nenner mat[L3]neu ) <ok></ok><fl>10F1 35EF </fl><fr>10F6 35EF </fr>
      L4 @ 0= UNTIL <ok></ok><fl>10F6 35EF </fl><fr>10FA 35EF </fr>
    ROT L3 @ ROT H SWAP ( matneu nenner ) <ok></ok><fl>10FA 35EF </fl><fr>1100 35EF </fr>
    L3 @ 0= UNTIL <ok></ok><fl>1100 35EF </fl><fr>1104 35EF </fr>
  A+0 ( verschiebt nenner hinter matneu ) <ok></ok><fl>1104 35EF </fl><fr>1105 35EF </fr>
  L0 @ HAUPTRECHNUNG SWAP OBJ+0 SWAP A+0 ( A' x ) <ok></ok><fl>1105 35EF </fl><fr>110C 35EF </fr>
  -1 AMERK +! <ok></ok><fl>110C 35EF </fl><fr>110F 35EF </fr>
  ADEBUG2 <ok></ok><fl>110F 35EF </fl><fr>1110 35EF </fr>
  END_LOCAL <ok></ok><fl>1110 35EF </fl><fr>1111 35EF </fr>
  ; <ok></ok><fl>1111 35EF </fl><fr>1112 35EF </fr>
 <ok></ok>
( DECIMAL <ok></ok>
( [ [ 1   1   1    1 ] <ok></ok>
(   [ 2   4   8   16 ] <ok></ok>
(   [ 3   9  27   81 ] <ok></ok>
(   [ 4  16  64  256 ] ] 1 SP ? <ok></ok>
( 1 [ 2 2 3 4 ] [ 0 1 1 1 ] [A*x-Y*Z]/gx OVER . DUP .  <ok></ok>
( [ [ 1 -1 -1 -1 ] [ 2 2 6 14 ] [ 3 6 24 78 ] [ 4 12 60 252 ] ] 1 ok <ok></ok>
( 2 [ -1 3 6 12 ] [ 2 1 6 14 ] [A*x-Y*Z]/gx OVER . DUP .  <ok></ok>
(  [ [ 4 -1 4 12 ] [ -2 1 -6 -14 ] [ -6 6 12 72 ] [ -16 12 48 336 ] ] 2 ok <ok></ok>
( 12 [ 4 -6 14 48 ] [ -6 6 10 72 ] [A*x-Y*Z]/gx OVER . DUP .  <ok></ok>
( [ [ 36 -18 4 -72 ] [ -30 24 -6 132 ] [ 6 -6 2 -72 ] [ 48 -72 48 288 ] ] 12 140 ok <ok></ok>
( 288 [ -72 132 -72 300 ] [ 48 -72 48 276 ] [A*x-Y*Z]/gx OVER . DUP .  <ok></ok>
(  [ [ 1152 -864 384 -72 ] [ -1248 1368 -672 132 ] [ 432 -576 336 -72 ] [ -48 72 -48 12 ] ] 288 ok <ok></ok>
 <ok></ok>
: INVERTIEREN ( matrix dim --> invmat nenner ) <h href="INVERTIEREN.xml" /> <ok></ok><fl>1112 35EF </fl><fr>1116 35FB </fr>
  ( L0=nr L1=N L2=i L3=j L4=k L5=Y L6=Z L7=alternenner ) <ok></ok><fl>1116 35FB </fl><fr>1116 35FB </fr>
  8 LOCAL NEBENRECHNUNG L0 ! <ok></ok><fl>1116 35FB </fl><fr>111B 35FB </fr>
  L1 ! 1 ( mat nenner ) <ok></ok><fl>111B 35FB </fl><fr>111E 35FB </fr>
  0 L2 ! BEGIN ( CR L2 M? ERGEBNIS M? <ok></ok><fl>111E 35FB </fl><fr>1121 35FB </fr>
    L7 ! ( mat ) 0 L5 ! 0 L6 ! <ok></ok><fl>1121 35FB </fl><fr>1129 35FB </fr>
    DUP L2 @ L L2 @ L ( mat neuernenner ) <ok></ok><fl>1129 35FB </fl><fr>1130 35FB </fr>
    L1 @ L3 ! BEGIN -1 L3 +! <ok></ok><fl>1130 35FB </fl><fr>1137 35FB </fr>
      OVER L3 @ L L2 @ L L5 @ L3 @ ROT H L5 ! <ok></ok><fl>1137 35FB </fl><fr>1146 35FB </fr>
      OVER L2 @ L L3 @ L L6 @ L3 @ ROT H L6 ! <ok></ok><fl>1146 35FB </fl><fr>1155 35FB </fr>
      L3 @ 0= UNTIL <ok></ok><fl>1155 35FB </fl><fr>1159 35FB </fr>
    L5 @ L2 @ L L7 @ + L5 @ L2 @ ROT H L5 ! <ok></ok><fl>1159 35FB </fl><fr>1169 35FB </fr>
    L6 @ L2 @ L L7 @ - L6 @ L2 @ ROT H L6 ! <ok></ok><fl>1169 35FB </fl><fr>1179 35FB </fr>
    L7 @ SWAP L5 @ L6 @ [A*x-Y*Z]/gx <ok></ok><fl>1179 35FB </fl><fr>1181 35FB </fr>
    1 L2 +! L2 @ L1 @ = UNTIL <ok></ok><fl>1181 35FB </fl><fr>118A 35FB </fr>
  L0 @ HAUPTRECHNUNG SWAP OBJ+0 SWAP A+0 ( A' x ) <ok></ok><fl>118A 35FB </fl><fr>1191 35FB </fr>
  END_LOCAL <ok></ok><fl>1191 35FB </fl><fr>1192 35FB </fr>
  ; <ok></ok><fl>1192 35FB </fl><fr>1193 35FB </fr>
 <ok></ok>
( so und jetzt anwenden ) <ok></ok>
 <ok></ok>
[ [ 3C 1E 14 ] ( dezimal 60 30 20 ) <ok></ok>
  [ 1E 14 0F ] ( dezimal 30 20 15 ) <ok></ok>
  [ 14 0F 0C ] ( dezimal 20 15 12 ) <ok></ok>
  ] 3 <ok></ok>
OVER . DUP M. <ok>[ [ 3C 1E 14 ] [ 1E 14 F ] [ 14 F C ] ] 0003 </ok>
INVERTIEREN <ok></ok>
OVER . DUP . <ok>[ [ F -3C 32 ] [ -3C 140 -12C ] [ 32 -12C 12C ] ] 64 </ok>
( herauskommen muss dabei ) <ok></ok>
(             [ [ F -3C 32 ] [ -3C 140 -12C ] [ 32 -12C 12C ] ] 64 ) <ok></ok>
( dezimal        15 -60 ...                                      100 ) <ok></ok>
 <ok></ok>
 <ok></ok>
( paar Vandermonde-Matrizen invertieren: ) <ok></ok>
INIT <ok></ok>
[ [ 1 1 1 1 ] <ok></ok>
  [ 2 1 ^ 2 2 ^ 2 3 ^ 2 4 ^ ] <ok></ok>
  [ 3 1 ^ 3 2 ^ 3 3 ^ 3 4 ^ ] <ok></ok>
  [ 4 1 ^ 4 2 ^ 4 3 ^ 4 4 ^ ] <ok></ok>
  ] <ok></ok>
4 INVERTIEREN <ok></ok>
OVER . DUP . <ok>[ [ 480 -360 180 -48 ] [ -4E0 558 -2A0 84 ] [ 1B0 -240 150 -48 ] [ -30 48 -30 C ] ] 120 </ok>
ERGEBNIS M? <ok>1C19 </ok>
( herauskommen soll [ [ 480 -360 180 -48 ] [ -4E0 558 -2A0 84 ] ... ] 120 ) <ok></ok>
 <ok></ok>
INIT <ok></ok>
[ [ 1 1 1 1 1 ] <ok></ok>
  [ 2 1 ^ 2 2 ^ 2 3 ^ 2 4 ^ 2 5 ^ ] <ok></ok>
  [ 3 1 ^ 3 2 ^ 3 3 ^ 3 4 ^ 3 5 ^ ] <ok></ok>
  [ 4 1 ^ 4 2 ^ 4 3 ^ 4 4 ^ 4 5 ^ ] <ok></ok>
  [ 5 1 ^ 5 2 ^ 5 3 ^ 5 4 ^ 5 5 ^ ] <ok></ok>
  ] <ok></ok>
5 INVERTIEREN <ok></ok>
OVER . DUP . <ok>[ [ 2A300 -2A300 1C200 -A8C0 1B00 ] [ -36240 4B3C0 -36D80 15720 -3840 ] [ 18F60 -297C0 22740 -E6A0 2760 ] [ -4EC0 9240 -8700 3DE0 -B40 ] [ 5A0 -B40 B40 -5A0 120 ] ] 8700 </ok>
ERGEBNIS M? <ok>1C4E </ok>
( herauskommen soll  [ [ 2A300 -2A300 ... ] ] 8700 ) <ok></ok>
 <ok></ok>
: VANDERMONDEMATRIX ( n --> mat ) <ok></ok><fl>1193 35FB </fl><fr>1197 360D </fr>
  3 LOCAL <ok></ok><fl>1197 360D </fl><fr>1199 360D </fr>
  L0 ! <ok></ok><fl>1199 360D </fl><fr>119B 360D </fr>
  0  <ok></ok><fl>119B 360D </fl><fr>119C 360D </fr>
  L0 @ L1 ! BEGIN L1 @ DUP WHILE 1- L1 ! <ok></ok><fl>119C 360D </fl><fr>11A7 360D </fr>
    L1 @ G <ok></ok><fl>11A7 360D </fl><fr>11AA 360D </fr>
    L0 @ L2 ! BEGIN L2 @ DUP WHILE 1- L2 ! <ok></ok><fl>11AA 360D </fl><fr>11B5 360D </fr>
      L2 @ L1 @ 1+ L2 @ 1+ ^  <ok></ok><fl>11B5 360D </fl><fr>11BE 360D </fr>
      H <ok></ok><fl>11BE 360D </fl><fr>11BF 360D </fr>
      REPEAT DROP <ok></ok><fl>11BF 360D </fl><fr>11C1 360D </fr>
    H <ok></ok><fl>11C1 360D </fl><fr>11C2 360D </fr>
    REPEAT DROP <ok></ok><fl>11C2 360D </fl><fr>11C4 360D </fr>
  END_LOCAL <ok></ok><fl>11C4 360D </fl><fr>11C5 360D </fr>
  ; <ok></ok><fl>11C5 360D </fl><fr>11C6 360D </fr>
 <ok></ok>
( 4 VANDERMONDEMATRIX DUP . <ok></ok>
 <ok></ok>
INIT <ok></ok>
4 VANDERMONDEMATRIX <ok></ok>
4 INVERTIEREN <ok></ok>
OVER . DUP . <ok>[ [ 480 -360 180 -48 ] [ -4E0 558 -2A0 84 ] [ 1B0 -240 150 -48 ] [ -30 48 -30 C ] ] 120 </ok>
ERGEBNIS M? <ok>1C19 </ok>
( herauskommen soll [ [ 480 -360 180 -48 ] [ -4E0 558 -2A0 84 ] [ 1B0 -240 150 -48 ] [ -30 48 -30 C ] ] 120 <ok></ok>
( gekürzt [ [ 60 -48 20 -6 ] [ -68 72 -38 B ] [ 24 -30 1C -6 ] [ -4 6 -4 1 ] ] 18 ok <ok></ok>
 <ok></ok>
INIT <ok></ok>
5 VANDERMONDEMATRIX <ok></ok>
5 INVERTIEREN <ok></ok>
OVER . DUP . <ok>[ [ 2A300 -2A300 1C200 -A8C0 1B00 ] [ -36240 4B3C0 -36D80 15720 -3840 ] [ 18F60 -297C0 22740 -E6A0 2760 ] [ -4EC0 9240 -8700 3DE0 -B40 ] [ 5A0 -B40 B40 -5A0 120 ] ] 8700 </ok>
ERGEBNIS M? <ok>1C4E </ok>
( herauskommen soll [ [ 2A300 -2A300 1C200 -A8C0 1B00 ] [ -36240 4B3C0 -36D80 15720 -3840 ] [ 18F60 -297C0 22740 -E6A0 2760 ] [ -4EC0 9240 -8700 3DE0 -B40 ] [ 5A0 -B40 B40 -5A0 120 ] ] 8700 <ok></ok>
( gekürzt [ [ 258 -258 190 -96 18 ] [ -302 42E -30C 131 -32 ] ... [ 5 -A A -5 1 ] ] 78 ok <ok></ok>
 <ok></ok>
INIT <ok></ok>
6 VANDERMONDEMATRIX <ok></ok>
6 INVERTIEREN <ok></ok>
OVER . DUP . <ok>[ [ 8E62000 -B1FA800 9E34000 -58FD400 1C7A000 -3F4800 ] [ -CE74800 15B0EE00 -14EDD000 C3C6C00 -4012800 907E00 ] [ 72B2800 -E3E9500 F537000 -97C6B00 336A800 -76A700 ] [ -1EA6E00 43BB100 -4FC2C00 34E6300 -12C9600 2CD300 ] [ 3F4800 -964B00 BDD800 -867900 32A000 -7E900 ] [ -32A00 7E900 -A8C00 7E900 -32A00 8700 ] ] 17BB000 </ok>
ERGEBNIS M? <ok>1CA1 </ok>
( herauskommen soll [ [ 8E62000 -B1FA800 9E34000 ... -32A00 8700 ] ] 17BB000 <ok></ok>
( gekürzt [ [ -10E0 1518 -12C0 A8C -360 78 ] ... [ 6 -F 14 -F 6 -1 ] ] -2D0 ok <ok></ok>
 <ok></ok>
INIT <ok></ok>
7 VANDERMONDEMATRIX <ok></ok>
ERGEBNIS M? <ok>1C52 </ok>
7 INVERTIEREN <ok></ok>
OVER . DUP . <ok>[ [ CC65AF0000 -13298868000 154A9790000 -FF7F1AC000 7AA3690000 -2210F28000 42BDF0000 ] [ -1459356C000 281A9456000 -301BBE14000 25697808000 -12574BB4000 52A6ADE000 -A3848C000 ] [ CEFE230000 -1DE0593F000 277092A8000 -2040FF81000 104D98A0000 -4AFC775000 968A48000 ] [ -438629D000 ACC3A94000 -F72EC73000 D621620000 -708A45B000 21414E4000 -4421E5000 ] [ BF6B6B000 -20D97C2000 3215DE7000 -2DD3C02000 192F459000 -7B4986000 1038D5000 ] [ -11850F000 329CD6000 -511C29000 4DDD98000 -2CC5D1000 E467E000 -1F257000 ] [ A61D000 -1F257000 33E91000 -33E91000 1F257000 -A61D000 17BB000 ] ] 1D33190000 </ok>
ERGEBNIS M? <ok>1D11 </ok>
( herauskommen soll [ [ CC65AF0000 -13298868000 ... 17BB000 ] ] 1D33190000  <ok></ok>
( gekürzt [ [ -89D0 CEB8 -E5B0 AC44 -52B0 16F8 -2D0 ]  ... [ -7 15 -23 23 -15 7 -1 ] ] -13B0 ok <ok></ok>
 <ok></ok>
INIT <ok></ok>
8 VANDERMONDEMATRIX <ok></ok>
ERGEBNIS M? <ok>1C7A </ok>
( 8 INVERTIEREN ( nicht mehr wegen [A*x-Y*Z]/gx in INVERTIEREN <ok></ok>
OVER . DUP . <ok>1D33190000 [ [ 1 1 1 1 1 1 1 1 ] [ 2 4 8 10 20 40 80 100 ] [ 3 9 1B 51 F3 2D9 88B 19A1 ] [ 4 10 40 100 400 1000 4000 10000 ] [ 5 19 7D 271 C35 3D09 1312D 5F5E1 ] [ 6 24 D8 510 1E60 B640 44580 19A100 ] [ 7 31 157 961 41A7 1CB91 C90F7 57F6C1 ] [ 8 40 200 1000 8000 40000 200000 1000000 ] ] </ok>
ERGEBNIS M? <ok>1C7A </ok>
( herauskommen soll [ [ 8FB77F0C000000 -FB811E55000000 ... 1D33190000 ] ] 11F6EFE1800000 <ok></ok>
( gekürzt [ [ 4EC00 -89D00 B7C00 -AC440 6E400 -2DF00 B400 -13B0 ] ... [ -( 1C -38 46 -38 1C -8 1 ] ] 9D80 ok <ok></ok>
 <ok></ok>
INIT <ok></ok>
9 VANDERMONDEMATRIX <ok></ok>
ERGEBNIS M? <ok>1CAC </ok>
9 ( INVERTIEREN <ok></ok>
OVER . DUP . <ok>[ [ 1 1 1 1 1 1 1 1 1 ] [ 2 4 8 10 20 40 80 100 200 ] [ 3 9 1B 51 F3 2D9 88B 19A1 4CE3 ] [ 4 10 40 100 400 1000 4000 10000 40000 ] [ 5 19 7D 271 C35 3D09 1312D 5F5E1 1DCD65 ] [ 6 24 D8 510 1E60 B640 44580 19A100 99C600 ] [ 7 31 157 961 41A7 1CB91 C90F7 57F6C1 267BF47 ] [ 8 40 200 1000 8000 40000 200000 1000000 8000000 ] [ 9 51 2D9 19A1 E6A9 81BF1 48FB79 290D741 17179149 ] ] 9 </ok>
ERGEBNIS M? <ok>1CAC </ok>
( herauskommen soll [ [ 37F3F5B381040000000 ... 11F6EFE1800000 ] ] 6378D13F1E40000000 <ok></ok>
( gekürzt [ [ 31D580 -63AB00 9B0A00 -AE6B40 8B8900 -4D8500 1C7A00 -63AB0 9D80 ] ... [ 9 -24 54 -7E 7E -54 24 -9 1 ] ] 58980 ok <ok></ok>
 <ok></ok>
INIT <ok></ok>
0A VANDERMONDEMATRIX <ok></ok>
ERGEBNIS M? <ok>1CE8 </ok>
0A ( INVERTIEREN <ok></ok>
OVER . DUP . <ok>[ [ 1 1 1 1 1 1 1 1 1 1 ] [ 2 4 8 10 20 40 80 100 200 400 ] [ 3 9 1B 51 F3 2D9 88B 19A1 4CE3 E6A9 ] [ 4 10 40 100 400 1000 4000 10000 40000 100000 ] [ 5 19 7D 271 C35 3D09 1312D 5F5E1 1DCD65 9502F9 ] [ 6 24 D8 510 1E60 B640 44580 19A100 99C600 39AA400 ] [ 7 31 157 961 41A7 1CB91 C90F7 57F6C1 267BF47 10D63AF1 ] [ 8 40 200 1000 8000 40000 200000 1000000 8000000 40000000 ] [ 9 51 2D9 19A1 E6A9 81BF1 48FB79 290D741 17179149 CFD41B91 ] [ A 64 3E8 2710 186A0 F4240 989680 5F5E100 3B9ACA00 2540BE400 ] ] A </ok>
ERGEBNIS M? <ok>1CE8 </ok>
( herauskommen soll [ [ D726B3E61B37C18000000000 ... 6378D13F1E40000000 ] ] 1583DECA35EBF9C000000000 <ok></ok>
( gekürzt [ [ -229B600 4DDD980 -8A6D800 B5AFB80 ... -D2 78 -2D A -1 ] ] -375F00 ok <ok></ok>
 <ok></ok>
INIT <ok></ok>
0B VANDERMONDEMATRIX <ok></ok>
ERGEBNIS M? <ok>1D31 </ok>
( 0B INVERTIEREN OVER . DUP . ERGEBNIS M? <ok></ok>
( herauskommen soll [ [ 2331530F3797CA8619C400000000000 -57FB4FA60AFB7A4F406A00000000000 ... 1583DECA35EBF9C000000000 ] ] 333078D050DCC97D3CC00000000000 <ok></ok>
( gekürzt [ [ -1A2BE700 416DC180 -82DB8300 ... -14A A5 -37 B -1 ] ] -2611500 ok <ok></ok>
 <ok></ok>
INIT <ok></ok>
0C VANDERMONDEMATRIX <ok></ok>
ERGEBNIS M? <ok>1D88 </ok>
( 0C INVERTIEREN OVER . DUP . ERGEBNIS M? <ok></ok>
( herauskommen soll  <ok></ok>
( OVER . DUP . [ [ 1569BD000 -3AE2C7C00 82DB83000 ... -318 1EF -DC 42 -C 1 ] ] 1C8CFC00 ok <ok></ok>
 <ok></ok>
( mehr geht erstmal nicht weil nicht mehr Platz ) <ok></ok>
 <ok></ok>
 <ok></ok>
INIT <ok></ok>
[ [ 112  431  199 764 987 434 ] <ok></ok>
  [ 543 45 33 41 789 566 ] <ok></ok>
  [ 543 145 33 42 789 566 ] <ok></ok>
  [ 875 687 098 675 677 574 ] <ok></ok>
  [ 875 66B 0987 675 678 634 ] <ok></ok>
  [ 454 33 555 934 655 633 ] <ok></ok>
  ]  <ok></ok>
DUP . <ok>[ [ 112 431 199 764 987 434 ] [ 543 45 33 41 789 566 ] [ 543 145 33 42 789 566 ] [ 875 687 98 675 677 574 ] [ 875 66B 987 675 678 634 ] [ 454 33 555 934 655 633 ] ] </ok>
5 INVERTIEREN ( mat dim --> invmat nenner ) <ok></ok>
OVER . <ok>[ [ 1A2560D6905 -5D810E44AB2 55E9266EB0D -1B2551E284A -288B0BEAE2 434 ] [ 109699B81 107A3E6F1B70 -107CD0601B8E 1B1877EB9 -39C48111 566 ] [ 22F3B254 337543451B -3345D68E4E 1D6DE559519 -1D70043978C 566 ] [ -109699B8100 -AB037F3730F D4228F3910F -1B1877EB900 39C4811100 574 ] [ -11B37891A50 1AA4030A40B -399E2C1B8B6 131636ADED6 26D330C0E7 634 ] [ 454 33 555 934 655 633 ] ] </ok>
DUP . <ok>-106F8E3727FCF1 </ok>
</sekt> 
 <ok></ok>
<sekt inhalt="Reste die auch weggelassen werden können, wenn alles geht"> 
: VLIST <ok></ok><fl>11C6 360D </fl><fr>11CA 3613 </fr>
  LFA @ BEGIN  <ok></ok><fl>11CA 3613 </fl><fr>11CC 3613 </fr>
    DUP 1+ @ OVER 2 M+ @ TYPE 20 EMIT  <ok></ok><fl>11CC 3613 </fl><fr>11D6 3613 </fr>
    DUP @ WHILE DUP @ M+ REPEAT <ok></ok><fl>11D6 3613 </fl><fr>11DD 3613 </fr>
  DROP ; <ok></ok><fl>11DD 3613 </fl><fr>11DF 3613 </fr>
 <ok></ok>
: WLIST <ok></ok><fl>11DF 3613 </fl><fr>11E3 3619 </fr>
  LFA @ BEGIN ( CR ) DUP 4 M+ M. <ok></ok><fl>11E3 3619 </fl><fr>11E9 3619 </fr>
    DUP 1+ @ OVER 2 M+ @ TYPE 20 EMIT  <ok></ok><fl>11E9 3619 </fl><fr>11F3 3619 </fr>
    DUP @ WHILE DUP @ M+ REPEAT <ok></ok><fl>11F3 3619 </fl><fr>11FA 3619 </fr>
  DROP <ok></ok><fl>11FA 3619 </fl><fr>11FB 3619 </fr>
  ; <ok></ok><fl>11FB 3619 </fl><fr>11FC 3619 </fr>
 <ok></ok>
: FORGET ( /name/ ) <ok></ok><fl>11FC 3619 </fl><fr>1200 3620 </fr>
  20 WORD FIND IF  <ok></ok><fl>1200 3620 </fl><fr>1204 3620 </fr>
    DP ! <ok></ok><fl>1204 3620 </fl><fr>1206 3620 </fr>
    HERE DUP @ M+ LFA ! <ok></ok><fl>1206 3620 </fl><fr>120C 3620 </fr>
    HERE 1+ @ BZEIG ! <ok></ok><fl>120C 3620 </fl><fr>1211 3620 </fr>
    ELSE DROP ." nicht gefunden " END_IF <ok></ok><fl>1211 3620 </fl><fr>1216 3630 </fr>
  ; <ok></ok><fl>1216 3630 </fl><fr>1217 3630 </fr>
 <ok></ok>
: FEHLERTEXT ( n --> n ) <ok></ok><fl>1217 3630 </fl><fr>121B 363B </fr>
  CR <ok></ok><fl>121B 363B </fl><fr>121C 363B </fr>
  DUP 0 = IF ." Division durch Null" END_IF <ok></ok><fl>121C 363B </fl><fr>1223 364F </fr>
  DUP 3 = IF ." Wort nicht definiert" END_IF <ok></ok><fl>1223 364F </fl><fr>122A 3664 </fr>
  DUP 6 = IF ." Eingabezeile zu lang" END_IF <ok></ok><fl>122A 3664 </fl><fr>1231 3679 </fr>
  DUP 9 = IF ." Strukturfehler in IF END_IF BEGIN UNTIL DO LOOP " END_IF <ok></ok><fl>1231 3679 </fl><fr>1238 36AA </fr>
  DUP 12 = IF ." negativer Exponent" END_IF <ok></ok><fl>1238 36AA </fl><fr>123F 36BD </fr>
  DUP 369 = IF ." Zahlenspeicher voll" END_IF <ok></ok><fl>123F 36BD </fl><fr>1246 36D1 </fr>
  DUP 1234 = IF ." große ganze Zahlen kompilieren geht momentan nicht." END_IF <ok></ok><fl>1246 36D1 </fl><fr>124D 3706 </fr>
  ; <ok></ok><fl>124D 3706 </fl><fr>124E 3706 </fr>
 <ok></ok>
( ganz neu: Steuerungstasten: ^A bis ^G, weiter ^H=^A ^L=^B ... ) <ok></ok>
2F18 8 0 FILL <ok></ok>
: STRG: : HERE 3 M- DUP M. @ 1+ DUP M. @ DUP M. 40 M- HERE SWAP 7 AND 2F18 M+ ! ; <ok></ok><fl>124E 3706 </fl><fr>1269 370C </fr>
STRG: ^G 7 EMIT ." /1xPIEP/" ; <ok>126A 370D 0047 </ok><fl>1269 370C </fl><fr>1273 3718 </fr>
STRG: ^F 7 EMIT ." QUIT" QUIT ; <ok>1274 3719 0046 </ok><fl>1273 3718 </fl><fr>127E 3720 </fr>
STRG: ^A ." Angehalten für genau eine Eingabezeile: " <ok>127F 3721 0041 </ok><fl>127E 3720 </fl><fr>1285 374D </fr>
  CR 3A00 100 EXPECT INTERPRET ." ok"; <ok></ok><fl>1285 374D </fl><fr>128E 3750 </fr>
 <ok></ok>
: QUERY ( adr --> n ) TIB @ 100 EXPECT ; <ok></ok><fl>128E 3750 </fl><fr>1297 3756 </fr>
 <ok></ok>
IMMEDIATE: (*REM*)  <ok></ok><fl>1297 3756 </fl><fr>129B 375E </fr>
  3C EMIT ." /ok>" <ok></ok><fl>129B 375E </fl><fr>12A0 3763 </fr>
  BEGIN CR QUERY " (*END*)" Z= UNTIL <ok></ok><fl>12A0 3763 </fl><fr>12A7 376B </fr>
  3C EMIT ." ok>" <ok></ok><fl>12A7 376B </fl><fr>12AC 376F </fr>
  ; <ok></ok><fl>12AC 376F </fl><fr>12AD 376F </fr>
</sekt> 
 <ok></ok>
<sekt inhalt="Reste, die schon weggelassen sind"> 
(*REM*) <ok></ok>
 
( - LOOP's - sind aber sehr langsam ) 
: I RP @ 1+ @ ; 
: J RP @ 3 M+ @ ; 
: K RP @ 5 M+ @ ; 
: (DO) SWAP R> ROT ROT >R >R >R ; 
: (LOOP) R> R> 1+ DUP R LT IF >R 0  
  ELSE R> DROP DROP -1 END_IF SWAP >R ; 
: (+LOOP) R> R>  ROT DUP  0LT IF M+ R OVER 
  ELSE M+ DUP R END_IF LT IF >R 0  
  ELSE R> DROP DROP -1 END_IF SWAP >R  ; 
IMMEDIATE: DO COMPILE (DO) HERE ; 
IMMEDIATE: LOOP COMPILE (LOOP) 0BRANCH, ; 
IMMEDIATE: +LOOP COMPILE (+LOOP) 0BRANCH, ; 
( : LL 0 DO I M. LOOP ; 7 LL ( ok geht ) 
 
 
IMMEDIATE: () 0 WORD 2DROP ; 
: B. ( a b --> ) SWAP M. M. ; 
 
: LDUMP LFA @ HERE OVER M- DUMP ; 
 
A012 MCODE D+ 
A013 MCODE D- 
 
 
( - paar Geraeteadressen: ) 
D004 CONSTANT UHR 
D005 CONSTANT SWTI 
D00D CONSTANT UHRL 
2D05 CONSTANT XOFFINPUT 
 
 
: DABS ( h l --> h' l' ) 
  OVER 0LT IF 0 0 2SWAP D- END_IF ; 
 
 
( CASEOFS aus'm PSION: ) 
: CASEOFS ( n  /name/ --> ) 
  DUP RAMBUF 
  0 DO 
    0 I RAMP3 @ + ! 
    LOOP 
  ; 
 
: CASEOF: ( fn en --> ) 
  M+ HERE DPMERK @ M- SWAP ! 
  CSP! 1 STAT ! 
  ; 
 
: CASEOF ( fn en --> ) 
  M+ @ DUP IF 
    DPMERK @ M+ EXECUTE 
    ELSE DROP END_IF ; 
 
( - CASE ) 
( : BIT ( i n --> bit ) 
(   2 ROT DUP 0LT IF 99 ERROR ELSE  
(   ^ AND 0= 1+ END_IF ;  
 
: (OF) ( n r i --> f r' ) 
  ROT = DUP ROT OR ; 
: (RANGE-OF) ( n1 n2 r i --> f r' ) 
  DUP >R ROT > ROT R> > OR 0= DUP ROT OR ; 
( : (BIT-OF) ( n r i --> f r' ) 
(   ROT BIT DUP ROT OR ; 
 
IMMEDIATE: CASE ( n --> ) 
  " >R 0 >R"  
  INTERPRET ; 
IMMEDIATE: END_CASE ( --> ) 
  " R> R> 2DROP"  
  INTERPRET ; 
IMMEDIATE: OF ( n --> ) 
  " R> R (OF) >R IF"  
  INTERPRET ;               
IMMEDIATE: RANGE-OF ( n1 n2 --> ) 
  " R> R (RANGE-OF) >R IF"  
  INTERPRET ; 
IMMEDIATE: BIT-OF ( m --> ) 
  " R> R (BIT-OF) >R IF"  
  INTERPRET ; 
IMMEDIATE: ELSEOF ( --> ) 
  " R 0= IF" INTERPRET ; 
IMMEDIATE: END_OF ( --> ) 
  " END_IF" INTERPRET ; 
: ERR ." keine gültige RAM-Adresse" QUIT ; 
' ERR 4000 OR 22 ! 
' ERR 4000 OR 20 ! 
 
IMMEDIATE: /; 0 STAT ! CSP? HERE 1- @ 800 OR HERE 1- ! SMUDGE [ SMUDGE ] ;  
( : T 77 88 DROP /;  
( ' T 8 DUMP 
( : W PAUSENBIT ! /; 
( ' W 8 DUMP 
 
 
( Ausgabe von ESCAPE-Sequenzen: sie vertragen sich aber nicht mit xml, besser CSI nehmen ) 
20 WORD: ESC 1B EMIT BEGIN OVER C@ EMIT SWAP 1+ SWAP 1- DUP 0= UNTIL DROP ; 
ESC ]0;FORTY-FORTH 07 EMIT ( 07 EMIT schließt ] 
: FESTPOSITION ESC [s ESC [1;1H ESC [31m ; ( saveC Pos1,1 redcolor 
: RUCKPOSITION ESC [u ESC [39m ; ( restoreC defaultcolor 
 
( Alternativer Start mit ESCAPE-Sequenzen ) 
 
: QUIT2  
  RP0 @ RP ! 
  BEGIN  
    STAT @ 0= IF ESC [34m ." ok" END_IF CR ESC [39m  
    TIB @ 100 EXPECT ESC [36m INTERPRET  
    AGAIN ; 
 
( REPLACE: QUIT QUIT2 ; 
( QUIT 
 
: QUIT3 
  RP0 @ RP ! 
  BEGIN  
    STAT @ 0= IF ."   " END_IF 
    CR   
    CRBIT @ 2 AND IF 3C EMIT ." /ok>" END_IF 
    CRBIT @ 4 AND IF C2 EMIT 9B EMIT 33 EMIT 36 EMIT 6D EMIT END_IF 
    TIB @ 100 EXPECT  
    CRBIT @ 4 AND IF C2 EMIT 9B EMIT 33 EMIT 39 EMIT 6D EMIT END_IF 
    CRBIT @ 2 AND IF 3C EMIT ." ok>" END_IF 
    INTERPRET 
    AGAIN ; 
 
 
: IOSTART 
  2C40 2C00 DO I @ I ! LOOP 
  2D30 2D14 DO I @ I ! LOOP 
  ; 
IOSTART 
 
( wozu das RBIT war? für relatives CR ) 
: COMPILE, ( adr --> ) 
  RBIT @ IF 4000 ELSE  
    DP @ 1+ M- 0FFF AND 3000 END_IF 
    0000 M+ M+ , ; 
 
: a*a;;  
  A 2000 111111 FILL 
  B 2000 111111 FILL 
  C 4001 000000 FILL 
  0 2000 A 0 2000 B C SMUL 7 EMIT ; 
(*END*) <ok></ok>
</sekt> 
 <ok></ok>
<sekt inhalt="DEMO"> 
56 89 M* M. <ok>2E06 </ok>
77 88 M+ M. <ok>00FF </ok>
 <ok></ok>
( aktuelles Vokabular <ok></ok>
 <ok></ok>
VLIST <ok>(*REM*) QUERY ^A ^F ^G STRG: FEHLERTEXT FORGET WLIST VLIST VANDERMONDEMATRIX INVERTIEREN [A*x-Y*Z]/gx ADEBUG2 ADEBUG1 ADBIT ACBIT AMERK SIZE OBJ_STRUCT_COPY OBJDUMP OBJ+0 ] [ SPMERK B. . H G L OBJ? ZERLEG B. . ^ REPLACE: N" NNUMBER BK GGT MOD / * - + B+0 A+0 INIT SPEICHERDA RECHENBLOCK HAUPTRECHNUNG NEBENRECHNUNG BLOCKENDE BLOCKANFANG B. . HG0. /MOD RECURSE * - + 2OPERANDEN->2SLX SPEICHERHOL ERGEBNIS_NEU! OPERAND->SLX SLX->ERGEBNIS SLX->ERGEBNIS_KURZ TRIM UBIT SCHIEB SPEICHERENDE ZAHLENSPEICHER ERGEBNIS OPERAND2 OPERAND1 SDIV M/MOD DIV32 DI32 ADDIER SMUL C B A SUPERMULT MULT_II MULT_I MIN MAX DUMP FILL MOVE VARIABLE RAMP1 DUMPZ NG. LG. ; : COMPILE: IMMEDIATE: (:) (COMPILE:) (IMMEDIATE:) SMUDGE START QUIT INTERPRET CREATE COMPILE, LCFA FIND Z= WORD NUMBER DIGIT EXPECT KEYCODE2 KEY_INT INCR4 ' L7 L6 L5 L4 L3 L2 L1 L0 END_LOCAL LOCAL CSP? CSP! ERROR DISABLE FEHLERTEXT CR M? M. HG. TYPE DIG SHL16 EMIT KEY EXECUTE , R >R R> +! BYE M* > LT = M- 1- 1+ C! C@ REPEAT WHILE ELSE END_IF IF UNTIL AGAIN BEGIN 0BRANCH, BRANCH, ALLOT XSETBT JR0BIT JRBIT HERE ." " WORD: (WORD:) Z, B, NOOP 2DROP 2DUP 2OVER 2SWAP DROP ROT DUP OVER SWAP @ ! M+ OR AND NOT EMITCODE 0LT 0= U* U+ MINUS MCODE (MCODE:) RETURN VERSION LOCALADRESSE DUBIT CSP DPMERK BZEIG BANF LFA STAT DP ERRORNR IN4 IN3 IN2 IN1 TIB BASE CRDP CRBZEIG XOFF JRAMADR IRAMADR RP0 SMUDGEBIT XBIT PC RP SP KEYADR CONSTANT (CONSTANT:) LIT, ABS MLIT COMPILE } { ( </ok>
 <ok></ok>
( nochmal mit Speicheradressen, vor jedem Wort steht dessen "Linkfeld"_Adresse=Aufruf_Adresse-4 ) <ok></ok>
 <ok></ok>
WLIST <ok>129B (*REM*) 1292 QUERY 1282 ^A 1277 ^F 126D ^G 1252 STRG: 121B FEHLERTEXT 1200 FORGET 11E3 WLIST 11CA VLIST 1197 VANDERMONDEMATRIX 1116 INVERTIEREN 10AC [A*x-Y*Z]/gx 1096 ADEBUG2 107C ADEBUG1 1077 ADBIT 1072 ACBIT 106D AMERK 105D SIZE 102C OBJ_STRUCT_COPY 0FFB OBJDUMP 0FD9 OBJ+0 0FBF ] 0FB4 [ 0FAF SPMERK 0FA7 B. 0F88 . 0F00 H 0EF9 G 0EDD L 0EC3 OBJ? 0EB3 ZERLEG 0EAB B. 0E73 . 0E42 ^ 0E21 REPLACE: 0E19 N" 0D8C NNUMBER 0D79 BK 0D67 GGT 0D5A MOD 0D4C / 0D40 * 0D34 - 0D28 + 0D1F B+0 0D01 A+0 0CB4 INIT 0CA1 SPEICHERDA 0C94 RECHENBLOCK 0C8D HAUPTRECHNUNG 0C86 NEBENRECHNUNG 0C81 BLOCKENDE 0C7C BLOCKANFANG 0C74 B. 0C4F . 0C21 HG0. 0BD9 /MOD 0BCF RECURSE 0BC6 * 0BBF - 0BB6 + 0BA2 2OPERANDEN->2SLX 0B8F SPEICHERHOL 0B7C ERGEBNIS_NEU! 0B54 OPERAND->SLX 0B35 SLX->ERGEBNIS 0B25 SLX->ERGEBNIS_KURZ 0B0D TRIM 0B08 UBIT 0B03 SCHIEB 0AFE SPEICHERENDE 0AF9 ZAHLENSPEICHER 0AF4 ERGEBNIS 0AEF OPERAND2 0AEA OPERAND1 09EB SDIV 09E2 M/MOD 09D4 DIV32 09CE DI32 090A ADDIER 08C4 SMUL 08BF C 08BA B 08B5 A 08AA SUPERMULT 08A4 MULT_II 089E MULT_I 0894 MIN 088A MAX 087A DUMP 0867 FILL 0851 MOVE 0843 VARIABLE 083E RAMP1 07E1 DUMPZ 07D1 NG. 07B7 LG. 07AB ; 07A1 : 0797 COMPILE: 078D IMMEDIATE: 0781 (:) 077A (COMPILE:) 0773 (IMMEDIATE:) 076B SMUDGE 0760 START 0713 QUIT 06C6 INTERPRET 06B1 CREATE 06A7 COMPILE, 069E LCFA 065E FIND 062A Z= 05E4 WORD 0567 NUMBER 053E DIGIT 04D2 EXPECT 04AC KEYCODE2 047D KEY_INT 046B INCR4 045C ' 0453 L7 044A L6 0441 L5 0438 L4 042F L3 0426 L2 041D L1 0415 L0 0409 END_LOCAL 03FB LOCAL 03EE CSP? 03E5 CSP! 03C2 ERROR 03B1 DISABLE 03AC FEHLERTEXT 036D CR 0366 M? 035E M. 034C HG. 033C TYPE 032E DIG 0324 SHL16 031D EMIT 0312 KEY 030B EXECUTE 0300 , 02F7 R 02E2 >R 02CF R> 02C4 +! 02BB BYE 02B0 M* 02A9 > 02A2 LT 029B = 0294 M- 028D 1- 0286 1+ 0280 C! 027A C@ 0272 REPEAT 026C WHILE 0262 ELSE 0255 END_IF 024C IF 0246 UNTIL 0240 AGAIN 023A BEGIN 022F 0BRANCH, 0224 BRANCH, 021D ALLOT 020E XSETBT 0208 JR0BIT 0202 JRBIT 01FB HERE 01F4 ." 01EE " 01E0 WORD: 01D4 (WORD:) 01BD Z, 01B2 B, 01AC NOOP 01A6 2DROP 01A0 2DUP 019A 2OVER 0194 2SWAP 018E DROP 0188 ROT 0182 DUP 017C OVER 0176 SWAP 0170 @ 016A ! 0164 M+ 015E OR 0158 AND 0152 NOT 014C EMITCODE 0146 0LT 0140 0= 013A U* 0134 U+ 012E MINUS 0123 MCODE 0116 (MCODE:) 010E RETURN 0109 VERSION 0104 LOCALADRESSE 00FF DUBIT 00FA CSP 00F5 DPMERK 00F0 BZEIG 00EB BANF 00E6 LFA 00E1 STAT 00DC DP 00D7 ERRORNR 00D2 IN4 00CD IN3 00C8 IN2 00C3 IN1 00BE TIB 00B9 BASE 00B4 CRDP 00AF CRBZEIG 00AA XOFF 00A5 JRAMADR 00A0 IRAMADR 009B RP0 0096 SMUDGEBIT 0091 XBIT 008C PC 0087 RP 0082 SP 007D KEYADR 0074 CONSTANT 0069 (CONSTANT:) 005A LIT, 0051 ABS 0047 MLIT 003C COMPILE 0034 } 002C { 0024 ( </ok>
 <ok></ok>
( LED's zum Leuchten bringen, also auf Adresse 2D04 ausgeben ) <ok></ok>
 <ok></ok>
2D04 CONSTANT LEDS <ok></ok><fl>12AD 376F </fl><fr>12B2 3774 </fr>
55 LEDS ! <ok></ok>
 <ok></ok>
( erreichte Programmdresse in 0000-1FFF ) <ok></ok>
 <ok></ok>
HERE M. <ok>12B2 </ok>
 <ok></ok>
( erreichte Adresse in Textspeicher 3000-3FFF ) <ok></ok>
 <ok></ok>
BZEIG M? <ok>3774 </ok>
 <ok></ok>
( aktuelle Stapelhoehe ) <ok></ok>
 <ok></ok>
SP M? <ok>001E </ok>
 <ok></ok>
( Ein neues Wort definieren ) <ok></ok>
 <ok></ok>
: H ." Hallo Welt " ; <ok></ok><fl>12B2 3774 </fl><fr>12BA 3782 </fr>
 <ok></ok>
H <ok>Hallo Welt </ok>
 <ok></ok>
( Bedingung IF ) <ok></ok>
 <ok></ok>
: W ( n --> )  <ok></ok><fl>12BA 3782 </fl><fr>12BE 3784 </fr>
  ." Das ist eine "  <ok></ok><fl>12BE 3784 </fl><fr>12C1 3792 </fr>
  1 AND IF ." un" END_IF  <ok></ok><fl>12C1 3792 </fl><fr>12C7 3795 </fr>
  ." gerade Zahl " ;  <ok></ok><fl>12C7 3795 </fl><fr>12CB 37A2 </fr>
 <ok></ok>
7 W <ok>Das ist eine ungerade Zahl </ok>
8 W <ok>Das ist eine gerade Zahl </ok>
 <ok></ok>
( Programmschleifen, die für DO LOOP ist aber momentan stillgelegt. ) <ok></ok>
 <ok></ok>
( : X ( n --> ) <ok></ok>
(   0 DO I M. LOOP ; <ok></ok>
( 13 X  <ok></ok>
 <ok></ok>
( oder ) <ok></ok>
 <ok></ok>
: Y ( n --> ) <ok></ok><fl>12CB 37A2 </fl><fr>12CF 37A4 </fr>
  0 BEGIN DUP M. 1+ 2DUP = UNTIL 2DROP ; <ok></ok><fl>12CF 37A4 </fl><fr>12D8 37A4 </fr>
 <ok></ok>
13 Y <ok>0000 0001 0002 0003 0004 0005 0006 0007 0008 0009 000A 000B 000C 000D 000E 000F 0010 0011 0012 </ok>
 <ok></ok>
( oder ) <ok></ok>
 <ok></ok>
: Z ( n --> ) <ok></ok><fl>12D8 37A4 </fl><fr>12DC 37A6 </fr>
  0 BEGIN 2DUP > WHILE DUP M. 1+ REPEAT 2DROP ; <ok></ok><fl>12DC 37A6 </fl><fr>12E6 37A6 </fr>
 <ok></ok>
13 Z <ok>0000 0001 0002 0003 0004 0005 0006 0007 0008 0009 000A 000B 000C 000D 000E 000F 0010 0011 0012 </ok>
 <ok></ok>
( alles ab LEDS wieder vergessen ) <ok></ok>
 <ok></ok>
HERE M. BZEIG M? <ok>12E6 37A6 </ok>
FORGET LEDS <ok></ok><fl>12E6 37A6 </fl><fr>12AD 376F </fr>
HERE M. BZEIG M? <ok>12AD 376F </ok>
 <ok></ok>
 <ok></ok>
( ERGEBNIS bezeichnet, ab welcher Adresse das nächste Ergebnis gespeichert wird, <ok></ok>
( Platz dafür ist von ZAHLENSPEICHER @ bis 1 vor SPEICHERENDE @, aktuell erreicht: ) <ok></ok>
  <ok></ok>
ERGEBNIS M? ( Zahlenspeicher gefuellt bis )  <ok>1C98 </ok>
 <ok></ok>
ZAHLENSPEICHER @ ERGEBNIS ! ( Zahlenspeicher leeren ) <ok></ok>
 <ok></ok>
ERGEBNIS M? <ok>1C00 </ok>
 <ok></ok>
111111111111111 DUP * . <ok>123456789ABCDEFEDCBA987654321 </ok>
 <ok></ok>
ERGEBNIS M? <ok>1C0E </ok>
 <ok></ok>
( dritte binomische Formel 10^20-{10^10+1}*{10^10-1}=1 ) <ok></ok>
10 20 ^ 10 10 ^ 1 - 10 10 ^ 1 + * - . <ok>1 </ok>
 <ok></ok>
ERGEBNIS M? <ok>1C38 </ok>
 <ok></ok>
 <ok></ok>
( Zahlenbasis wechseln ) <ok></ok>
 <ok></ok>
: HEX 10 BASE ! ; <ok></ok><fl>12AD 376F </fl><fr>12B5 3773 </fr>
: DECIMAL 0A BASE ! ; <ok></ok><fl>12B5 3773 </fl><fr>12BD 377B </fr>
 <ok></ok>
HEX 10000 <ok></ok>
DECIMAL DUP . <ok>65536 </ok>
HEX DUP . <ok>10000 </ok>
 <ok></ok>
HEX 100000000 <ok></ok>
DECIMAL DUP . <ok>4294967296 </ok>
HEX DUP . <ok>100000000 </ok>
</sekt> 
 <ok></ok>
<sekt inhalt="Multiproc."> 
: ? @ . ; <ok></ok><fl>12BD 377B </fl><fr>12C4 377D </fr>
 <ok></ok>
: 2@ ( adr --> a b ) <ok></ok><fl>12C4 377D </fl><fr>12C8 3780 </fr>
  DUP 1+ @ SWAP @ ; <ok></ok><fl>12C8 3780 </fl><fr>12CE 3780 </fr>
: 2! ( a b adr --> ) <ok></ok><fl>12CE 3780 </fl><fr>12D2 3783 </fr>
  SWAP OVER ! 1+ ! ; <ok></ok><fl>12D2 3783 </fl><fr>12D8 3783 </fr>
: 2? 2@ B. ; <ok></ok><fl>12D8 3783 </fl><fr>12DF 3786 </fr>
 <ok></ok>
XBIT VARIABLE RAMP3 ( RAMP3 TIB RAMP1 <ok></ok><fl>12DF 3786 </fl><fr>12E4 378C </fr>
: RAMBUF ( /name/  n --> ) <ok></ok><fl>12E4 378C </fl><fr>12E8 3793 </fr>
  MINUS RAMP3 +! RAMP3 @ CONSTANT ; ( oo INDVAR muss da her ) <ok></ok><fl>12E8 3793 </fl><fr>12EF 3793 </fr>
 <ok></ok>
( - "Platinen befestigen und entfernen" ) <ok></ok>
20 RAMBUF TLISTE <ok></ok><fl>12EF 3793 </fl><fr>12F4 379A </fr>
TLISTE VARIABLE TLISTENZEIGER <ok></ok><fl>12F4 379A </fl><fr>12F9 37A8 </fr>
: TLISTY  <ok></ok><fl>12F9 37A8 </fl><fr>12FD 37AF </fr>
  TLISTE BEGIN TLISTENZEIGER @ OVER > WHILE  <ok></ok><fl>12FD 37AF </fl><fr>1303 37AF </fr>
    DUP @ CR DUP M. 3 M- 2@ SWAP TYPE  <ok></ok><fl>1303 37AF </fl><fr>130D 37AF </fr>
    1+ REPEAT DROP ; <ok></ok><fl>130D 37AF </fl><fr>1311 37AF </fr>
 <ok></ok>
0 VARIABLE REMOPFA <ok></ok><fl>1311 37AF </fl><fr>1316 37B7 </fr>
0 VARIABLE STATMERK <ok></ok><fl>1316 37B7 </fl><fr>131B 37C0 </fr>
0 VARIABLE EXXIUHR <ok></ok><fl>131B 37C0 </fl><fr>1320 37C8 </fr>
: EXXI <ok></ok><fl>1320 37C8 </fl><fr>1324 37CD </fr>
  ( UHRL @ >R <ok></ok><fl>1324 37CD </fl><fr>1324 37CD </fr>
  STAT @ STATMERK ! 0 STAT ! ( eigentlich >R ) <ok></ok><fl>1324 37CD </fl><fr>132B 37CD </fr>
  TLISTE <ok></ok><fl>132B 37CD </fl><fr>132C 37CD </fr>
  BEGIN DUP TLISTENZEIGER @ LT WHILE <ok></ok><fl>132C 37CD </fl><fr>1331 37CD </fr>
    DUP >R @ EXECUTE R> 1+ REPEAT DROP <ok></ok><fl>1331 37CD </fl><fr>1339 37CD </fr>
  STATMERK @ STAT !  <ok></ok><fl>1339 37CD </fl><fr>133D 37CD </fr>
  ( UHRL @ R> M- EXXIUHR !  <ok></ok><fl>133D 37CD </fl><fr>133D 37CD </fr>
  ; <ok></ok><fl>133D 37CD </fl><fr>133E 37CD </fr>
 <ok></ok>
( EXXI in KEY einbauen <ok></ok>
04 ' EXXI MLIT ' KEY ! ( KEY war vorher : KEY BEGIN NOOP ... REPEAT ; <ok></ok>
 <ok></ok>
: ENTFERNE  <ok></ok><fl>133E 37CD </fl><fr>1342 37D6 </fr>
  20 WORD FIND LCFA DROP 1+ <ok></ok><fl>1342 37D6 </fl><fr>1348 37D6 </fr>
  ( DUP 0= IF 3 ERROR END_IF ) <ok></ok><fl>1348 37D6 </fl><fr>1348 37D6 </fr>
  0 REMOPFA ! <ok></ok><fl>1348 37D6 </fl><fr>134B 37D6 </fr>
  TLISTE BEGIN TLISTENZEIGER @ OVER > WHILE <ok></ok><fl>134B 37D6 </fl><fr>1351 37D6 </fr>
    2DUP @ = IF <ok></ok><fl>1351 37D6 </fl><fr>1355 37D6 </fr>
      1 REMOPFA ! <ok></ok><fl>1355 37D6 </fl><fr>1358 37D6 </fr>
      -1 TLISTENZEIGER +! <ok></ok><fl>1358 37D6 </fl><fr>135B 37D6 </fr>
      END_IF <ok></ok><fl>135B 37D6 </fl><fr>135B 37D6 </fr>
    REMOPFA @ IF <ok></ok><fl>135B 37D6 </fl><fr>135E 37D6 </fr>
      DUP 1+ @ OVER ! <ok></ok><fl>135E 37D6 </fl><fr>1363 37D6 </fr>
      END_IF <ok></ok><fl>1363 37D6 </fl><fr>1363 37D6 </fr>
    1+ REPEAT DROP <ok></ok><fl>1363 37D6 </fl><fr>1366 37D6 </fr>
  REMOPFA ! <ok></ok><fl>1366 37D6 </fl><fr>1368 37D6 </fr>
  ; <ok></ok><fl>1368 37D6 </fl><fr>1369 37D6 </fr>
   <ok></ok>
: BEFESTIGE ENTFERNE <ok></ok><fl>1369 37D6 </fl><fr>136E 37E0 </fr>
  REMOPFA @ TLISTENZEIGER @ ! <ok></ok><fl>136E 37E0 </fl><fr>1373 37E0 </fr>
  1 TLISTENZEIGER +!  <ok></ok><fl>1373 37E0 </fl><fr>1376 37E0 </fr>
  ; <ok></ok><fl>1376 37E0 </fl><fr>1377 37E0 </fr>
 <ok></ok>
 <ok></ok>
( jetzt los mit LINKS-RECHTS-OBEN-UNTEN <ok></ok>
2804 CONSTANT LINKS-ABGESCHICKT <ok></ok><fl>1377 37E0 </fl><fr>137C 37F2 </fr>
2804 CONSTANT RECHTS-ABGESCHICKT <ok></ok><fl>137C 37F2 </fl><fr>1381 3805 </fr>
2805 CONSTANT LINKS-ANGEKOMMEN <ok></ok><fl>1381 3805 </fl><fr>1386 3816 </fr>
2805 CONSTANT RECHTS-ANGEKOMMEN <ok></ok><fl>1386 3816 </fl><fr>138B 3828 </fr>
2806 CONSTANT OBEN-ABGESCHICKT <ok></ok><fl>138B 3828 </fl><fr>1390 3839 </fr>
2806 CONSTANT UNTEN-ABGESCHICKT <ok></ok><fl>1390 3839 </fl><fr>1395 384B </fr>
2807 CONSTANT OBEN-ANGEKOMMEN <ok></ok><fl>1395 384B </fl><fr>139A 385B </fr>
2807 CONSTANT UNTEN-ANGEKOMMEN <ok></ok><fl>139A 385B </fl><fr>139F 386C </fr>
: RECHTS-BYTES 07 800 MLIT ; <ok></ok><fl>139F 386C </fl><fr>13A7 3879 </fr>
: UNTEN-BYTES 07 C00 MLIT ; <ok></ok><fl>13A7 3879 </fl><fr>13AF 3885 </fr>
: LINKS-BYTES 07 800 MLIT ; <ok></ok><fl>13AF 3885 </fl><fr>13B7 3891 </fr>
: OBEN-BYTES 07 C00 MLIT ; <ok></ok><fl>13B7 3891 </fl><fr>13BF 389C </fr>
-1 VARIABLE IAM1J <ok></ok><fl>13BF 389C </fl><fr>13C4 38A2 </fr>
-1 VARIABLE IAM1K <ok></ok><fl>13C4 38A2 </fl><fr>13C9 38A8 </fr>
 <ok></ok>
-1 VARIABLE IAM2J <ok></ok><fl>13C9 38A8 </fl><fr>13CE 38AE </fr>
-1 VARIABLE IAM2K <ok></ok><fl>13CE 38AE </fl><fr>13D3 38B4 </fr>
0 VARIABLE NJ <ok></ok><fl>13D3 38B4 </fl><fr>13D8 38B7 </fr>
0 VARIABLE NK <ok></ok><fl>13D8 38B7 </fl><fr>13DD 38BA </fr>
0 VARIABLE LINKS-MERK <ok></ok><fl>13DD 38BA </fl><fr>13E2 38C5 </fr>
0 VARIABLE OBEN-MERK <ok></ok><fl>13E2 38C5 </fl><fr>13E7 38CF </fr>
0 VARIABLE RECHTS-MERK <ok></ok><fl>13E7 38CF </fl><fr>13EC 38DB </fr>
0 VARIABLE UNTEN-MERK <ok></ok><fl>13EC 38DB </fl><fr>13F1 38E6 </fr>
 <ok></ok>
: JK_AUSGEB ( j k char --> ) <ok></ok><fl>13F1 38E6 </fl><fr>13F5 38F0 </fr>
  1 LOCAL L0 ! <ok></ok><fl>13F5 38F0 </fl><fr>13F9 38F0 </fr>
  ADBIT @ IF <ok></ok><fl>13F9 38F0 </fl><fr>13FC 38F0 </fr>
    CR <ok></ok><fl>13FC 38F0 </fl><fr>13FD 38F0 </fr>
    3A EMIT L0 @ EMIT 20 EMIT  <ok></ok><fl>13FD 38F0 </fl><fr>1404 38F0 </fr>
    B. <ok></ok><fl>1404 38F0 </fl><fr>1405 38F0 </fr>
    L0 @ EMIT 3A EMIT 20 EMIT <ok></ok><fl>1405 38F0 </fl><fr>140C 38F0 </fr>
    ELSE 2DROP END_IF <ok></ok><fl>140C 38F0 </fl><fr>140E 38F0 </fr>
  END_LOCAL ;  <ok></ok><fl>140E 38F0 </fl><fr>1410 38F0 </fr>
 <ok></ok>
: R-ABSCHICKEN ( j k Z adr n op --> ) <ok></ok><fl>1410 38F0 </fl><fr>1414 38FD </fr>
  RECHTS-ANGEKOMMEN @ RECHTS-MERK @ M- IF ADBIT @ IF CR ." r_wart " END_IF END_IF <ok></ok><fl>1414 38FD </fl><fr>1421 3905 </fr>
  BEGIN RECHTS-ANGEKOMMEN @ RECHTS-MERK @ M- WHILE REPEAT <ok></ok><fl>1421 3905 </fl><fr>1428 3905 </fr>
  RECHTS-BYTES ! ( x y Z adr n <ok></ok><fl>1428 3905 </fl><fr>142A 3905 </fr>
  DUP IF SWAP OVER RECHTS-BYTES 5 M+ SWAP MOVE ( x y Z n <ok></ok><fl>142A 3905 </fl><fr>1433 3905 </fr>
    ELSE SWAP RECHTS-BYTES 5 M+ ! END_IF <ok></ok><fl>1433 3905 </fl><fr>1439 3905 </fr>
  DUP RECHTS-BYTES 4 M+ ! <ok></ok><fl>1439 3905 </fl><fr>143E 3905 </fr>
    NEBENRECHNUNG ROT ROT <ok></ok><fl>143E 3905 </fl><fr>1441 3905 </fr>
    RECHTS-BYTES 6 M+ M+ ERGEBNIS ! <ok></ok><fl>1441 3905 </fl><fr>1447 3905 </fr>
    SPEICHERENDE @ SWAP <ok></ok><fl>1447 3905 </fl><fr>144A 3905 </fr>
    UBIT @ IF 07 C00 MLIT ELSE 2400 END_IF SPEICHERENDE ! <ok></ok><fl>144A 3905 </fl><fr>1454 3905 </fr>
    OBJ_STRUCT_COPY <ok></ok><fl>1454 3905 </fl><fr>1455 3905 </fr>
    SWAP SPEICHERENDE ! <ok></ok><fl>1455 3905 </fl><fr>1458 3905 </fr>
    SWAP HAUPTRECHNUNG <ok></ok><fl>1458 3905 </fl><fr>145A 3905 </fr>
  RECHTS-BYTES 3 M+ ! 2DUP 72 ( r ) JK_AUSGEB <ok></ok><fl>145A 3905 </fl><fr>1461 3905 </fr>
  RECHTS-BYTES 2 M+ ! <ok></ok><fl>1461 3905 </fl><fr>1465 3905 </fr>
  RECHTS-BYTES 1 M+ ! <ok></ok><fl>1465 3905 </fl><fr>1469 3905 </fr>
  RECHTS-ANGEKOMMEN @ NOT 1 AND RECHTS-MERK ! <ok></ok><fl>1469 3905 </fl><fr>1470 3905 </fr>
  RECHTS-ANGEKOMMEN @ NOT RECHTS-ABGESCHICKT ! <ok></ok><fl>1470 3905 </fl><fr>1475 3905 </fr>
  ; <ok></ok><fl>1475 3905 </fl><fr>1476 3905 </fr>
: U-ABSCHICKEN ( j k Z adr n op --> ) <ok></ok><fl>1476 3905 </fl><fr>147A 3912 </fr>
  UNTEN-ANGEKOMMEN @ UNTEN-MERK @ M- IF ADBIT @ IF CR ." u_wart " END_IF END_IF <ok></ok><fl>147A 3912 </fl><fr>1487 391A </fr>
  BEGIN UNTEN-ANGEKOMMEN @ UNTEN-MERK @ M- WHILE REPEAT <ok></ok><fl>1487 391A </fl><fr>148E 391A </fr>
  UNTEN-BYTES ! <ok></ok><fl>148E 391A </fl><fr>1490 391A </fr>
  DUP IF SWAP OVER UNTEN-BYTES 5 M+ SWAP MOVE ( j k Z n <ok></ok><fl>1490 391A </fl><fr>1499 391A </fr>
    ELSE SWAP UNTEN-BYTES 5 M+ ! END_IF <ok></ok><fl>1499 391A </fl><fr>149F 391A </fr>
  DUP UNTEN-BYTES 4 M+ ! <ok></ok><fl>149F 391A </fl><fr>14A4 391A </fr>
    NEBENRECHNUNG ROT ROT <ok></ok><fl>14A4 391A </fl><fr>14A7 391A </fr>
    UNTEN-BYTES 6 M+ M+ ERGEBNIS ! <ok></ok><fl>14A7 391A </fl><fr>14AD 391A </fr>
    SPEICHERENDE @ SWAP <ok></ok><fl>14AD 391A </fl><fr>14B0 391A </fr>
    UBIT @ IF 08 000 MLIT ELSE 2800 END_IF SPEICHERENDE ! <ok></ok><fl>14B0 391A </fl><fr>14BA 391A </fr>
    OBJ_STRUCT_COPY <ok></ok><fl>14BA 391A </fl><fr>14BB 391A </fr>
    SWAP SPEICHERENDE ! <ok></ok><fl>14BB 391A </fl><fr>14BE 391A </fr>
    SWAP HAUPTRECHNUNG <ok></ok><fl>14BE 391A </fl><fr>14C0 391A </fr>
  UNTEN-BYTES 3 M+ ! 2DUP 75 ( u ) JK_AUSGEB <ok></ok><fl>14C0 391A </fl><fr>14C7 391A </fr>
  UNTEN-BYTES 2 M+ ! <ok></ok><fl>14C7 391A </fl><fr>14CB 391A </fr>
  UNTEN-BYTES 1 M+ ! <ok></ok><fl>14CB 391A </fl><fr>14CF 391A </fr>
  UNTEN-ANGEKOMMEN @ NOT 1 AND UNTEN-MERK ! <ok></ok><fl>14CF 391A </fl><fr>14D6 391A </fr>
  UNTEN-ANGEKOMMEN @ NOT UNTEN-ABGESCHICKT ! <ok></ok><fl>14D6 391A </fl><fr>14DB 391A </fr>
  ; <ok></ok><fl>14DB 391A </fl><fr>14DC 391A </fr>
 <ok></ok>
: ABSCHICKEN ( j k Z adr n op --> ) <ok></ok><fl>14DC 391A </fl><fr>14E0 3925 </fr>
  6 LOCAL <ok></ok><fl>14E0 3925 </fl><fr>14E2 3925 </fr>
  L5 ! L4 ! L3 ! L2 ! L1 ! L0 ! <ok></ok><fl>14E2 3925 </fl><fr>14EE 3925 </fr>
  L0 @ L1 @ L2 @ L3 @ L4 @ L5 @ L0 @ L1 @  ( j k Z adr n op j k ) <ok></ok><fl>14EE 3925 </fl><fr>14FE 3925 </fr>
  OVER IF 2DROP U-ABSCHICKEN <ok></ok><fl>14FE 3925 </fl><fr>1502 3925 </fr>
    L5 @ 3 = L1 @ 0= NOT AND IF 0 L1 @ L2 @ L3 @ L4 @ 2 R-ABSCHICKEN END_IF <ok></ok><fl>1502 3925 </fl><fr>1517 3925 </fr>
    L5 @ 3 = IF L2 @ L3 @ L4 @ ( Z adr n ) <ok></ok><fl>1517 3925 </fl><fr>1522 3925 </fr>
      DUP IF INTERPRET ELSE DROP DUP IF EXECUTE ELSE DROP END_IF END_IF <ok></ok><fl>1522 3925 </fl><fr>152C 3925 </fr>
      END_IF <ok></ok><fl>152C 3925 </fl><fr>152C 3925 </fr>
    ELSE DUP IF 2DROP R-ABSCHICKEN <ok></ok><fl>152C 3925 </fl><fr>1531 3925 </fr>
      L5 @ 2 = L5 @ 3 = OR IF L2 @ L3 @ L4 @ ( Z adr n ) <ok></ok><fl>1531 3925 </fl><fr>1541 3925 </fr>
        DUP IF INTERPRET ELSE DROP DUP IF EXECUTE ELSE DROP END_IF END_IF <ok></ok><fl>1541 3925 </fl><fr>154B 3925 </fr>
        END_IF <ok></ok><fl>154B 3925 </fl><fr>154B 3925 </fr>
      ELSE 2DROP 2DROP 2SWAP 2DROP L4 @ <ok></ok><fl>154B 3925 </fl><fr>1552 3925 </fr>
        DUP IF INTERPRET ELSE DROP DUP IF EXECUTE ELSE DROP END_IF END_IF <ok></ok><fl>1552 3925 </fl><fr>155C 3925 </fr>
        END_IF END_IF <ok></ok><fl>155C 3925 </fl><fr>155C 3925 </fr>
  END_LOCAL <ok></ok><fl>155C 3925 </fl><fr>155D 3925 </fr>
  ; <ok></ok><fl>155D 3925 </fl><fr>155E 3925 </fr>
 <ok></ok>
( 5 6 1 " 77 . " 1 ABSCHICKEN <ok></ok>
( 77 88 99 1 0 9 0 0 3 ABSCHICKEN <ok></ok>
( 77 88 99 1 1 9 0 0 3 ABSCHICKEN <ok></ok>
( 77 88 99 2 0 9 0 0 3 ABSCHICKEN <ok></ok>
 <ok></ok>
( 1 2 0 0 0 1 R-ABSCHICKEN <ok></ok>
( RECHTS-BYTES 8 DUMP RECHTS-ABGESCHICKT ? RECHTS-ANGEKOMMEN ? <ok></ok>
( RECHTS-ANGEKOMMEN @ RECHTS-ABGESCHICKT ! <ok></ok>
( 5 6 1 " 77 . " 1 U-ABSCHICKEN <ok></ok>
( UNTEN-BYTES 8 DUMP UNTEN-ABGESCHICKT ? UNTEN-ANGEKOMMEN ? <ok></ok>
( UNTEN-ANGEKOMMEN @ UNTEN-ABGESCHICKT ! <ok></ok>
 <ok></ok>
: ABWART BEGIN AMERK @ WHILE EXXI REPEAT ; <ok></ok><fl>155E 3925 </fl><fr>1568 392C </fr>
 <ok></ok>
: JK-PROC ( j k --> ) <ok></ok><fl>1568 392C </fl><fr>156C 3934 </fr>
  INIT <ok></ok><fl>156C 3934 </fl><fr>156D 3934 </fr>
  AMERK @ 0= IF -1 AMERK ! END_IF <ok></ok><fl>156D 3934 </fl><fr>1574 3934 </fr>
  ADBIT @ IF CR ." :K " 2DUP B. ." K: " END_IF <ok></ok><fl>1574 3934 </fl><fr>1580 393C </fr>
  OVER IAM2J @ LT OVER IAM2K @ LT AND IF -1 IAM1J ! -1 IAM1K ! -1 IAM2J ! -1 IAM2K ! END_IF <ok></ok><fl>1580 393C </fl><fr>1596 393C </fr>
  OVER IAM1J @ = NOT IAM2J @ -1 = AND IF  <ok></ok><fl>1596 393C </fl><fr>15A1 393C </fr>
    IAM1J @ -1 = IF OVER IAM1J ! ELSE OVER IAM2J ! IAM2J @ IAM1J @ M- NJ ! END_IF <ok></ok><fl>15A1 393C </fl><fr>15B4 393C </fr>
    ADBIT @ IF CR IAM1J M? IAM1K M? IAM2J M? IAM2K M? END_IF <ok></ok><fl>15B4 393C </fl><fr>15C0 393C </fr>
    OVER 1+ OVER 0 0 0 0 U-ABSCHICKEN <ok></ok><fl>15C0 393C </fl><fr>15C8 393C </fr>
    END_IF <ok></ok><fl>15C8 393C </fl><fr>15C8 393C </fr>
  DUP IAM1K @ = NOT IAM2K @ -1 = AND IF  <ok></ok><fl>15C8 393C </fl><fr>15D3 393C </fr>
    IAM1K @ -1 = IF DUP IAM1K ! ELSE DUP IAM2K ! IAM2K @ IAM1K @ M- NK ! END_IF <ok></ok><fl>15D3 393C </fl><fr>15E6 393C </fr>
    ADBIT @ IF CR IAM1J M? IAM1K M? IAM2J M? IAM2K M? END_IF <ok></ok><fl>15E6 393C </fl><fr>15F2 393C </fr>
    OVER OVER 1+ 0 0 0 0 R-ABSCHICKEN <ok></ok><fl>15F2 393C </fl><fr>15FA 393C </fr>
    END_IF <ok></ok><fl>15FA 393C </fl><fr>15FA 393C </fr>
  2DROP  <ok></ok><fl>15FA 393C </fl><fr>15FB 393C </fr>
  IAM2J @ -1 = IAM2K @ -1 = OR IF ABWART ELSE 0 AMERK ! END_IF <ok></ok><fl>15FB 393C </fl><fr>160A 393C </fr>
  ; <ok></ok><fl>160A 393C </fl><fr>160B 393C </fr>
 <ok></ok>
( empfangene Bytes jetzt auswerten <ok></ok>
( ENTFERNE L-AUSLES <ok></ok>
( ENTFERNE O-AUSLES <ok></ok>
 <ok></ok>
 <ok></ok>
: B_AUSLES ( adr --> z adr n ) <ok></ok><fl>160B 393C </fl><fr>160F 3945 </fr>
  1 LOCAL L0 ! <ok></ok><fl>160F 3945 </fl><fr>1613 3945 </fr>
  L0 @ 3 M+ @ <ok></ok><fl>1613 3945 </fl><fr>1618 3945 </fr>
  L0 @ 5 M+ <ok></ok><fl>1618 3945 </fl><fr>161C 3945 </fr>
  L0 @ 4 M+ @ 0= IF @ END_IF <ok></ok><fl>161C 3945 </fl><fr>1624 3945 </fr>
  L0 @ 4 M+ @ <ok></ok><fl>1624 3945 </fl><fr>1629 3945 </fr>
  END_LOCAL ;  <ok></ok><fl>1629 3945 </fl><fr>162B 3945 </fr>
 <ok></ok>
: B_AUSGEB ( z adr n char --> z adr n ) <ok></ok><fl>162B 3945 </fl><fr>162F 394E </fr>
  1 LOCAL L0 ! <ok></ok><fl>162F 394E </fl><fr>1633 394E </fr>
  ADBIT @ IF <ok></ok><fl>1633 394E </fl><fr>1636 394E </fr>
    3A EMIT L0 @ EMIT 20 EMIT  <ok></ok><fl>1636 394E </fl><fr>163D 394E </fr>
    ROT DUP . ROT ROT <ok></ok><fl>163D 394E </fl><fr>1642 394E </fr>
    DUP IF 2DUP TYPE 20 EMIT ELSE OVER M. END_IF <ok></ok><fl>1642 394E </fl><fr>164B 394E </fr>
    L0 @ EMIT 3A EMIT 20 EMIT <ok></ok><fl>164B 394E </fl><fr>1652 394E </fr>
    END_IF <ok></ok><fl>1652 394E </fl><fr>1652 394E </fr>
  END_LOCAL ;  <ok></ok><fl>1652 394E </fl><fr>1654 394E </fr>
 <ok></ok>
: B_INTERP ( z adr n --> ... ) <ok></ok><fl>1654 394E </fl><fr>1658 3957 </fr>
  DUP IF INTERPRET ELSE DROP <ok></ok><fl>1658 3957 </fl><fr>165D 3957 </fr>
    DUP IF EXECUTE ELSE DROP END_IF END_IF <ok></ok><fl>165D 3957 </fl><fr>1662 3957 </fr>
  ; <ok></ok><fl>1662 3957 </fl><fr>1663 3957 </fr>
 <ok></ok>
: L-AUSLES <ok></ok><fl>1663 3957 </fl><fr>1667 3960 </fr>
  LINKS-MERK @ LINKS-ABGESCHICKT @ = NOT IF <ok></ok><fl>1667 3960 </fl><fr>166E 3960 </fr>
    LINKS-BYTES @ 0= IF <ok></ok><fl>166E 3960 </fl><fr>1672 3960 </fr>
      LINKS-BYTES 1+ DUP @ SWAP 1+ @ <ok></ok><fl>1672 3960 </fl><fr>1679 3960 </fr>
      LINKS-ABGESCHICKT @ LINKS-MERK ! <ok></ok><fl>1679 3960 </fl><fr>167D 3960 </fr>
      LINKS-ABGESCHICKT @ LINKS-ANGEKOMMEN ! <ok></ok><fl>167D 3960 </fl><fr>1681 3960 </fr>
      JK-PROC <ok></ok><fl>1681 3960 </fl><fr>1682 3960 </fr>
      END_IF <ok></ok><fl>1682 3960 </fl><fr>1682 3960 </fr>
    LINKS-BYTES @ 1 = LINKS-BYTES @ 2 = OR IF <ok></ok><fl>1682 3960 </fl><fr>168C 3960 </fr>
      LINKS-BYTES 2 M+ @ 1- IF ( bei k>0 weiterschicken ) <ok></ok><fl>168C 3960 </fl><fr>1692 3960 </fr>
        LINKS-BYTES 1+ @ <ok></ok><fl>1692 3960 </fl><fr>1695 3960 </fr>
        LINKS-BYTES 2 M+ @ 1- 2DUP 6C ( l ) JK_AUSGEB <ok></ok><fl>1695 3960 </fl><fr>169D 3960 </fr>
        LINKS-BYTES B_AUSLES LINKS-BYTES @ <ok></ok><fl>169D 3960 </fl><fr>16A1 3960 </fr>
        IAM2K @ 1 = IF <ok></ok><fl>16A1 3960 </fl><fr>16A6 3960 </fr>
          LINKS-ABGESCHICKT @ LINKS-MERK ! <ok></ok><fl>16A6 3960 </fl><fr>16AA 3960 </fr>
          LINKS-ABGESCHICKT @ LINKS-ANGEKOMMEN ! <ok></ok><fl>16AA 3960 </fl><fr>16AE 3960 </fr>
          R-ABSCHICKEN <ok></ok><fl>16AE 3960 </fl><fr>16AF 3960 </fr>
          ELSE <ok></ok><fl>16AF 3960 </fl><fr>16B0 3960 </fr>
            R-ABSCHICKEN <ok></ok><fl>16B0 3960 </fl><fr>16B1 3960 </fr>
            LINKS-BYTES @ 2 = IF <ok></ok><fl>16B1 3960 </fl><fr>16B6 3960 </fr>
              LINKS-BYTES B_AUSLES 6D ( m ) B_AUSGEB B_INTERP <ok></ok><fl>16B6 3960 </fl><fr>16BB 3960 </fr>
              END_IF <ok></ok><fl>16BB 3960 </fl><fr>16BB 3960 </fr>
            LINKS-ABGESCHICKT @ LINKS-MERK ! <ok></ok><fl>16BB 3960 </fl><fr>16BF 3960 </fr>
            LINKS-ABGESCHICKT @ LINKS-ANGEKOMMEN ! <ok></ok><fl>16BF 3960 </fl><fr>16C3 3960 </fr>
            END_IF <ok></ok><fl>16C3 3960 </fl><fr>16C3 3960 </fr>
        ELSE ( endlich angekommen ) <ok></ok><fl>16C3 3960 </fl><fr>16C4 3960 </fr>
          LINKS-BYTES B_AUSLES 6E ( n ) B_AUSGEB B_INTERP <ok></ok><fl>16C4 3960 </fl><fr>16C9 3960 </fr>
          LINKS-ABGESCHICKT @ LINKS-MERK ! <ok></ok><fl>16C9 3960 </fl><fr>16CD 3960 </fr>
          LINKS-ABGESCHICKT @ LINKS-ANGEKOMMEN ! <ok></ok><fl>16CD 3960 </fl><fr>16D1 3960 </fr>
          END_IF <ok></ok><fl>16D1 3960 </fl><fr>16D1 3960 </fr>
      END_IF <ok></ok><fl>16D1 3960 </fl><fr>16D1 3960 </fr>
    END_IF <ok></ok><fl>16D1 3960 </fl><fr>16D1 3960 </fr>
  ; <ok></ok><fl>16D1 3960 </fl><fr>16D2 3960 </fr>
 <ok></ok>
: O-AUSLES <ok></ok><fl>16D2 3960 </fl><fr>16D6 3969 </fr>
  OBEN-MERK @ OBEN-ABGESCHICKT @ = NOT IF <ok></ok><fl>16D6 3969 </fl><fr>16DD 3969 </fr>
    OBEN-BYTES @ 0= IF <ok></ok><fl>16DD 3969 </fl><fr>16E1 3969 </fr>
      OBEN-BYTES 1+ DUP @ SWAP 1+ @ <ok></ok><fl>16E1 3969 </fl><fr>16E8 3969 </fr>
      OBEN-ABGESCHICKT @ OBEN-MERK ! <ok></ok><fl>16E8 3969 </fl><fr>16EC 3969 </fr>
      OBEN-ABGESCHICKT @ OBEN-ANGEKOMMEN ! <ok></ok><fl>16EC 3969 </fl><fr>16F0 3969 </fr>
      JK-PROC <ok></ok><fl>16F0 3969 </fl><fr>16F1 3969 </fr>
      END_IF <ok></ok><fl>16F1 3969 </fl><fr>16F1 3969 </fr>
    OBEN-BYTES @ 1 = OBEN-BYTES @ 3 = OR IF <ok></ok><fl>16F1 3969 </fl><fr>16FB 3969 </fr>
      OBEN-BYTES 1+ @ 1- IF ( bei j>0 weiterschicken ) <ok></ok><fl>16FB 3969 </fl><fr>1700 3969 </fr>
        OBEN-BYTES 1+ @ 1- <ok></ok><fl>1700 3969 </fl><fr>1704 3969 </fr>
        OBEN-BYTES 2 M+ @ 2DUP 6F ( o ) JK_AUSGEB <ok></ok><fl>1704 3969 </fl><fr>170B 3969 </fr>
        OBEN-BYTES B_AUSLES OBEN-BYTES @ <ok></ok><fl>170B 3969 </fl><fr>170F 3969 </fr>
        IAM2J @ 1 = IF <ok></ok><fl>170F 3969 </fl><fr>1714 3969 </fr>
          OBEN-ABGESCHICKT @ OBEN-MERK ! <ok></ok><fl>1714 3969 </fl><fr>1718 3969 </fr>
          OBEN-ABGESCHICKT @ OBEN-ANGEKOMMEN ! <ok></ok><fl>1718 3969 </fl><fr>171C 3969 </fr>
          U-ABSCHICKEN <ok></ok><fl>171C 3969 </fl><fr>171D 3969 </fr>
          ELSE <ok></ok><fl>171D 3969 </fl><fr>171E 3969 </fr>
            U-ABSCHICKEN <ok></ok><fl>171E 3969 </fl><fr>171F 3969 </fr>
            OBEN-BYTES @ 3 = IF <ok></ok><fl>171F 3969 </fl><fr>1724 3969 </fr>
              OBEN-BYTES 2 M+ @ IF <ok></ok><fl>1724 3969 </fl><fr>1729 3969 </fr>
                0 ( OBEN-BYTES 1+ @ 1- <ok></ok><fl>1729 3969 </fl><fr>172A 3969 </fr>
                OBEN-BYTES 2 M+ @ <ok></ok><fl>172A 3969 </fl><fr>172E 3969 </fr>
                OBEN-BYTES B_AUSLES  <ok></ok><fl>172E 3969 </fl><fr>1730 3969 </fr>
                ROT OBJ_STRUCT_COPY ROT ROT <ok></ok><fl>1730 3969 </fl><fr>1734 3969 </fr>
                2 R-ABSCHICKEN <ok></ok><fl>1734 3969 </fl><fr>1736 3969 </fr>
                END_IF <ok></ok><fl>1736 3969 </fl><fr>1736 3969 </fr>
              OBEN-BYTES B_AUSLES 4D ( M ) B_AUSGEB B_INTERP <ok></ok><fl>1736 3969 </fl><fr>173B 3969 </fr>
              END_IF <ok></ok><fl>173B 3969 </fl><fr>173B 3969 </fr>
            OBEN-ABGESCHICKT @ OBEN-MERK ! <ok></ok><fl>173B 3969 </fl><fr>173F 3969 </fr>
            OBEN-ABGESCHICKT @ OBEN-ANGEKOMMEN ! <ok></ok><fl>173F 3969 </fl><fr>1743 3969 </fr>
            END_IF <ok></ok><fl>1743 3969 </fl><fr>1743 3969 </fr>
        ELSE ( endlich in j angekommen, jetzt dasselbe noch k ) <ok></ok><fl>1743 3969 </fl><fr>1744 3969 </fr>
          OBEN-BYTES 2 M+ @ IF ( bei k>0 nach rechts weiterschicken ) <ok></ok><fl>1744 3969 </fl><fr>1749 3969 </fr>
            OBEN-BYTES 1+ @ 1- <ok></ok><fl>1749 3969 </fl><fr>174D 3969 </fr>
            OBEN-BYTES 2 M+ @ 2DUP 4F ( O ) JK_AUSGEB <ok></ok><fl>174D 3969 </fl><fr>1754 3969 </fr>
            OBEN-BYTES B_AUSLES  <ok></ok><fl>1754 3969 </fl><fr>1756 3969 </fr>
            ROT OBJ_STRUCT_COPY ROT ROT <ok></ok><fl>1756 3969 </fl><fr>175A 3969 </fr>
            OBEN-BYTES @ 3 = IF <ok></ok><fl>175A 3969 </fl><fr>175F 3969 </fr>
              2 R-ABSCHICKEN <ok></ok><fl>175F 3969 </fl><fr>1761 3969 </fr>
              OBEN-BYTES B_AUSLES 4B ( K ) B_AUSGEB B_INTERP <ok></ok><fl>1761 3969 </fl><fr>1766 3969 </fr>
              ELSE 1 R-ABSCHICKEN END_IF <ok></ok><fl>1766 3969 </fl><fr>1769 3969 </fr>
            OBEN-ABGESCHICKT @ OBEN-MERK ! <ok></ok><fl>1769 3969 </fl><fr>176D 3969 </fr>
            OBEN-ABGESCHICKT @ OBEN-ANGEKOMMEN ! <ok></ok><fl>176D 3969 </fl><fr>1771 3969 </fr>
            ELSE ( schon in j k angekommen ) <ok></ok><fl>1771 3969 </fl><fr>1772 3969 </fr>
              OBEN-BYTES B_AUSLES 4E ( N ) B_AUSGEB B_INTERP <ok></ok><fl>1772 3969 </fl><fr>1777 3969 </fr>
              OBEN-ABGESCHICKT @ OBEN-MERK ! <ok></ok><fl>1777 3969 </fl><fr>177B 3969 </fr>
              OBEN-ABGESCHICKT @ OBEN-ANGEKOMMEN ! <ok></ok><fl>177B 3969 </fl><fr>177F 3969 </fr>
              END_IF <ok></ok><fl>177F 3969 </fl><fr>177F 3969 </fr>
          END_IF <ok></ok><fl>177F 3969 </fl><fr>177F 3969 </fr>
      END_IF <ok></ok><fl>177F 3969 </fl><fr>177F 3969 </fr>
    END_IF <ok></ok><fl>177F 3969 </fl><fr>177F 3969 </fr>
  ; <ok></ok><fl>177F 3969 </fl><fr>1780 3969 </fr>
 <ok></ok>
( vor BEFESTIGE die verwendeten Eingänge rücksetzen <ok></ok>
LINKS-ABGESCHICKT @ LINKS-MERK ! <ok></ok>
LINKS-ABGESCHICKT @ LINKS-ANGEKOMMEN ! <ok></ok>
OBEN-ABGESCHICKT @ OBEN-MERK ! <ok></ok>
OBEN-ABGESCHICKT @ OBEN-ANGEKOMMEN ! <ok></ok>
RECHTS-ANGEKOMMEN @ RECHTS-MERK ! <ok></ok>
UNTEN-ANGEKOMMEN @ UNTEN-MERK ! <ok></ok>
 <ok></ok>
BEFESTIGE L-AUSLES <ok></ok>
BEFESTIGE O-AUSLES <ok></ok>
 <ok></ok>
( HEX 0 0 JK-PROC  <ok></ok>
( IAM1J ? IAM1K ? IAM2J ? IAM2K ? <ok></ok>
( 9 9 77 "  ." 1 ABSCHICKEN <ok></ok>
( 9 9 77 ' M. 0 1 ABSCHICKEN <ok></ok>
( 9 9 77 0 0 1 ABSCHICKEN ( anschliessend . <ok></ok>
( 9 9 [ [ 1 2 3 ] [ 4 5 6 ] ] ' . 0 1 ABSCHICKEN <ok></ok>
</sekt> 
 <ok></ok>
<sekt inhalt="neues Invertieren"> 
1C00 ZAHLENSPEICHER ! INIT <ok></ok>
 <ok></ok>
0 VARIABLE N <ok></ok><fl>1780 3969 </fl><fr>1785 396B </fr>
0 VARIABLE NN <ok></ok><fl>1785 396B </fl><fr>178A 396E </fr>
0 VARIABLE NI <ok></ok><fl>178A 396E </fl><fr>178F 3971 </fr>
0 VARIABLE JLOC <ok></ok><fl>178F 3971 </fl><fr>1794 3976 </fr>
0 VARIABLE KLOC <ok></ok><fl>1794 3976 </fl><fr>1799 397B </fr>
0 VARIABLE GXMERK <ok></ok><fl>1799 397B </fl><fr>179E 3982 </fr>
 <ok></ok>
: M/ ( b d --> r q ) M/MOD SWAP DROP ; <ok></ok><fl>179E 3982 </fl><fr>17A6 3985 </fr>
 <ok></ok>
: JLOC! JLOC ! ; <ok></ok><fl>17A6 3985 </fl><fr>17AD 398B </fr>
: KLOC! KLOC ! ; <ok></ok><fl>17AD 398B </fl><fr>17B4 3991 </fr>
: YCOL ( A k --> Y ) <ok></ok><fl>17B4 3991 </fl><fr>17B8 3996 </fr>
  3 LOCAL <ok></ok><fl>17B8 3996 </fl><fr>17BA 3996 </fr>
  OVER SIZE L1 ! L2 ! L0 ! ( L0=A L1=jsize L2=k ) <ok></ok><fl>17BA 3996 </fl><fr>17C2 3996 </fr>
  0 L1 @ BEGIN 1- DUP L1 ! ( 0 jsize-1 ) <ok></ok><fl>17C2 3996 </fl><fr>17C9 3996 </fr>
    L0 @ OVER L L2 @ L ( 0 jsize-1 a_jk ) <ok></ok><fl>17C9 3996 </fl><fr>17D0 3996 </fr>
    H ( Y ) <ok></ok><fl>17D0 3996 </fl><fr>17D1 3996 </fr>
    L1 @ DUP 0= UNTIL ( Y jsize-1 ) <ok></ok><fl>17D1 3996 </fl><fr>17D6 3996 </fr>
  DROP ( Y ) <ok></ok><fl>17D6 3996 </fl><fr>17D7 3996 </fr>
  END_LOCAL <ok></ok><fl>17D7 3996 </fl><fr>17D8 3996 </fr>
  ; <ok></ok><fl>17D8 3996 </fl><fr>17D9 3996 </fr>
 <ok></ok>
[ [ 1 2 ] [ 3 4 ] ] 1 YCOL . ( [ 2 4 ] ) <ok>[ 2 4 ] </ok>
 <ok></ok>
0 VARIABLE XYBIT <ok></ok><fl>17D9 3996 </fl><fr>17DE 399C </fr>
0 VARIABLE XYMERK <ok></ok><fl>17DE 399C </fl><fr>17E3 39A3 </fr>
0 VARIABLE ZBIT <ok></ok><fl>17E3 39A3 </fl><fr>17E8 39A8 </fr>
0 VARIABLE ZMERK <ok></ok><fl>17E8 39A8 </fl><fr>17ED 39AE </fr>
: AXYZ ( A gx --> A' gx' ) <ok></ok><fl>17ED 39AE </fl><fr>17F1 39B3 </fr>
  XYMERK @ DUP 0 L SWAP 1 L ( A gx x Y ) <ok></ok><fl>17F1 39B3 </fl><fr>17F9 39B3 </fr>
  ZMERK @ ( A gx x Y Z ) <ok></ok><fl>17F9 39B3 </fl><fr>17FB 39B3 </fr>
  [A*x-Y*Z]/gx ( A' gx' ) <ok></ok><fl>17FB 39B3 </fl><fr>17FC 39B3 </fr>
  SWAP OBJ_STRUCT_COPY <ok></ok><fl>17FC 39B3 </fl><fr>17FE 39B3 </fr>
  SWAP A+0 <ok></ok><fl>17FE 39B3 </fl><fr>1800 39B3 </fr>
  INIT <ok></ok><fl>1800 39B3 </fl><fr>1801 39B3 </fr>
  SWAP OBJ_STRUCT_COPY <ok></ok><fl>1801 39B3 </fl><fr>1803 39B3 </fr>
  SWAP A+0 <ok></ok><fl>1803 39B3 </fl><fr>1805 39B3 </fr>
  ; <ok></ok><fl>1805 39B3 </fl><fr>1806 39B3 </fr>
: XYSPEICH ( [ x Y ] --> ) <ok></ok><fl>1806 39B3 </fl><fr>180A 39BC </fr>
  OBJ_STRUCT_COPY XYMERK ! -1 XYBIT ! <ok></ok><fl>180A 39BC </fl><fr>1810 39BC </fr>
  XYBIT @ ZBIT @ AND IF  <ok></ok><fl>1810 39BC </fl><fr>1816 39BC </fr>
    AXYZ  <ok></ok><fl>1816 39BC </fl><fr>1817 39BC </fr>
    0 XYBIT ! 0 ZBIT ! 0 XYMERK ! 0 ZMERK ! <ok></ok><fl>1817 39BC </fl><fr>1823 39BC </fr>
    END_IF <ok></ok><fl>1823 39BC </fl><fr>1823 39BC </fr>
  ; <ok></ok><fl>1823 39BC </fl><fr>1824 39BC </fr>
: ZSPEICH ( Z --> ) <ok></ok><fl>1824 39BC </fl><fr>1828 39C4 </fr>
  OBJ_STRUCT_COPY ZMERK ! -1 ZBIT ! <ok></ok><fl>1828 39C4 </fl><fr>182E 39C4 </fr>
  XYBIT @ ZBIT @ AND IF  <ok></ok><fl>182E 39C4 </fl><fr>1834 39C4 </fr>
    AXYZ  <ok></ok><fl>1834 39C4 </fl><fr>1835 39C4 </fr>
    0 XYBIT ! 0 ZBIT ! 0 XYMERK ! 0 ZMERK ! <ok></ok><fl>1835 39C4 </fl><fr>1841 39C4 </fr>
    END_IF <ok></ok><fl>1841 39C4 </fl><fr>1841 39C4 </fr>
  ; <ok></ok><fl>1841 39C4 </fl><fr>1842 39C4 </fr>
 <ok></ok>
REPLACE: ERROR ( n --> ) <ok></ok><fl>1842 39C4 </fl><fr>1842 39C4 </fr>
  DUP ERRORNR ! <ok></ok><fl>1842 39C4 </fl><fr>1845 39C4 </fr>
  INIT  <ok></ok><fl>1845 39C4 </fl><fr>1846 39C4 </fr>
  IAM1J @ IAM1K @ OR IF <ok></ok><fl>1846 39C4 </fl><fr>184C 39C4 </fr>
    IAM1J @ IF NJ @ 1- IAM1J @ - ELSE 0 END_IF <ok></ok><fl>184C 39C4 </fl><fr>1857 39C4 </fr>
    IAM1K @ IF NK @ 1- IAM1K @ - ELSE 0 END_IF <ok></ok><fl>1857 39C4 </fl><fr>1862 39C4 </fr>
    ERRORNR @ " M. BANF @ 40 TYPE " 3 ABSCHICKEN <ok></ok><fl>1862 39C4 </fl><fr>1869 39D7 </fr>
    BEGIN AGAIN <ok></ok><fl>1869 39D7 </fl><fr>186A 39D7 </fr>
    ELSE <ok></ok><fl>186A 39D7 </fl><fr>186B 39D7 </fr>
      0 STAT ! <ok></ok><fl>186B 39D7 </fl><fr>186E 39D7 </fr>
      CR IN1 @ IN3 @ IN1 @ M- 1- TYPE ." ???" <ok></ok><fl>186E 39D7 </fl><fr>187B 39DB </fr>
      " FEHLERTEXT" INTERPRET <ok></ok><fl>187B 39DB </fl><fr>187F 39E6 </fr>
      CR ." ERROR - Fehler Nummer " M.  <ok></ok><fl>187F 39E6 </fl><fr>1884 39FD </fr>
      BEGIN AGAIN <ok></ok><fl>1884 39FD </fl><fr>1885 39FD </fr>
      END_IF <ok></ok><fl>1885 39FD </fl><fr>1885 39FD </fr>
  ; <ok></ok><fl>1885 39FD </fl><fr>1886 39FD </fr>
   <ok></ok>
: ZLOS ( A gx --> A' gx' ) <ok></ok><fl>1886 39FD </fl><fr>188A 3A02 </fr>
  ADBIT @ IF ." ZLOS " 2DUP B. XYMERK @ . END_IF <ok></ok><fl>188A 3A02 </fl><fr>1895 3A08 </fr>
(  OVER OBJ? 2OVER DROP OBJ? OR IF ( falls x oder Y noch nicht da ) <ok></ok><fl>1895 3A08 </fl><fr>1895 3A08 </fr>
(    NJ @ 1- IAM1J @ - NK @ 1- IAM1K @ - 0 " 0ECB ERROR" 1 ABSCHICKEN <ok></ok><fl>1895 3A08 </fl><fr>1895 3A08 </fr>
(    BEGIN AGAIN ( vorläufiger Stop, nichts geht mehr. ) <ok></ok><fl>1895 3A08 </fl><fr>1895 3A08 </fr>
(    END_IF <ok></ok><fl>1895 3A08 </fl><fr>1895 3A08 </fr>
  OVER JLOC @ L OBJ_STRUCT_COPY ADBIT @ IF DUP . END_IF ( A gx Z ) <ok></ok><fl>1895 3A08 </fl><fr>189F 3A08 </fr>
  NJ @ 1- 0 ROT  ( A gx NJ@-1 0 Z ) <ok></ok><fl>189F 3A08 </fl><fr>18A4 3A08 </fr>
  IAM1J @ IAM1K @ = IF OBJ_STRUCT_COPY KLOC @ G GXMERK @ - H END_IF <ok></ok><fl>18A4 3A08 </fl><fr>18B2 3A08 </fr>
  ADBIT @ IF DUP . END_IF <ok></ok><fl>18B2 3A08 </fl><fr>18B7 3A08 </fr>
  ' ZSPEICH 0 3 ABSCHICKEN <ok></ok><fl>18B7 3A08 </fl><fr>18BB 3A08 </fr>
  ; <ok></ok><fl>18BB 3A08 </fl><fr>18BC 3A08 </fr>
 <ok></ok>
: XYLOS ( A gx x --> A' gx' ) <ok></ok><fl>18BC 3A08 </fl><fr>18C0 3A0E </fr>
  5 LOCAL <ok></ok><fl>18C0 3A0E </fl><fr>18C2 3A0E </fr>
  ADBIT @ IF ." XYLOS " DUP . END_IF <ok></ok><fl>18C2 3A0E </fl><fr>18CA 3A15 </fr>
  KLOC @ 2OVER DROP SWAP YCOL ADBIT @ IF DUP . END_IF ( A gx x Y ) <ok></ok><fl>18CA 3A15 </fl><fr>18D5 3A15 </fr>
  0 NK @ 1- ROT ( A gx x 0 NK@-1 Y ) <ok></ok><fl>18D5 3A15 </fl><fr>18DA 3A15 </fr>
  IAM1J @ IAM1K @ = IF OBJ_STRUCT_COPY JLOC @ G GXMERK @ + H END_IF ( A gx x 0 NK@-1 Y+x ) <ok></ok><fl>18DA 3A15 </fl><fr>18E8 3A15 </fr>
  ' XYSPEICH  <ok></ok><fl>18E8 3A15 </fl><fr>18E9 3A15 </fr>
  ADBIT @ IF OVER . END_IF ( A gx x 0 NK@ Y addr ) <ok></ok><fl>18E9 3A15 </fl><fr>18EE 3A15 </fr>
  L4 ! L3 ! L2 ! L1 ! L0 ! <ok></ok><fl>18EE 3A15 </fl><fr>18F8 3A15 </fr>
  L1 @ L2 @ [ L0 @ L3 @ ] L4 @ ( A gx 0 NK@ [ x Y ] addr ) <ok></ok><fl>18F8 3A15 </fl><fr>1904 3A15 </fr>
  0 2 ABSCHICKEN ( A gx ) <ok></ok><fl>1904 3A15 </fl><fr>1907 3A15 </fr>
  IAM1J @ IAM1K @ = IF 0 NK @ 1- 0 " DROP ZLOS " 2 ABSCHICKEN END_IF ( A' gx' ) <ok></ok><fl>1907 3A15 </fl><fr>1917 3A20 </fr>
  END_LOCAL <ok></ok><fl>1917 3A20 </fl><fr>1918 3A20 </fr>
  ; <ok></ok><fl>1918 3A20 </fl><fr>1919 3A20 </fr>
 <ok></ok>
( N, NJ, NK werden vorerst beim Matrix Aufteilen gesetzt <ok></ok>
: GINV ( A gx n --> A' gx' ) <ok></ok><fl>1919 3A20 </fl><fr>191D 3A25 </fr>
  ADBIT @ IF ." GINV " END_IF <ok></ok><fl>191D 3A25 </fl><fr>1923 3A2B </fr>
  DUP AMERK ! NN ! DUP GXMERK ! ( A gx ) <ok></ok><fl>1923 3A2B </fl><fr>192B 3A2B </fr>
  N @ NN @ M- NI ! <ok></ok><fl>192B 3A2B </fl><fr>1932 3A2B </fr>
  0 NK @ 1- NI @ NJ @ M/ ' JLOC! 0 2 ABSCHICKEN <ok></ok><fl>1932 3A2B </fl><fr>193F 3A2B </fr>
  NJ @ 1- 0 NI @ NK @ M/ ' KLOC! 0 3 ABSCHICKEN <ok></ok><fl>193F 3A2B </fl><fr>194C 3A2B </fr>
  OVER JLOC @ L KLOC @ L ADBIT @ IF DUP . END_IF ( A gx x ) <ok></ok><fl>194C 3A2B </fl><fr>1958 3A2B </fr>
  NJ @ 1- 0 ROT ' XYLOS 0 3 ABSCHICKEN <ok></ok><fl>1958 3A2B </fl><fr>1961 3A2B </fr>
  NN @ 1- IF 1 1 N @ " N ! " 1 ABSCHICKEN END_IF <ok></ok><fl>1961 3A2B </fl><fr>196E 3A30 </fr>
  NN @ 1- IF 1 1 NN @ 1- " GINV " 1 ABSCHICKEN END_IF <ok></ok><fl>196E 3A30 </fl><fr>197C 3A36 </fr>
  ; <ok></ok><fl>197C 3A36 </fl><fr>197D 3A36 </fr>
 <ok></ok>
: klMatAuft ( A gx --> ) ( = kleine Matrix aufteilen ) <ok></ok><fl>197D 3A36 </fl><fr>1981 3A40 </fr>
  ( L0=A L1=gx L2=nj L3=nk L4=j L5=k L6=A[j] ) <ok></ok><fl>1981 3A40 </fl><fr>1981 3A40 </fr>
  7 LOCAL <ok></ok><fl>1981 3A40 </fl><fr>1983 3A40 </fr>
  L1 ! L0 ! <ok></ok><fl>1983 3A40 </fl><fr>1987 3A40 </fr>
  NJ @ 1- NK @ 1- 0 " DROP [ [ " 3 ABSCHICKEN <ok></ok><fl>1987 3A40 </fl><fr>1993 3A4A </fr>
  0 L2 ! 0 L4 ! BEGIN <ok></ok><fl>1993 3A4A </fl><fr>1999 3A4A </fr>
    L0 @ L4 @ L L6 ! <ok></ok><fl>1999 3A4A </fl><fr>19A0 3A4A </fr>
    0 L3 ! 0 L5 ! BEGIN <ok></ok><fl>19A0 3A4A </fl><fr>19A6 3A4A </fr>
      L2 @ L3 @ L6 @ L5 @ L ' A+0 0 1 ABSCHICKEN <ok></ok><fl>19A6 3A4A </fl><fr>19B3 3A4A </fr>
      1 L3 +! L3 @ NK @ = IF 0 L3 ! END_IF <ok></ok><fl>19B3 3A4A </fl><fr>19BF 3A4A </fr>
      1 L5 +! L5 @ N @ = UNTIL <ok></ok><fl>19BF 3A4A </fl><fr>19C8 3A4A </fr>
    1 L2 +! L2 @ NJ @ = IF 0 L2 ! <ok></ok><fl>19C8 3A4A </fl><fr>19D4 3A4A </fr>
      NJ @ 1- NK @ 1- 0 " DROP ] [ " 3 ABSCHICKEN <ok></ok><fl>19D4 3A4A </fl><fr>19E0 3A54 </fr>
      END_IF <ok></ok><fl>19E0 3A54 </fl><fr>19E0 3A54 </fr>
    1 L4 +! L4 @ N @ = UNTIL <ok></ok><fl>19E0 3A54 </fl><fr>19E9 3A54 </fr>
  NJ @ 1- NK @ 1- 0 " DROP ] ] " 3 ABSCHICKEN <ok></ok><fl>19E9 3A54 </fl><fr>19F5 3A5E </fr>
  NJ @ 1- NK @ 1- L1 @ 0 0 3 ABSCHICKEN <ok></ok><fl>19F5 3A5E </fl><fr>1A01 3A5E </fr>
  END_LOCAL <ok></ok><fl>1A01 3A5E </fl><fr>1A02 3A5E </fr>
  ; <ok></ok><fl>1A02 3A5E </fl><fr>1A03 3A5E </fr>
 <ok></ok>
: INVERTIERE_SCHNELL ( A gx --> A' gx' ) <ok></ok><fl>1A03 3A5E </fl><fr>1A07 3A71 </fr>
  N @ GINV  <ok></ok><fl>1A07 3A71 </fl><fr>1A0A 3A71 </fr>
  ABWART <ok></ok><fl>1A0A 3A71 </fl><fr>1A0B 3A71 </fr>
  ; <ok></ok><fl>1A0B 3A71 </fl><fr>1A0C 3A71 </fr>
 <ok></ok>
: a00+d ( A gx d --> A' gx' ) <ok></ok><fl>1A0C 3A71 </fl><fr>1A10 3A77 </fr>
  ADBIT @ IF ." a00+d " END_IF <ok></ok><fl>1A10 3A77 </fl><fr>1A16 3A7E </fr>
  1 AMERK ! 1 NN ! GXMERK ! ( A gx ) <ok></ok><fl>1A16 3A7E </fl><fr>1A1E 3A7E </fr>
  0 NK @ 1- 0 ' JLOC! 0 2 ABSCHICKEN <ok></ok><fl>1A1E 3A7E </fl><fr>1A27 3A7E </fr>
  NJ @ 1- 0 0 ' KLOC! 0 3 ABSCHICKEN <ok></ok><fl>1A27 3A7E </fl><fr>1A30 3A7E </fr>
  OVER JLOC @ L KLOC @ L DUP . ( A gx b00 ) <ok></ok><fl>1A30 3A7E </fl><fr>1A39 3A7E </fr>
  GXMERK @ * OVER + DUP . ( A gx b00*d+gx ) <ok></ok><fl>1A39 3A7E </fl><fr>1A40 3A7E </fr>
  0 GXMERK ! <ok></ok><fl>1A40 3A7E </fl><fr>1A43 3A7E </fr>
  NJ @ 1- 0 ROT ' XYLOS 0 3 ABSCHICKEN <ok></ok><fl>1A43 3A7E </fl><fr>1A4C 3A7E </fr>
  ABWART <ok></ok><fl>1A4C 3A7E </fl><fr>1A4D 3A7E </fr>
  ; <ok></ok><fl>1A4D 3A7E </fl><fr>1A4E 3A7E </fr>
 <ok></ok>
: 0AMERK! 0 AMERK ! ; <ok></ok><fl>1A4E 3A7E </fl><fr>1A56 3A86 </fr>
 <ok></ok>
: ZURUECKSCHICKEN ( A gx [ jl kl ] --> bjk ) <ok></ok><fl>1A56 3A86 </fl><fr>1A5A 3A96 </fr>
  1 LOCAL <ok></ok><fl>1A5A 3A96 </fl><fr>1A5C 3A96 </fr>
  L0 ! <ok></ok><fl>1A5C 3A96 </fl><fr>1A5E 3A96 </fr>
  OVER <ok></ok><fl>1A5E 3A96 </fl><fr>1A5F 3A96 </fr>
  L0 @ 0 L L L0 @ 1 L L ( A gx bij ) <ok></ok><fl>1A5F 3A96 </fl><fr>1A69 3A96 </fr>
  IAM1J @ IF NJ @ IAM1J @ - ELSE 0 END_IF <ok></ok><fl>1A69 3A96 </fl><fr>1A73 3A96 </fr>
  IAM1K @ IF NK @ IAM1K @ - ELSE 0 END_IF <ok></ok><fl>1A73 3A96 </fl><fr>1A7D 3A96 </fr>
  ROT ' 0AMERK! 0 1 ABSCHICKEN <ok></ok><fl>1A7D 3A96 </fl><fr>1A82 3A96 </fr>
  END_LOCAL <ok></ok><fl>1A82 3A96 </fl><fr>1A83 3A96 </fr>
  ; <ok></ok><fl>1A83 3A96 </fl><fr>1A84 3A96 </fr>
   <ok></ok>
: B(j,k)@ ( j k --> bjk ) <ok></ok><fl>1A84 3A96 </fl><fr>1A88 3A9E </fr>
  4 LOCAL <ok></ok><fl>1A88 3A9E </fl><fr>1A8A 3A9E </fr>
  L1 ! L0 ! <ok></ok><fl>1A8A 3A9E </fl><fr>1A8E 3A9E </fr>
  L0 @ NJ @ M/MOD L2 ! <ok></ok><fl>1A8E 3A9E </fl><fr>1A95 3A9E </fr>
  L1 @ NK @ M/MOD L3 ! <ok></ok><fl>1A95 3A9E </fl><fr>1A9C 3A9E </fr>
  1 AMERK ! <ok></ok><fl>1A9C 3A9E </fl><fr>1A9F 3A9E </fr>
  [ L2 @ L3 @ ] ' ZURUECKSCHICKEN 0 1 ABSCHICKEN <ok></ok><fl>1A9F 3A9E </fl><fr>1AA9 3A9E </fr>
  ABWART <ok></ok><fl>1AA9 3A9E </fl><fr>1AAA 3A9E </fr>
  END_LOCAL <ok></ok><fl>1AAA 3A9E </fl><fr>1AAB 3A9E </fr>
  ; <ok></ok><fl>1AAB 3A9E </fl><fr>1AAC 3A9E </fr>
 <ok></ok>
: AUSGANGSMATRIX_NULLSETZEN <ok></ok><fl>1AAC 3A9E </fl><fr>1AB0 3AB8 </fr>
  NJ @ 1- NK @ 1- 0 ' INIT 0 3 ABSCHICKEN <ok></ok><fl>1AB0 3AB8 </fl><fr>1ABB 3AB8 </fr>
  ; <ok></ok><fl>1ABB 3AB8 </fl><fr>1ABC 3AB8 </fr>
: HAUPTNENNER ( x ==> x ) <ok></ok><fl>1ABC 3AB8 </fl><fr>1AC0 3AC4 </fr>
  NJ @ 1- NK @ 1- ROT 0 0 3 ABSCHICKEN <ok></ok><fl>1AC0 3AC4 </fl><fr>1ACB 3AC4 </fr>
  ; <ok></ok><fl>1ACB 3AC4 </fl><fr>1ACC 3AC4 </fr>
 <ok></ok>
: Ajk! ( A ajk jloc kloc --> A' ) <ok></ok><fl>1ACC 3AC4 </fl><fr>1AD0 3AC9 </fr>
  3 LOCAL <ok></ok><fl>1AD0 3AC9 </fl><fr>1AD2 3AC9 </fr>
  L2 ! L1 ! L0 ! <ok></ok><fl>1AD2 3AC9 </fl><fr>1AD8 3AC9 </fr>
  L1 @ G L2 @ L0 @ A+0 H H <ok></ok><fl>1AD8 3AC9 </fl><fr>1AE2 3AC9 </fr>
  END_LOCAL <ok></ok><fl>1AE2 3AC9 </fl><fr>1AE3 3AC9 </fr>
  ; <ok></ok><fl>1AE3 3AC9 </fl><fr>1AE4 3AC9 </fr>
 <ok></ok>
( 0 [ 77 3 4 ] Ajk! <ok></ok>
 <ok></ok>
: A(j,k)! ( A ajk j k --> A' ) <ok></ok><fl>1AE4 3AC9 </fl><fr>1AE8 3AD1 </fr>
  ( L0=aij L1=j L2=k L3=nj L4=nk L5=JLOC L6=KLOC ) <ok></ok><fl>1AE8 3AD1 </fl><fr>1AE8 3AD1 </fr>
  7 LOCAL L2 ! L1 ! L0 ! <ok></ok><fl>1AE8 3AD1 </fl><fr>1AF0 3AD1 </fr>
  L1 @ NJ @ M/MOD L5 ! L3 ! <ok></ok><fl>1AF0 3AD1 </fl><fr>1AF9 3AD1 </fr>
  L2 @ NK @ M/MOD L6 ! L4 ! <ok></ok><fl>1AF9 3AD1 </fl><fr>1B02 3AD1 </fr>
  L3 @ L4 @ L0 @ 0 0 1 ABSCHICKEN <ok></ok><fl>1B02 3AD1 </fl><fr>1B0C 3AD1 </fr>
  L3 @ L4 @ L5 @ 0 0 1 ABSCHICKEN <ok></ok><fl>1B0C 3AD1 </fl><fr>1B16 3AD1 </fr>
  L3 @ L4 @ L6 @ ' Ajk! 0 1 ABSCHICKEN <ok></ok><fl>1B16 3AD1 </fl><fr>1B20 3AD1 </fr>
  END_LOCAL <ok></ok><fl>1B20 3AD1 </fl><fr>1B21 3AD1 </fr>
  ; <ok></ok><fl>1B21 3AD1 </fl><fr>1B22 3AD1 </fr>
 <ok></ok>
: VANDERMONDEMATRIX_GLEICH_AUFTEILEN ( 0 n --> mat ) <ok></ok><fl>1B22 3AD1 </fl><fr>1B26 3AF4 </fr>
  3 LOCAL <ok></ok><fl>1B26 3AF4 </fl><fr>1B28 3AF4 </fr>
  N !  <ok></ok><fl>1B28 3AF4 </fl><fr>1B2A 3AF4 </fr>
  N @ L1 ! BEGIN L1 @ DUP WHILE 1- L1 ! <ok></ok><fl>1B2A 3AF4 </fl><fr>1B35 3AF4 </fr>
    N @ L2 ! BEGIN L2 @ DUP WHILE 1- L2 ! <ok></ok><fl>1B35 3AF4 </fl><fr>1B40 3AF4 </fr>
      L1 @ 1+ L2 @ 1+ ^  <ok></ok><fl>1B40 3AF4 </fl><fr>1B47 3AF4 </fr>
      ADBIT @ IF CR L1 @ L2 @ B. DUP . END_IF <ok></ok><fl>1B47 3AF4 </fl><fr>1B52 3AF4 </fr>
      L1 @ L2 @ A(j,k)! <ok></ok><fl>1B52 3AF4 </fl><fr>1B57 3AF4 </fr>
      REPEAT DROP <ok></ok><fl>1B57 3AF4 </fl><fr>1B59 3AF4 </fr>
    REPEAT DROP <ok></ok><fl>1B59 3AF4 </fl><fr>1B5B 3AF4 </fr>
  END_LOCAL <ok></ok><fl>1B5B 3AF4 </fl><fr>1B5C 3AF4 </fr>
  ; <ok></ok><fl>1B5C 3AF4 </fl><fr>1B5D 3AF4 </fr>
 <ok></ok>
</sekt> 
 <ok></ok>
<sekt inhalt="in den Zustand für Step_12 bringen und wieder RAM generieren"> 
( allerdings beim Compilieren von großen ganzen Zahlen im Moment noch 1234 ERROR <ok></ok>
 <ok></ok>
( an der Stelle Programm-VHDL-Quelltext für Step_12 ausgeben ) <ok></ok>
HEX INIT <ok></ok>
HERE 0 0 DUMPZ           ( generiert progRAM für P20_FFP.vhd Step_12 <ok>
<DUMPZ>
  x"4010",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 0000-000F
  x"4760",x"A003",x"447D",x"A003",x"4000",x"A003",x"4000",x"A003",x"4000",x"A003",x"4000",x"A003",x"4000",x"A003",x"0010",x"A003", -- 0010-001F
  x"0000",x"3000",x"0001",x"4773",x"0029",x"45E4",x"B200",x"A003",x"FFF8",x"3002",x"0001",x"4773",x"0000",x"2F10",x"A009",x"A003", -- 0020-002F
  x"FFF8",x"3004",x"0001",x"4781",x"0001",x"2F10",x"A009",x"A003",x"FFF8",x"3006",x"0007",x"4773",x"0020",x"45E4",x"465E",x"469E", -- 0030-003F
  x"B300",x"46A7",x"A003",x"FFF5",x"300E",x"0004",x"4781",x"B412",x"1000",x"A002",x"B412",x"B300",x"A003",x"FFF6",x"3013",x"0003", -- 0040-004F
  x"4781",x"B501",x"A00F",x"9001",x"A000",x"A003",x"FFF7",x"3017",x"0004",x"4781",x"B501",x"4051",x"0004",x"0000",x"4047",x"A008", -- 0050-005F
  x"9002",x"0111",x"43C2",x"4300",x"A003",x"FFF1",x"301C",x"000B",x"477A",x"42CF",x"A00A",x"2F10",x"A00A",x"9001",x"405A",x"A003", -- 0060-006F
  x"FFF5",x"3028",x"0008",x"4781",x"46B1",x"4068",x"4300",x"476B",x"A003",x"FFF7",x"3031",x"0006",x"4069",x"2800",x"FFFB",x"3038", -- 0070-007F
  x"0002",x"4069",x"2801",x"FFFB",x"303B",x"0002",x"4069",x"2802",x"FFFB",x"303E",x"0002",x"4069",x"2803",x"FFFB",x"3041",x"0004", -- 0080-008F
  x"4069",x"2F00",x"FFFB",x"3046",x"0009",x"4069",x"2F01",x"FFFB",x"3050",x"0003",x"4069",x"2F02",x"FFFB",x"3054",x"0007",x"4069", -- 0090-009F
  x"2F03",x"FFFB",x"305C",x"0007",x"4069",x"2F04",x"FFFB",x"3064",x"0004",x"4069",x"2F05",x"FFFB",x"3069",x"0007",x"4069",x"2F06", -- 00A0-00AF
  x"FFFB",x"3071",x"0004",x"4069",x"2F07",x"FFFB",x"3076",x"0004",x"4069",x"2F08",x"FFFB",x"307B",x"0003",x"4069",x"2F09",x"FFFB", -- 00B0-00BF
  x"307F",x"0003",x"4069",x"2F0A",x"FFFB",x"3083",x"0003",x"4069",x"2F0B",x"FFFB",x"3087",x"0003",x"4069",x"2F0C",x"FFFB",x"308B", -- 00C0-00CF
  x"0003",x"4069",x"2F0D",x"FFFB",x"308F",x"0007",x"4069",x"2F0E",x"FFFB",x"3097",x"0002",x"4069",x"2F0F",x"FFFB",x"309A",x"0004", -- 00D0-00DF
  x"4069",x"2F10",x"FFFB",x"309F",x"0003",x"4069",x"2F11",x"FFFB",x"30A3",x"0004",x"4069",x"2F12",x"FFFB",x"30A8",x"0005",x"4069", -- 00E0-00EF
  x"2F13",x"FFFB",x"30AE",x"0006",x"4069",x"2F14",x"FFFB",x"30B5",x"0003",x"4069",x"2F15",x"FFFB",x"30B9",x"0005",x"4069",x"2F16", -- 00F0-00FF
  x"FFFB",x"30BF",x"000C",x"4069",x"2F17",x"FFFB",x"30CC",x"0007",x"4069",x"01CB",x"FFFB",x"30D4",x"0006",x"4781",x"000A",x"0003", -- 0100-010F
  x"4047",x"A003",x"FFF8",x"30DB",x"0008",x"477A",x"42CF",x"2F10",x"A00A",x"9003",x"A00A",x"4300",x"8001",x"430B",x"A003",x"FFF3", -- 0110-011F
  x"30E4",x"0005",x"4781",x"46B1",x"4115",x"4300",x"410E",x"4300",x"476B",x"A003",x"FFF5",x"30EA",x"0005",x"4116",x"A000",x"A003", -- 0120-012F
  x"FFFA",x"30F0",x"0002",x"4116",x"A001",x"A003",x"FFFA",x"30F3",x"0002",x"4116",x"A002",x"A003",x"FFFA",x"30F6",x"0002",x"4116", -- 0130-013F
  x"A00D",x"A003",x"FFFA",x"30F9",x"0003",x"4116",x"A00F",x"A003",x"FFFA",x"30FD",x"0008",x"4116",x"A005",x"A003",x"FFFA",x"3106", -- 0140-014F
  x"0003",x"4116",x"A00B",x"A003",x"FFFA",x"310A",x"0003",x"4116",x"A008",x"A003",x"FFFA",x"310E",x"0002",x"4116",x"A00E",x"A003", -- 0150-015F
  x"FFFA",x"3111",x"0002",x"4116",x"A007",x"A003",x"FFFA",x"3114",x"0001",x"4116",x"A009",x"A003",x"FFFA",x"3116",x"0001",x"4116", -- 0160-016F
  x"A00A",x"A003",x"FFFA",x"3118",x"0004",x"4116",x"B412",x"A003",x"FFFA",x"311D",x"0004",x"4116",x"B502",x"A003",x"FFFA",x"3122", -- 0170-017F
  x"0003",x"4116",x"B501",x"A003",x"FFFA",x"3126",x"0003",x"4116",x"B434",x"A003",x"FFFA",x"312A",x"0004",x"4116",x"B300",x"A003", -- 0180-018F
  x"FFFA",x"312F",x"0005",x"4116",x"B43C",x"A003",x"FFFA",x"3135",x"0005",x"4116",x"B60C",x"A003",x"FFFA",x"313B",x"0004",x"4116", -- 0190-019F
  x"B603",x"A003",x"FFFA",x"3140",x"0005",x"4116",x"B200",x"A003",x"FFFA",x"3146",x"0004",x"4116",x"8000",x"A003",x"FFFA",x"314B", -- 01A0-01AF
  x"0002",x"4781",x"2F13",x"A00A",x"A009",x"0001",x"2F13",x"42C4",x"A003",x"FFF5",x"314E",x"0002",x"4781",x"2F13",x"A00A",x"405A", -- 01B0-01BF
  x"B501",x"4300",x"B412",x"B501",x"A00A",x"41B2",x"4286",x"B412",x"428D",x"B501",x"A00D",x"9FF6",x"B200",x"0020",x"41B2",x"A003", -- 01C0-01CF
  x"FFE9",x"3151",x"0007",x"477A",x"45E4",x"2F10",x"A00A",x"9003",x"41BD",x"42CF",x"46A7",x"A003",x"FFF4",x"3159",x"0005",x"4781", -- 01D0-01DF
  x"46B1",x"0001",x"2F10",x"A009",x"4300",x"41D3",x"FFFF",x"2F15",x"42C4",x"A003",x"FFF2",x"315F",x"0001",x"0022",x"41D4",x"A003", -- 01E0-01EF
  x"FFFA",x"3161",x"0002",x"0022",x"41D4",x"433C",x"A003",x"FFF9",x"3164",x"0004",x"4781",x"2F0F",x"A00A",x"A003",x"FFF9",x"3169", -- 01F0-01FF
  x"0005",x"4781",x"0008",x"A003",x"FFFA",x"316F",x"0006",x"4781",x"0009",x"A003",x"FFFA",x"3176",x"0006",x"4781",x"0000",x"1000", -- 0200-020F
  x"B434",x"A002",x"B412",x"B300",x"B412",x"0FFF",x"A008",x"A00E",x"A003",x"FFF1",x"317D",x"0005",x"4781",x"2F0F",x"42C4",x"A003", -- 0210-021F
  x"FFF9",x"3183",x"0007",x"4781",x"41FB",x"4286",x"4294",x"4202",x"420E",x"4300",x"A003",x"FFF5",x"318B",x"0008",x"4781",x"41FB", -- 0220-022F
  x"4286",x"4294",x"4208",x"420E",x"4300",x"A003",x"FFF5",x"3194",x"0005",x"4773",x"41FB",x"A003",x"FFFA",x"319A",x"0005",x"4773", -- 0230-023F
  x"4224",x"A003",x"FFFA",x"31A0",x"0005",x"4773",x"422F",x"A003",x"FFFA",x"31A6",x"0002",x"4773",x"4208",x"0001",x"421D",x"41FB", -- 0240-024F
  x"A003",x"FFF7",x"31A9",x"0006",x"4773",x"41FB",x"B502",x"4294",x"B434",x"420E",x"B412",x"428D",x"A009",x"A003",x"FFF3",x"31B0", -- 0250-025F
  x"0004",x"4773",x"0001",x"421D",x"4254",x"4202",x"41FB",x"A003",x"FFF6",x"31B5",x"0005",x"4773",x"424B",x"A003",x"FFFA",x"31BB", -- 0260-026F
  x"0006",x"4773",x"B434",x"423F",x"4254",x"A003",x"FFF8",x"31C2",x"0002",x"4781",x"A00A",x"A003",x"FFFA",x"31C5",x"0002",x"4781", -- 0270-027F
  x"A009",x"A003",x"FFFA",x"31C8",x"0002",x"4781",x"0001",x"A007",x"A003",x"FFF9",x"31CB",x"0002",x"4781",x"FFFF",x"A007",x"A003", -- 0280-028F
  x"FFF9",x"31CE",x"0002",x"4781",x"A000",x"A007",x"A003",x"FFF9",x"31D1",x"0001",x"4781",x"4294",x"A00D",x"A003",x"FFF9",x"31D3", -- 0290-029F
  x"0002",x"4781",x"4294",x"A00F",x"A003",x"FFF9",x"31D6",x"0001",x"4781",x"B412",x"42A2",x"A003",x"FFF9",x"31D8",x"0002",x"4781", -- 02A0-02AF
  x"0000",x"B434",x"B434",x"A002",x"B412",x"B300",x"A003",x"FFF5",x"31DB",x"0003",x"4781",x"31DF",x"0004",x"41F5",x"8FFC",x"A003", -- 02B0-02BF
  x"FFF7",x"31E4",x"0002",x"4781",x"B412",x"B502",x"A00A",x"A007",x"B412",x"A009",x"A003",x"FFF5",x"31E7",x"0002",x"4781",x"2802", -- 02C0-02CF
  x"A00A",x"4286",x"A00A",x"2802",x"A00A",x"4286",x"2802",x"B603",x"A00A",x"A00A",x"B412",x"A009",x"A009",x"A003",x"FFED",x"31EA", -- 02D0-02DF
  x"0002",x"4781",x"2802",x"A00A",x"B501",x"428D",x"2802",x"B603",x"A00A",x"A00A",x"B412",x"B501",x"428D",x"2802",x"A009",x"A009", -- 02E0-02EF
  x"A009",x"A009",x"A003",x"FFEB",x"31ED",x"0001",x"4781",x"2802",x"A00A",x"4286",x"A00A",x"A003",x"FFF7",x"31EF",x"0001",x"4781", -- 02F0-02FF
  x"2F0F",x"A00A",x"A009",x"0001",x"2F0F",x"42C4",x"A003",x"FFF5",x"31F1",x"0007",x"4781",x"2803",x"A009",x"A003",x"FFF9",x"31F9", -- 0300-030F
  x"0003",x"4781",x"5324",x"44AC",x"A00B",x"9002",x"B300",x"8FFA",x"A003",x"FFF5",x"31FD",x"0004",x"4781",x"014C",x"430B",x"A003", -- 0310-031F
  x"FFF9",x"3202",x"0005",x"4781",x"0000",x"B412",x"0010",x"A002",x"B412",x"A003",x"FFF6",x"3208",x"0003",x"4781",x"B501",x"000A", -- 0320-032F
  x"42A2",x"9001",x"8002",x"0007",x"A007",x"0030",x"A007",x"A003",x"FFF2",x"320C",x"0004",x"4781",x"B501",x"9008",x"B412",x"B501", -- 0330-033F
  x"427A",x"431D",x"4286",x"B412",x"428D",x"8FF6",x"B200",x"A003",x"FFF0",x"3211",x"0003",x"4781",x"4324",x"432E",x"431D",x"4324", -- 0340-034F
  x"432E",x"431D",x"4324",x"432E",x"431D",x"4324",x"432E",x"431D",x"B300",x"A003",x"FFEE",x"3215",x"0002",x"4781",x"434C",x"0020", -- 0350-035F
  x"431D",x"A003",x"FFF8",x"3218",x"0002",x"4781",x"A00A",x"435E",x"A003",x"FFF9",x"321B",x"0002",x"4781",x"2F07",x"A00A",x"2F0F", -- 0360-036F
  x"A00A",x"4294",x"2F10",x"A00A",x"A00D",x"A00B",x"A00E",x"2F00",x"A00A",x"A00D",x"A00B",x"A008",x"9028",x"003C",x"431D",x"321E", -- 0370-037F
  x"0003",x"41F5",x"2F07",x"A00A",x"435E",x"2F06",x"A00A",x"435E",x"003C",x"431D",x"3222",x"0004",x"41F5",x"003C",x"431D",x"3227", -- 0380-038F
  x"0003",x"41F5",x"2F0F",x"A00A",x"435E",x"2F13",x"A00A",x"435E",x"003C",x"431D",x"322B",x"0004",x"41F5",x"2F0F",x"A00A",x"2F07", -- 0390-039F
  x"A009",x"2F13",x"A00A",x"2F06",x"A009",x"000A",x"431D",x"A003",x"FFC1",x"3230",x"000A",x"4781",x"A003",x"FFFB",x"323B",x"0007", -- 03A0-03AF
  x"4781",x"436D",x"3243",x"0019",x"41F5",x"0020",x"431D",x"0008",x"431D",x"4312",x"001B",x"429B",x"9FF8",x"A003",x"FFEF",x"325D", -- 03B0-03BF
  x"0005",x"4781",x"5842",x"A003",x"A009",x"0000",x"2F10",x"A009",x"436D",x"2F0A",x"A00A",x"2F0C",x"A00A",x"2F0A",x"A00A",x"4294", -- 03C0-03CF
  x"428D",x"433C",x"3263",x"0003",x"41F5",x"3267",x"000A",x"41EF",x"46C6",x"436D",x"3272",x"0016",x"41F5",x"435E",x"43B1",x"4713", -- 03D0-03DF
  x"A003",x"FFDD",x"3289",x"0004",x"4781",x"2801",x"A00A",x"2F15",x"A009",x"A003",x"FFF7",x"328E",x"0004",x"4781",x"2801",x"A00A", -- 03E0-03EF
  x"2F15",x"A00A",x"4294",x"9002",x"0009",x"43C2",x"A003",x"FFF3",x"3293",x"0005",x"4781",x"4286",x"2F17",x"A00A",x"B502",x"4294", -- 03F0-03FF
  x"B501",x"2F17",x"A009",x"A009",x"A003",x"FFF2",x"3299",x"0009",x"4781",x"2F17",x"A00A",x"B501",x"A00A",x"A007",x"2F17",x"A009", -- 0400-040F
  x"A003",x"FFF4",x"32A3",x"0002",x"4781",x"2F17",x"A00A",x"4286",x"A003",x"FFF8",x"32A6",x"0002",x"4781",x"2F17",x"A00A",x"0002", -- 0410-041F
  x"A007",x"A003",x"FFF7",x"32A9",x"0002",x"4781",x"2F17",x"A00A",x"0003",x"A007",x"A003",x"FFF7",x"32AC",x"0002",x"4781",x"2F17", -- 0420-042F
  x"A00A",x"0004",x"A007",x"A003",x"FFF7",x"32AF",x"0002",x"4781",x"2F17",x"A00A",x"0005",x"A007",x"A003",x"FFF7",x"32B2",x"0002", -- 0430-043F
  x"4781",x"2F17",x"A00A",x"0006",x"A007",x"A003",x"FFF7",x"32B5",x"0002",x"4781",x"2F17",x"A00A",x"0007",x"A007",x"A003",x"FFF7", -- 0440-044F
  x"32B8",x"0002",x"4781",x"2F17",x"A00A",x"0008",x"A007",x"A003",x"FFF7",x"32BB",x"0001",x"4773",x"0020",x"45E4",x"465E",x"469E", -- 0450-045F
  x"B300",x"4286",x"2F10",x"A00A",x"9001",x"405A",x"A003",x"FFF1",x"32BD",x"0005",x"4781",x"B501",x"A00A",x"4286",x"B501",x"03FF", -- 0460-046F
  x"A008",x"0000",x"429B",x"9002",x"FC00",x"A007",x"B412",x"A009",x"A003",x"FFEE",x"32C3",x"0007",x"4781",x"2800",x"A00A",x"B501", -- 0470-047F
  x"0008",x"42A2",x"9009",x"0018",x"A007",x"A00A",x"B501",x"9002",x"B501",x"430B",x"B300",x"8018",x"2F03",x"A00A",x"A009",x"2F03", -- 0480-048F
  x"446B",x"2F03",x"A00A",x"2F04",x"A00A",x"4294",x"03FF",x"A008",x"0080",x"42A9",x"9009",x"2F05",x"A00A",x"A00D",x"9005",x"FFFF", -- 0490-049F
  x"2F05",x"A009",x"0013",x"431D",x"0000",x"2800",x"A009",x"A003",x"FFD1",x"32CB",x"0008",x"4781",x"2F04",x"A00A",x"2F03",x"A00A", -- 04A0-04AF
  x"429B",x"9003",x"0000",x"0000",x"8018",x"2F04",x"A00A",x"A00A",x"FFFF",x"2F04",x"446B",x"2F03",x"A00A",x"2F04",x"A00A",x"4294", -- 04B0-04BF
  x"03FF",x"A008",x"0020",x"42A2",x"9008",x"2F05",x"A00A",x"9005",x"0000",x"2F05",x"A009",x"0011",x"431D",x"A003",x"FFDA",x"32D4", -- 04C0-04CF
  x"0006",x"4781",x"0005",x"43FB",x"4426",x"A009",x"441D",x"A009",x"441D",x"A00A",x"4438",x"A009",x"4312",x"B501",x"0014",x"429B", -- 04D0-04DF
  x"9004",x"B300",x"441D",x"A00A",x"427A",x"B501",x"007F",x"429B",x"9002",x"B300",x"0008",x"B501",x"0008",x"429B",x"9012",x"4438", -- 04E0-04EF
  x"A00A",x"441D",x"A00A",x"42A2",x"900C",x"FFFF",x"441D",x"42C4",x"0001",x"4426",x"42C4",x"0008",x"431D",x"0020",x"431D",x"0008", -- 04F0-04FF
  x"431D",x"B501",x"0020",x"42A2",x"9001",x"8012",x"FFFF",x"4426",x"42C4",x"4426",x"A00A",x"A00F",x"9002",x"0006",x"43C2",x"B501", -- 0500-050F
  x"431D",x"B501",x"441D",x"A00A",x"4280",x"0001",x"441D",x"42C4",x"B501",x"0020",x"42A2",x"B502",x"0008",x"429B",x"A00B",x"A008", -- 0510-051F
  x"B412",x"001B",x"429B",x"A00B",x"A008",x"4426",x"A00A",x"A00D",x"A00E",x"9FB2",x"0020",x"431D",x"4438",x"A00A",x"441D",x"A00A", -- 0520-052F
  x"4438",x"A00A",x"4294",x"B603",x"A007",x"0000",x"B412",x"4280",x"4409",x"A003",x"FF94",x"32DB",x"0005",x"4781",x"B501",x"0030", -- 0530-053F
  x"42A2",x"A00B",x"B502",x"003A",x"42A2",x"A008",x"B502",x"0041",x"42A2",x"A00B",x"A00E",x"B501",x"9015",x"B412",x"0030",x"4294", -- 0540-054F
  x"B501",x"000A",x"42A2",x"A00B",x"9002",x"0007",x"4294",x"B501",x"2F08",x"A00A",x"42A2",x"A00B",x"9004",x"B300",x"B300",x"0000", -- 0550-055F
  x"0000",x"B412",x"A003",x"FFD7",x"32E1",x"0006",x"4781",x"4E3C",x"A003",x"441D",x"A009",x"4415",x"A009",x"0000",x"441D",x"A00A", -- 0560-056F
  x"9063",x"B501",x"4426",x"A009",x"0001",x"4441",x"A009",x"FFFF",x"444A",x"A009",x"4415",x"A00A",x"4426",x"A00A",x"A007",x"427A", -- 0570-057F
  x"002B",x"429B",x"9009",x"4426",x"A00A",x"4286",x"4426",x"A009",x"0000",x"444A",x"A009",x"8016",x"4415",x"A00A",x"4426",x"A00A", -- 0580-058F
  x"A007",x"427A",x"002D",x"429B",x"900D",x"4426",x"A00A",x"4286",x"4426",x"A009",x"0000",x"444A",x"A009",x"4441",x"A00A",x"A000", -- 0590-059F
  x"4441",x"A009",x"444A",x"A00A",x"9FD2",x"4426",x"A00A",x"441D",x"A00A",x"42A2",x"9029",x"4415",x"A00A",x"4426",x"A00A",x"A007", -- 05A0-05AF
  x"427A",x"B501",x"9015",x"453E",x"A00B",x"9007",x"B300",x"441D",x"A00A",x"A000",x"441D",x"A009",x"800A",x"B412",x"2F08",x"A00A", -- 05B0-05BF
  x"42B0",x"A007",x"4426",x"A00A",x"4286",x"4426",x"A009",x"8005",x"B300",x"4426",x"A00A",x"441D",x"A009",x"4426",x"A00A",x"441D", -- 05C0-05CF
  x"A00A",x"42A2",x"A00B",x"9FD7",x"4441",x"A00A",x"A00F",x"9001",x"A000",x"4426",x"A00A",x"441D",x"A00A",x"4294",x"4409",x"A003", -- 05D0-05DF
  x"FF83",x"32E8",x"0004",x"4781",x"42E2",x"2F0C",x"A00A",x"2F0B",x"A009",x"2F0C",x"A00A",x"427A",x"42F7",x"429B",x"2F0C",x"A00A", -- 05E0-05EF
  x"2F0D",x"A00A",x"42A2",x"A008",x"9004",x"0001",x"2F0C",x"42C4",x"8FF0",x"2F0C",x"A00A",x"2F0B",x"A009",x"2F0C",x"A00A",x"427A", -- 05F0-05FF
  x"003C",x"429B",x"9004",x"2F0C",x"A00A",x"2F0D",x"A009",x"2F0C",x"A00A",x"427A",x"42F7",x"429B",x"A00B",x"2F0C",x"A00A",x"2F0D", -- 0600-060F
  x"A00A",x"42A2",x"A008",x"9004",x"0001",x"2F0C",x"42C4",x"8FE5",x"2F0B",x"A00A",x"2F0C",x"A00A",x"B502",x"4294",x"B501",x"9003", -- 0610-061F
  x"0001",x"2F0C",x"42C4",x"42CF",x"B300",x"A003",x"FFBA",x"32ED",x"0002",x"4781",x"42E2",x"B502",x"42F7",x"4294",x"9007",x"42CF", -- 0620-062F
  x"B300",x"B300",x"B300",x"B300",x"0000",x"8023",x"42CF",x"B300",x"B412",x"0000",x"B603",x"4294",x"9016",x"42E2",x"42E2",x"B502", -- 0630-063F
  x"427A",x"B502",x"427A",x"4294",x"9004",x"B300",x"B300",x"0000",x"0000",x"B501",x"9004",x"4286",x"B412",x"4286",x"B412",x"42CF", -- 0640-064F
  x"42CF",x"4286",x"8FE7",x"B200",x"B300",x"9002",x"FFFF",x"8001",x"0000",x"A003",x"FFCC",x"32F0",x"0004",x"4781",x"42E2",x"42E2", -- 0650-065F
  x"0000",x"2F11",x"A00A",x"2F01",x"A00A",x"9003",x"B501",x"A00A",x"A007",x"B501",x"4286",x"B501",x"A00A",x"B412",x"4286",x"A00A", -- 0660-066F
  x"42CF",x"42CF",x"B603",x"42E2",x"42E2",x"462A",x"9003",x"B412",x"A00D",x"B412",x"B502",x"A00D",x"B502",x"A00A",x"A00D",x"A00B", -- 0670-067F
  x"A008",x"B502",x"B501",x"A00A",x"A007",x"2F11",x"A00A",x"429B",x"A00B",x"A008",x"9004",x"B501",x"A00A",x"A007",x"8FDA",x"42CF", -- 0680-068F
  x"B300",x"42CF",x"B434",x"A00D",x"9004",x"B300",x"B300",x"0000",x"0000",x"A003",x"FFC0",x"32F5",x"0004",x"4781",x"B412",x"0003", -- 0690-069F
  x"A007",x"B412",x"A003",x"FFF7",x"32FA",x"0008",x"4781",x"0004",x"0000",x"4047",x"A00E",x"4300",x"A003",x"FFF6",x"3303",x"0006", -- 06A0-06AF
  x"4781",x"43E5",x"2F0F",x"A00A",x"2F11",x"A00A",x"B502",x"4294",x"4300",x"2F11",x"A009",x"0020",x"45E4",x"41BD",x"0001",x"2F01", -- 06B0-06BF
  x"A009",x"A003",x"FFEB",x"330A",x"0009",x"4781",x"2F0A",x"A00A",x"42E2",x"2F0B",x"A00A",x"42E2",x"2F0C",x"A00A",x"42E2",x"2F0D", -- 06C0-06CF
  x"A00A",x"42E2",x"B502",x"A007",x"2F0D",x"A009",x"B501",x"2F0A",x"A009",x"B501",x"2F0B",x"A009",x"2F0C",x"A009",x"0020",x"45E4", -- 06D0-06DF
  x"B501",x"901F",x"B603",x"465E",x"B501",x"9009",x"42E2",x"42E2",x"B200",x"42CF",x"42CF",x"469E",x"B300",x"430B",x"8011",x"B200", -- 06E0-06EF
  x"B603",x"4567",x"9005",x"B200",x"B300",x"0003",x"43C2",x"8008",x"B434",x"B300",x"B412",x"B300",x"2F10",x"A00A",x"9001",x"405A", -- 06F0-06FF
  x"8FDD",x"B200",x"42CF",x"2F0D",x"A009",x"42CF",x"2F0C",x"A009",x"42CF",x"2F0B",x"A009",x"42CF",x"2F0A",x"A009",x"A003",x"FFB3", -- 0700-070F
  x"3314",x"0004",x"4781",x"2F02",x"A00A",x"2802",x"A009",x"2F00",x"A00A",x"9006",x"003C",x"431D",x"3319",x"0004",x"41F5",x"8003", -- 0710-071F
  x"331E",x"0002",x"41F5",x"436D",x"2F09",x"A00A",x"0100",x"44D2",x"B502",x"A00A",x"003C",x"429B",x"9002",x"B200",x"802B",x"2F00", -- 0720-072F
  x"A00A",x"900C",x"003C",x"431D",x"3321",x"0003",x"41F5",x"46C6",x"003C",x"431D",x"3325",x"0004",x"41F5",x"801C",x"001B",x"431D", -- 0730-073F
  x"005B",x"431D",x"0033",x"431D",x"0036",x"431D",x"006D",x"431D",x"46C6",x"2F10",x"A00A",x"A00D",x"9003",x"332A",x"0002",x"41F5", -- 0740-074F
  x"001B",x"431D",x"005B",x"431D",x"0033",x"431D",x"0039",x"431D",x"006D",x"431D",x"8FC8",x"A003",x"FFB3",x"332D",x"0005",x"4781", -- 0750-075F
  x"3333",x"000B",x"41F5",x"436D",x"436D",x"4713",x"A003",x"FFF5",x"333F",x"0006",x"4781",x"0000",x"2F01",x"A009",x"A003",x"FFF8", -- 0760-076F
  x"3346",x"000C",x"4781",x"42CF",x"42E2",x"A003",x"FFF9",x"3353",x"000A",x"4781",x"42CF",x"46A7",x"A003",x"FFF9",x"335E",x"0003", -- 0770-077F
  x"4781",x"42CF",x"2F10",x"A00A",x"9002",x"46A7",x"8001",x"42E2",x"A003",x"FFF4",x"3362",x"000A",x"4781",x"46B1",x"0001",x"2F10", -- 0780-078F
  x"A009",x"4772",x"A003",x"FFF6",x"336D",x"0008",x"4781",x"46B1",x"0001",x"2F10",x"A009",x"4779",x"A003",x"FFF6",x"3376",x"0001", -- 0790-079F
  x"4781",x"46B1",x"0001",x"2F10",x"A009",x"4780",x"A003",x"FFF6",x"3378",x"0001",x"4773",x"0000",x"2F10",x"A009",x"43EE",x"410E", -- 07A0-07AF
  x"4300",x"476B",x"A003",x"FFF4",x"337A",x"0003",x"4781",x"2F16",x"A00A",x"9005",x"4324",x"B300",x"4324",x"B300",x"8006",x"4324", -- 07B0-07BF
  x"432E",x"431D",x"4324",x"432E",x"431D",x"4324",x"432E",x"431D",x"4324",x"432E",x"431D",x"B300",x"A003",x"FFE6",x"337E",x"0003", -- 07C0-07CF
  x"4781",x"3382",x"0001",x"41F5",x"0022",x"431D",x"47B7",x"0022",x"431D",x"3384",x"0001",x"41F5",x"A003",x"FFF0",x"3386",x"0005", -- 07D0-07DF
  x"4781",x"2F16",x"A009",x"2F00",x"A00A",x"42E2",x"0000",x"2F00",x"A009",x"338C",x"0008",x"41EF",x"46C6",x"0004",x"0000",x"4047", -- 07E0-07EF
  x"A00E",x"0010",x"A009",x"436D",x"003C",x"431D",x"3395",x"0006",x"41F5",x"436D",x"339C",x"0002",x"41F5",x"0000",x"B603",x"A007", -- 07F0-07FF
  x"B501",x"2F03",x"429B",x"9002",x"B300",x"2F04",x"B501",x"2F17",x"429B",x"9005",x"B300",x"2D00",x"2F80",x"A009",x"2F80",x"B501", -- 0800-080F
  x"2F05",x"429B",x"9002",x"B300",x"2F00",x"A00A",x"47D1",x"4286",x"B501",x"0010",x"429B",x"9FE2",x"B300",x"339F",x"0004",x"41F5", -- 0810-081F
  x"B501",x"434C",x"33A4",x"0001",x"41F5",x"B501",x"000F",x"A007",x"434C",x"0010",x"A007",x"B603",x"42A9",x"A00B",x"9FCA",x"B200", -- 0820-082F
  x"436D",x"003C",x"431D",x"33A6",x"0007",x"41F5",x"42CF",x"2F00",x"A009",x"A003",x"FFA3",x"33AE",x"0005",x"4069",x"2F20",x"FFFB", -- 0830-083F
  x"33B4",x"0008",x"4781",x"2F20",x"A00A",x"B501",x"4074",x"B501",x"4286",x"2F20",x"A009",x"A009",x"A003",x"FFF2",x"33BD",x"0004", -- 0840-084F
  x"4781",x"B501",x"900D",x"B434",x"B434",x"B502",x"A00A",x"B502",x"A009",x"B412",x"4286",x"B412",x"4286",x"B434",x"428D",x"8FF1", -- 0850-085F
  x"B300",x"B200",x"A003",x"FFEA",x"33C2",x"0004",x"4781",x"B434",x"B434",x"B501",x"9008",x"B434",x"B434",x"B603",x"A009",x"4286", -- 0860-086F
  x"B434",x"428D",x"8FF6",x"B300",x"B200",x"A003",x"FFED",x"33C7",x"0004",x"4781",x"B412",x"B501",x"A00A",x"435E",x"4286",x"B412", -- 0870-087F
  x"428D",x"B501",x"A00D",x"9FF6",x"B200",x"A003",x"FFF0",x"33CC",x"0003",x"4781",x"B603",x"42A2",x"9001",x"B412",x"B300",x"A003", -- 0880-088F
  x"FFF6",x"33D0",x"0003",x"4781",x"B603",x"42A9",x"9001",x"B412",x"B300",x"A003",x"FFF6",x"33D4",x"0006",x"4116",x"A017",x"A003", -- 0890-089F
  x"FFFA",x"33DB",x"0007",x"4116",x"A018",x"A003",x"FFFA",x"33E3",x"0009",x"4781",x"42E2",x"A017",x"A018",x"9FFD",x"42CF",x"B300", -- 08A0-08AF
  x"A003",x"FFF5",x"33ED",x"0001",x"4069",x"1401",x"FFFB",x"33EF",x"0001",x"4069",x"1601",x"FFFB",x"33F1",x"0001",x"4069",x"1801", -- 08B0-08BF
  x"FFFB",x"33F3",x"0004",x"4781",x"0007",x"43FB",x"444A",x"A009",x"4441",x"A009",x"4438",x"A009",x"442F",x"A009",x"4426",x"A009", -- 08C0-08CF
  x"441D",x"A009",x"4415",x"A009",x"4415",x"A00A",x"442F",x"A00A",x"9001",x"A00B",x"441D",x"A00A",x"4438",x"A00A",x"A007",x"4286", -- 08D0-08DF
  x"444A",x"A00A",x"B502",x"0000",x"4867",x"444A",x"A00A",x"B501",x"4426",x"A00A",x"441D",x"A00A",x"0000",x"B60C",x"A00A",x"B434", -- 08E0-08EF
  x"B434",x"4441",x"A00A",x"4438",x"A00A",x"48AA",x"B300",x"A009",x"B300",x"B434",x"4286",x"B434",x"4286",x"B434",x"428D",x"B501", -- 08F0-08FF
  x"A00D",x"9FEA",x"B300",x"B200",x"4409",x"A003",x"FFBA",x"33F8",x"0006",x"4781",x"0007",x"43FB",x"444A",x"A009",x"4441",x"A009", -- 0900-090F
  x"4438",x"A009",x"442F",x"A009",x"4426",x"A009",x"441D",x"A009",x"4415",x"A009",x"4415",x"A00A",x"441D",x"A00A",x"4438",x"A00A", -- 0910-091F
  x"488A",x"4286",x"444A",x"A00A",x"4415",x"A00A",x"442F",x"A00A",x"429B",x"903B",x"0000",x"441D",x"A00A",x"4438",x"A00A",x"488A", -- 0920-092F
  x"0000",x"B434",x"B502",x"B501",x"441D",x"A00A",x"42A2",x"9009",x"4426",x"A00A",x"B501",x"A00A",x"B412",x"4286",x"4426",x"A009", -- 0930-093F
  x"8001",x"0000",x"B412",x"4438",x"A00A",x"42A2",x"9009",x"4441",x"A00A",x"B501",x"A00A",x"B412",x"4286",x"4441",x"A009",x"8001", -- 0940-094F
  x"0000",x"A001",x"444A",x"A00A",x"B501",x"4286",x"444A",x"A009",x"A009",x"B434",x"B434",x"4286",x"B603",x"4294",x"A00D",x"9FD1", -- 0950-095F
  x"B200",x"444A",x"A00A",x"A009",x"8063",x"B412",x"0001",x"4294",x"B412",x"0001",x"441D",x"A00A",x"4438",x"A00A",x"488A",x"0000", -- 0960-096F
  x"B434",x"B502",x"B501",x"441D",x"A00A",x"42A2",x"9009",x"4426",x"A00A",x"B501",x"A00A",x"B412",x"4286",x"4426",x"A009",x"8001", -- 0970-097F
  x"0000",x"B412",x"4438",x"A00A",x"42A2",x"900A",x"4441",x"A00A",x"B501",x"A00A",x"B412",x"4286",x"4441",x"A009",x"A00B",x"8001", -- 0980-098F
  x"FFFF",x"A001",x"444A",x"A00A",x"B501",x"4286",x"444A",x"A009",x"A009",x"B434",x"B434",x"4286",x"B603",x"4294",x"A00D",x"9FD0", -- 0990-099F
  x"B200",x"A00D",x"9025",x"B501",x"444A",x"A009",x"B434",x"A00B",x"B434",x"B434",x"0001",x"441D",x"A00A",x"4438",x"A00A",x"488A", -- 09A0-09AF
  x"0000",x"B434",x"0000",x"444A",x"A00A",x"A00A",x"A00B",x"A001",x"444A",x"A00A",x"B501",x"4286",x"444A",x"A009",x"A009",x"B434", -- 09B0-09BF
  x"B434",x"4286",x"B603",x"4294",x"A00D",x"9FEB",x"B200",x"B300",x"4409",x"A003",x"FF3C",x"33FF",x"0004",x"4116",x"A014",x"A003", -- 09C0-09CF
  x"FFFA",x"3404",x"0005",x"4781",x"0010",x"42E2",x"A014",x"42CF",x"428D",x"B501",x"A00D",x"9FF9",x"B200",x"A003",x"FFF2",x"340A", -- 09D0-09DF
  x"0005",x"4781",x"0000",x"B434",x"B434",x"49D4",x"A003",x"FFF7",x"3410",x"0004",x"4781",x"0007",x"43FB",x"444A",x"A009",x"4441", -- 09E0-09EF
  x"A009",x"4438",x"A009",x"442F",x"A009",x"4426",x"A009",x"441D",x"A009",x"4415",x"A009",x"441D",x"A00A",x"4438",x"A00A",x"42A2", -- 09F0-09FF
  x"900A",x"4415",x"A00A",x"441D",x"A00A",x"4426",x"A00A",x"0000",x"0000",x"0000",x"80D9",x"441D",x"A00A",x"0000",x"4426",x"A00A", -- 0A00-0A0F
  x"B502",x"A007",x"A00A",x"A00B",x"B502",x"444A",x"A00A",x"A007",x"A009",x"4286",x"B603",x"4294",x"A00D",x"9FF0",x"B200",x"444A", -- 0A10-0A1F
  x"A00A",x"441D",x"A00A",x"A007",x"4438",x"A00A",x"4294",x"4426",x"A009",x"FFFF",x"444A",x"A00A",x"441D",x"A00A",x"A007",x"A009", -- 0A20-0A2F
  x"0001",x"441D",x"42C4",x"441D",x"A00A",x"4438",x"A00A",x"4294",x"0000",x"4426",x"A00A",x"4438",x"A00A",x"A007",x"A00A",x"A00B", -- 0A30-0A3F
  x"4426",x"A00A",x"4438",x"A00A",x"A007",x"428D",x"A00A",x"A00B",x"4441",x"A00A",x"4438",x"A00A",x"A007",x"428D",x"A00A",x"49D4", -- 0A40-0A4F
  x"B412",x"B300",x"B501",x"4426",x"A00A",x"4438",x"A00A",x"A007",x"4286",x"A009",x"0000",x"4426",x"A00A",x"4441",x"A00A",x"4438", -- 0A50-0A5F
  x"A00A",x"48AA",x"B200",x"B412",x"B300",x"0000",x"4426",x"A00A",x"4438",x"A00A",x"A007",x"A00A",x"A001",x"4426",x"A00A",x"4438", -- 0A60-0A6F
  x"A00A",x"A007",x"A009",x"902B",x"0001",x"4438",x"A00A",x"0000",x"B434",x"B502",x"4426",x"A00A",x"B502",x"A007",x"A00A",x"B412", -- 0A70-0A7F
  x"4441",x"A00A",x"A007",x"A00A",x"A00B",x"A001",x"B412",x"42E2",x"B502",x"4426",x"A00A",x"A007",x"A009",x"42CF",x"B434",x"B434", -- 0A80-0A8F
  x"4286",x"B603",x"4294",x"A00D",x"9FE3",x"B200",x"FFFF",x"4426",x"A00A",x"4438",x"A00A",x"A007",x"4286",x"42C4",x"8FD4",x"FFFF", -- 0A90-0A9F
  x"4426",x"42C4",x"4286",x"B603",x"4294",x"A00D",x"9F92",x"B200",x"4438",x"A00A",x"0000",x"444A",x"A00A",x"B502",x"A007",x"A00A", -- 0AA0-0AAF
  x"A00B",x"B502",x"444A",x"A00A",x"A007",x"A009",x"4286",x"B603",x"4294",x"A00D",x"9FF0",x"B200",x"4438",x"A00A",x"444A",x"A00A", -- 0AB0-0ABF
  x"428D",x"A009",x"441D",x"A00A",x"4438",x"A00A",x"4294",x"444A",x"A00A",x"4438",x"A00A",x"A007",x"A009",x"4415",x"A00A",x"4438", -- 0AC0-0ACF
  x"A00A",x"444A",x"A00A",x"4415",x"A00A",x"442F",x"A00A",x"9001",x"A00B",x"441D",x"A00A",x"4438",x"A00A",x"4294",x"444A",x"A00A", -- 0AD0-0ADF
  x"4438",x"A00A",x"A007",x"4286",x"4409",x"A003",x"FF01",x"3415",x"0008",x"4069",x"2F21",x"FFFB",x"341E",x"0008",x"4069",x"2F22", -- 0AE0-0AEF
  x"FFFB",x"3427",x"0008",x"4069",x"2F23",x"FFFB",x"3430",x"000E",x"4069",x"2F24",x"FFFB",x"343F",x"000C",x"4069",x"2F25",x"FFFB", -- 0AF0-0AFF
  x"344C",x"0006",x"4069",x"2F26",x"FFFB",x"3453",x"0004",x"4069",x"2F27",x"FFFB",x"3458",x"0004",x"4781",x"B412",x"B603",x"A007", -- 0B00-0B0F
  x"428D",x"B502",x"A00D",x"A00B",x"B502",x"A00A",x"A00D",x"A008",x"9005",x"B412",x"428D",x"B412",x"428D",x"8FF3",x"B300",x"B412", -- 0B10-0B1F
  x"A003",x"FFE8",x"345D",x"0012",x"4781",x"428D",x"B412",x"B502",x"A009",x"0004",x"0000",x"4047",x"A00E",x"B412",x"9001",x"A000", -- 0B20-0B2F
  x"A003",x"FFF0",x"3470",x"000D",x"4781",x"B502",x"9015",x"B502",x"0001",x"429B",x"B502",x"A00A",x"000C",x"0000",x"4047",x"A008", -- 0B30-0B3F
  x"A00D",x"A008",x"9007",x"A00A",x"B412",x"B300",x"B412",x"9001",x"A000",x"8001",x"4B25",x"8003",x"B200",x"B300",x"0000",x"A003", -- 0B40-0B4F
  x"FFE1",x"347E",x"000C",x"4781",x"B501",x"A00A",x"B501",x"A00F",x"9003",x"A000",x"FFFF",x"8001",x"0000",x"B434",x"B434",x"B501", -- 0B50-0B5F
  x"0004",x"0000",x"4047",x"A008",x"900E",x"B412",x"B300",x"2F27",x"A00A",x"9002",x"FFFF",x"8001",x"3FFF",x"A008",x"B501",x"A00A", -- 0B60-0B6F
  x"B412",x"4286",x"8004",x"B502",x"A009",x"0001",x"B412",x"A003",x"FFD8",x"348B",x"000D",x"4781",x"B501",x"2F25",x"A00A",x"42A2", -- 0B70-0B7F
  x"A00B",x"9006",x"3499",x"0004",x"41EF",x"46C6",x"0369",x"43C2",x"2F23",x"A009",x"A003",x"FFED",x"349E",x"000B",x"4781",x"2F23", -- 0B80-0B8F
  x"A00A",x"B603",x"A009",x"4286",x"B603",x"A007",x"4B7C",x"B603",x"B412",x"0000",x"4867",x"B412",x"B300",x"A003",x"FFED",x"34AA", -- 0B90-0B9F
  x"0010",x"4781",x"2F22",x"A009",x"2F21",x"A009",x"2F21",x"4B54",x"B502",x"42E2",x"2F22",x"4B54",x"B502",x"42CF",x"A007",x"4286", -- 0BA0-0BAF
  x"4B8F",x"A003",x"FFEC",x"34BB",x"0001",x"4781",x"4BA2",x"490A",x"4B0D",x"4B35",x"A003",x"FFF7",x"34BD",x"0001",x"4781",x"A000", -- 0BB0-0BBF
  x"4BB6",x"A003",x"FFF9",x"34BF",x"0001",x"4781",x"4BA2",x"48C4",x"4B0D",x"4B35",x"A003",x"FFF7",x"34C1",x"0007",x"4773",x"2F11", -- 0BC0-0BCF
  x"A00A",x"0004",x"A007",x"46A7",x"A003",x"FFF6",x"34C9",x"0004",x"4781",x"B501",x"A00D",x"9002",x"0000",x"43C2",x"B501",x"2F21", -- 0BD0-0BDF
  x"A009",x"2F21",x"4B54",x"B434",x"B300",x"B502",x"A007",x"428D",x"A00A",x"B412",x"0001",x"42A9",x"9018",x"0001",x"B502",x"A00F", -- 0BE0-0BEF
  x"A00B",x"9007",x"B412",x"B501",x"A007",x"B412",x"B501",x"4BB6",x"8FF5",x"B412",x"B300",x"B501",x"2F26",x"A009",x"B434",x"B502", -- 0BF0-0BFF
  x"4BC6",x"B434",x"B434",x"4BC6",x"8004",x"B300",x"0001",x"2F26",x"A009",x"4BA2",x"49EB",x"4B0D",x"4B35",x"42E2",x"4B0D",x"4B35", -- 0C00-0C0F
  x"42CF",x"2F26",x"A00A",x"428D",x"9007",x"B412",x"2F26",x"A00A",x"4BD9",x"B412",x"B300",x"B412",x"A003",x"FFB8",x"34CE",x"0004", -- 0C10-0C1F
  x"4781",x"0000",x"42E2",x"4324",x"B501",x"9007",x"432E",x"431D",x"42CF",x"B300",x"FFFF",x"42E2",x"8001",x"B300",x"4324",x"B501", -- 0C20-0C2F
  x"42F7",x"A00E",x"9007",x"432E",x"431D",x"42CF",x"B300",x"FFFF",x"42E2",x"8001",x"B300",x"4324",x"B501",x"42F7",x"A00E",x"9003", -- 0C30-0C3F
  x"432E",x"431D",x"8001",x"B300",x"4324",x"432E",x"431D",x"B300",x"42CF",x"B300",x"A003",x"FFD2",x"34D3",x"0001",x"4781",x"2F21", -- 0C40-0C4F
  x"A009",x"2F21",x"4B54",x"B434",x"9003",x"34D5",x"0001",x"41F5",x"B502",x"A007",x"428D",x"B501",x"A00A",x"4C21",x"B412",x"428D", -- 0C50-0C5F
  x"B412",x"B502",x"9008",x"428D",x"B501",x"A00A",x"434C",x"B412",x"428D",x"B412",x"8FF6",x"B300",x"B300",x"0020",x"431D",x"A003", -- 0C60-0C6F
  x"FFDB",x"34D7",x"0002",x"4781",x"B412",x"4C4F",x"4C4F",x"A003",x"FFF8",x"34DA",x"000B",x"4069",x"2F28",x"FFFB",x"34E6",x"0009", -- 0C70-0C7F
  x"4069",x"2F29",x"FFFB",x"34F0",x"000D",x"4781",x"2F23",x"A00A",x"A003",x"FFF9",x"34FE",x"000D",x"4781",x"2F23",x"A009",x"A003", -- 0C80-0C8F
  x"FFF9",x"350C",x"000B",x"4781",x"2F29",x"A00A",x"2F28",x"A009",x"2F23",x"A00A",x"2F29",x"A009",x"A003",x"FFF3",x"3518",x"000A", -- 0C90-0C9F
  x"4781",x"0000",x"B502",x"A009",x"B501",x"A00A",x"B412",x"FFFF",x"B502",x"A009",x"8000",x"A00A",x"4286",x"A00E",x"A00D",x"A003", -- 0CA0-0CAF
  x"FFED",x"3523",x"0004",x"4781",x"0000",x"1C00",x"0007",x"0000",x"4047",x"4CA1",x"9005",x"B200",x"FFFF",x"0007",x"0000",x"4047", -- 0CB0-0CBF
  x"0006",x"0000",x"4047",x"4CA1",x"9005",x"B200",x"FFFF",x"0006",x"0000",x"4047",x"0004",x"0000",x"4047",x"4CA1",x"9005",x"B200", -- 0CC0-0CCF
  x"FFFF",x"0004",x"0000",x"4047",x"2000",x"0005",x"0FFF",x"4047",x"4CA1",x"9004",x"B300",x"0006",x"0000",x"4047",x"0006",x"0FFF", -- 0CD0-0CDF
  x"4047",x"4CA1",x"9004",x"B300",x"0007",x"0000",x"4047",x"0007",x"07FF",x"4047",x"4CA1",x"9004",x"B300",x"0007",x"0800",x"4047", -- 0CE0-0CEF
  x"2F25",x"A009",x"2F24",x"A009",x"2F27",x"A009",x"2F24",x"A00A",x"2F23",x"A009",x"4C94",x"4C94",x"A003",x"FFB3",x"3528",x"0003", -- 0CF0-0CFF
  x"4781",x"B501",x"2F21",x"A009",x"2F21",x"4B54",x"B501",x"2F21",x"4294",x"900E",x"2F23",x"A00A",x"4286",x"B412",x"B502",x"B60C", -- 0D00-0D0F
  x"B502",x"A007",x"4B7C",x"4851",x"4B25",x"B412",x"B300",x"8002",x"B200",x"B300",x"A003",x"FFE2",x"352C",x"0003",x"4781",x"B412", -- 0D10-0D1F
  x"4D01",x"B412",x"4D01",x"A003",x"FFF7",x"3530",x"0001",x"4781",x"4C86",x"B434",x"B434",x"4BB6",x"B412",x"4C8D",x"4D01",x"A003", -- 0D20-0D2F
  x"FFF4",x"3532",x"0001",x"4781",x"4C86",x"B434",x"B434",x"4BBF",x"B412",x"4C8D",x"4D01",x"A003",x"FFF4",x"3534",x"0001",x"4781", -- 0D30-0D3F
  x"4C86",x"B434",x"B434",x"4BC6",x"B412",x"4C8D",x"4D01",x"A003",x"FFF4",x"3536",x"0001",x"4781",x"4C86",x"B434",x"B434",x"4BD9", -- 0D40-0D4F
  x"B412",x"B300",x"B412",x"4C8D",x"4D01",x"A003",x"FFF2",x"3538",x"0003",x"4781",x"4C86",x"B434",x"B434",x"4BD9",x"B300",x"B412", -- 0D50-0D5F
  x"4C8D",x"4D01",x"A003",x"FFF3",x"353C",x"0003",x"4781",x"4C86",x"B434",x"B434",x"B501",x"9004",x"B412",x"B502",x"4D5A",x"8FFA", -- 0D60-0D6F
  x"B300",x"B412",x"4C8D",x"4D01",x"A003",x"FFEE",x"3540",x"0002",x"4781",x"4C86",x"B434",x"B434",x"B603",x"4D67",x"B434",x"B502", -- 0D70-0D7F
  x"4D4C",x"B434",x"B434",x"4D4C",x"B434",x"4C8D",x"4D1F",x"A003",x"FFED",x"3543",x"0007",x"4781",x"4C86",x"B434",x"B434",x"0007", -- 0D80-0D8F
  x"43FB",x"441D",x"A009",x"4415",x"A009",x"0000",x"441D",x"A00A",x"9063",x"B501",x"4426",x"A009",x"0001",x"4441",x"A009",x"FFFF", -- 0D90-0D9F
  x"444A",x"A009",x"4415",x"A00A",x"4426",x"A00A",x"A007",x"427A",x"002B",x"429B",x"9009",x"4426",x"A00A",x"4286",x"4426",x"A009", -- 0DA0-0DAF
  x"0000",x"444A",x"A009",x"8016",x"4415",x"A00A",x"4426",x"A00A",x"A007",x"427A",x"002D",x"429B",x"900D",x"4426",x"A00A",x"4286", -- 0DB0-0DBF
  x"4426",x"A009",x"0000",x"444A",x"A009",x"4441",x"A00A",x"A000",x"4441",x"A009",x"444A",x"A00A",x"9FD2",x"4426",x"A00A",x"441D", -- 0DC0-0DCF
  x"A00A",x"42A2",x"9029",x"4415",x"A00A",x"4426",x"A00A",x"A007",x"427A",x"B501",x"9015",x"453E",x"A00B",x"9007",x"B300",x"441D", -- 0DD0-0DDF
  x"A00A",x"A000",x"441D",x"A009",x"800A",x"B412",x"2F08",x"A00A",x"4D40",x"4D28",x"4426",x"A00A",x"4286",x"4426",x"A009",x"8005", -- 0DE0-0DEF
  x"B300",x"4426",x"A00A",x"441D",x"A009",x"4426",x"A00A",x"441D",x"A00A",x"42A2",x"A00B",x"9FD7",x"4441",x"A00A",x"A00F",x"9001", -- 0DF0-0DFF
  x"A000",x"4426",x"A00A",x"441D",x"A00A",x"4294",x"B501",x"9006",x"B300",x"4415",x"A00A",x"4426",x"A00A",x"A007",x"4409",x"B434", -- 0E00-0E0F
  x"4C8D",x"B412",x"4D01",x"B412",x"A003",x"FF73",x"354B",x"0002",x"0022",x"41D4",x"4D8C",x"B300",x"A003",x"FFF8",x"354E",x"0008", -- 0E10-0E1F
  x"4781",x"43E5",x"0020",x"45E4",x"465E",x"B501",x"9011",x"469E",x"B300",x"4286",x"41FB",x"B412",x"2F0F",x"A009",x"B501",x"46A7", -- 0E20-0E2F
  x"410E",x"4300",x"2F0F",x"A009",x"0001",x"2F10",x"A009",x"8003",x"B200",x"0003",x"43C2",x"A003",x"4D8C",x"A003",x"FFDF",x"3557", -- 0E30-0E3F
  x"0001",x"4781",x"4C86",x"B434",x"B434",x"0004",x"43FB",x"B501",x"A00F",x"9002",x"0012",x"43C2",x"0002",x"442F",x"A009",x"4426", -- 0E40-0E4F
  x"A009",x"441D",x"A009",x"0001",x"4426",x"A00A",x"442F",x"A00A",x"49E2",x"4426",x"A009",x"9003",x"441D",x"A00A",x"4D40",x"4426", -- 0E50-0E5F
  x"A00A",x"9008",x"441D",x"A00A",x"441D",x"A00A",x"4D40",x"441D",x"A009",x"8FEA",x"4409",x"B412",x"4C8D",x"4D01",x"A003",x"FFCF", -- 0E60-0E6F
  x"3559",x"0001",x"4781",x"2F08",x"A00A",x"0010",x"429B",x"9002",x"4C4F",x"802C",x"4C86",x"B412",x"B501",x"A00F",x"9004",x"A000", -- 0E70-0E7F
  x"355B",x"0001",x"41F5",x"B501",x"A00D",x"9005",x"355D",x"0002",x"41F5",x"B300",x"801A",x"FFFF",x"B412",x"B501",x"9004",x"2F08", -- 0E80-0E8F
  x"A00A",x"4BD9",x"8FFA",x"B300",x"B501",x"A00F",x"A00B",x"900A",x"0030",x"A007",x"B501",x"0039",x"42A9",x"9002",x"0007",x"A007", -- 0E90-0E9F
  x"431D",x"8FF2",x"0020",x"431D",x"B300",x"4C8D",x"A003",x"FFC8",x"3560",x"0002",x"4781",x"B412",x"4E73",x"4E73",x"A003",x"FFF8", -- 0EA0-0EAF
  x"3563",x"0006",x"4781",x"2F27",x"A00A",x"9002",x"FFFF",x"8001",x"3FFF",x"A008",x"B501",x"4286",x"B412",x"A00A",x"A003",x"FFF0", -- 0EB0-0EBF
  x"356A",x"0004",x"4781",x"4051",x"B501",x"0004",x"0000",x"4047",x"42A2",x"9003",x"B300",x"0000",x"800B",x"4EB3",x"B412",x"B300", -- 0EC0-0ECF
  x"0004",x"0000",x"4047",x"42A2",x"9002",x"0000",x"8001",x"FFFF",x"A003",x"FFE6",x"356F",x"0001",x"4781",x"B502",x"4EC3",x"9011", -- 0ED0-0EDF
  x"B412",x"4EB3",x"3FFF",x"A008",x"B434",x"B603",x"42A9",x"9005",x"B412",x"B300",x"A007",x"A00A",x"8003",x"B200",x"B300",x"0000", -- 0EE0-0EEF
  x"8003",x"9002",x"B300",x"0000",x"A003",x"FFE4",x"3571",x"0001",x"4781",x"B603",x"4EDD",x"A003",x"FFF9",x"3573",x"0001",x"4781", -- 0EF0-0EFF
  x"B501",x"42E2",x"B434",x"B434",x"B502",x"4EC3",x"A00D",x"B502",x"A00D",x"A008",x"42CF",x"4EC3",x"A00D",x"A008",x"9002",x"B200", -- 0F00-0F0F
  x"8072",x"B502",x"4EC3",x"A00D",x"9017",x"B501",x"4286",x"4B8F",x"B434",x"B502",x"A009",x"0004",x"0000",x"4047",x"B502",x"428D", -- 0F10-0F1F
  x"42C4",x"B501",x"42E2",x"A007",x"A009",x"42CF",x"428D",x"0004",x"0000",x"4047",x"A00E",x"8057",x"B502",x"4EB3",x"3FFF",x"A008", -- 0F20-0F2F
  x"B434",x"B603",x"42A9",x"9008",x"B412",x"B300",x"B434",x"42E2",x"A007",x"A009",x"42CF",x"801F",x"B501",x"4286",x"4B8F",x"B412", -- 0F30-0F3F
  x"42E2",x"B501",x"42E2",x"B412",x"4851",x"B300",x"42CF",x"0004",x"0000",x"4047",x"B502",x"428D",x"A00A",x"A00E",x"B502",x"428D", -- 0F40-0F4F
  x"A009",x"B412",x"B502",x"42CF",x"A007",x"A009",x"428D",x"0004",x"0000",x"4047",x"A00E",x"4EB3",x"3FFF",x"A008",x"B603",x"A007", -- 0F50-0F5F
  x"428D",x"A00A",x"A00D",x"B502",x"0001",x"42A9",x"A008",x"9002",x"428D",x"8FF4",x"B502",x"A00A",x"4EC3",x"A00D",x"B502",x"0001", -- 0F60-0F6F
  x"429B",x"A008",x"9003",x"B300",x"A00A",x"800D",x"B412",x"428D",x"B412",x"0004",x"0000",x"4047",x"A00E",x"B502",x"A009",x"0004", -- 0F70-0F7F
  x"0000",x"4047",x"A00E",x"A003",x"FF78",x"3575",x"0001",x"4781",x"B501",x"4EC3",x"9016",x"3577",x"0002",x"41F5",x"4EB3",x"3FFF", -- 0F80-0F8F
  x"A008",x"B502",x"A007",x"B412",x"B603",x"42A9",x"9005",x"B501",x"A00A",x"4F88",x"4286",x"8FF8",x"B200",x"357A",x"0002",x"41F5", -- 0F90-0F9F
  x"8001",x"4E73",x"A003",x"FFE1",x"357D",x"0002",x"4781",x"B412",x"4F88",x"4F88",x"A003",x"FFF8",x"3580",x"0006",x"4069",x"2F2A", -- 0FA0-0FAF
  x"FFFB",x"3587",x"0001",x"4781",x"2F2A",x"A00A",x"2801",x"A00A",x"2F2A",x"A009",x"A003",x"FFF5",x"3589",x"0001",x"4781",x"0000", -- 0FB0-0FBF
  x"2801",x"A00A",x"428D",x"2F2A",x"A00A",x"4294",x"900A",x"2801",x"A00A",x"0002",x"4294",x"2F2A",x"A00A",x"4294",x"B434",x"4F00", -- 0FC0-0FCF
  x"8FEF",x"B412",x"2F2A",x"A009",x"A003",x"FFE6",x"358B",x"0005",x"4781",x"B501",x"4EC3",x"9019",x"B501",x"42E2",x"4EB3",x"3FFF", -- 0FD0-0FDF
  x"A008",x"B412",x"B502",x"A007",x"428D",x"B412",x"B501",x"900A",x"B412",x"B501",x"A00A",x"4FD9",x"B502",x"A009",x"428D",x"B412", -- 0FE0-0FEF
  x"428D",x"8FF4",x"B200",x"42CF",x"8001",x"4D01",x"A003",x"FFDE",x"3591",x"0007",x"4781",x"B501",x"4EC3",x"9028",x"4EB3",x"3FFF", -- 0FF0-0FFF
  x"A008",x"B501",x"9021",x"B412",x"436D",x"B502",x"435E",x"B501",x"435E",x"B501",x"A00A",x"B501",x"435E",x"B501",x"4051",x"3FFF", -- 1000-100F
  x"42A9",x"A00B",x"9005",x"FFFF",x"435E",x"FFFF",x"435E",x"8005",x"B501",x"4051",x"4EB3",x"435E",x"435E",x"B501",x"4F88",x"4FFB", -- 1010-101F
  x"4286",x"B412",x"428D",x"8FDD",x"B200",x"8001",x"B300",x"A003",x"FFCF",x"3599",x"000F",x"4781",x"B501",x"4EC3",x"9028",x"2F23", -- 1020-102F
  x"A00A",x"0004",x"0000",x"4047",x"A00E",x"B412",x"4EB3",x"B501",x"2F23",x"A00A",x"A009",x"3FFF",x"A008",x"2F23",x"A00A",x"4286", -- 1030-103F
  x"B412",x"B603",x"A007",x"4B7C",x"B434",x"B434",x"B502",x"A00A",x"502C",x"B502",x"A009",x"B434",x"428D",x"B501",x"9005",x"B434", -- 1040-104F
  x"4286",x"B434",x"4286",x"8FF2",x"B200",x"B300",x"8001",x"4D01",x"A003",x"FFCF",x"35A9",x"0004",x"4781",x"B501",x"4EC3",x"9006", -- 1050-105F
  x"4EB3",x"B412",x"B300",x"3FFF",x"A008",x"8002",x"B300",x"0001",x"A003",x"FFF0",x"35AE",x"0005",x"4069",x"2F2B",x"FFFB",x"35B4", -- 1060-106F
  x"0005",x"4069",x"2F2C",x"FFFB",x"35BA",x"0005",x"4069",x"2F2D",x"FFFB",x"35C0",x"0007",x"4781",x"2F2C",x"A00A",x"900F",x"436D", -- 1070-107F
  x"436D",x"35C8",x"0008",x"41F5",x"2F23",x"4366",x"42E2",x"B60C",x"4FA7",x"B603",x"4FA7",x"42CF",x"B501",x"4F88",x"FFFF",x"2D04", -- 1080-108F
  x"A009",x"A003",x"FFE6",x"35D1",x"0007",x"4781",x"0000",x"2D04",x"A009",x"2F2C",x"A00A",x"900B",x"436D",x"436D",x"35D9",x"0008", -- 1090-109F
  x"41F5",x"2F23",x"4366",x"B502",x"4F88",x"B501",x"4F88",x"A003",x"FFEA",x"35E2",x"000C",x"4781",x"0008",x"43FB",x"4C86",x"4415", -- 10A0-10AF
  x"A009",x"507C",x"B502",x"505D",x"441D",x"A009",x"B501",x"505D",x"4426",x"A009",x"444A",x"A009",x"4441",x"A009",x"B412",x"4453", -- 10B0-10BF
  x"A009",x"441D",x"A00A",x"442F",x"A009",x"FFFF",x"442F",x"42C4",x"B502",x"442F",x"A00A",x"4EDD",x"4426",x"A00A",x"4438",x"A009", -- 10C0-10CF
  x"FFFF",x"4438",x"42C4",x"4C86",x"B434",x"B434",x"B412",x"B502",x"4438",x"A00A",x"4EDD",x"B502",x"4D40",x"4441",x"A00A",x"442F", -- 10D0-10DF
  x"A00A",x"4EDD",x"444A",x"A00A",x"4438",x"A00A",x"4EDD",x"4D40",x"4D34",x"4453",x"A00A",x"4D4C",x"B43C",x"B412",x"4C8D",x"B412", -- 10E0-10EF
  x"4D01",x"B412",x"4438",x"A00A",x"B434",x"4F00",x"4438",x"A00A",x"A00D",x"9FD6",x"B434",x"442F",x"A00A",x"B434",x"4F00",x"B412", -- 10F0-10FF
  x"442F",x"A00A",x"A00D",x"9FC1",x"4D01",x"4415",x"A00A",x"4C8D",x"B412",x"4FD9",x"B412",x"4D01",x"FFFF",x"2F2B",x"42C4",x"5096", -- 1100-110F
  x"4409",x"A003",x"FF96",x"35EF",x"000B",x"4781",x"0008",x"43FB",x"4C86",x"4415",x"A009",x"441D",x"A009",x"0001",x"0000",x"4426", -- 1110-111F
  x"A009",x"4453",x"A009",x"0000",x"4441",x"A009",x"0000",x"444A",x"A009",x"B501",x"4426",x"A00A",x"4EDD",x"4426",x"A00A",x"4EDD", -- 1120-112F
  x"441D",x"A00A",x"442F",x"A009",x"FFFF",x"442F",x"42C4",x"B502",x"442F",x"A00A",x"4EDD",x"4426",x"A00A",x"4EDD",x"4441",x"A00A", -- 1130-113F
  x"442F",x"A00A",x"B434",x"4F00",x"4441",x"A009",x"B502",x"4426",x"A00A",x"4EDD",x"442F",x"A00A",x"4EDD",x"444A",x"A00A",x"442F", -- 1140-114F
  x"A00A",x"B434",x"4F00",x"444A",x"A009",x"442F",x"A00A",x"A00D",x"9FDB",x"4441",x"A00A",x"4426",x"A00A",x"4EDD",x"4453",x"A00A", -- 1150-115F
  x"4D28",x"4441",x"A00A",x"4426",x"A00A",x"B434",x"4F00",x"4441",x"A009",x"444A",x"A00A",x"4426",x"A00A",x"4EDD",x"4453",x"A00A", -- 1160-116F
  x"4D34",x"444A",x"A00A",x"4426",x"A00A",x"B434",x"4F00",x"444A",x"A009",x"4453",x"A00A",x"B412",x"4441",x"A00A",x"444A",x"A00A", -- 1170-117F
  x"50AC",x"0001",x"4426",x"42C4",x"4426",x"A00A",x"441D",x"A00A",x"429B",x"9F97",x"4415",x"A00A",x"4C8D",x"B412",x"4FD9",x"B412", -- 1180-118F
  x"4D01",x"4409",x"A003",x"FF7F",x"35FB",x"0011",x"4781",x"0003",x"43FB",x"4415",x"A009",x"0000",x"4415",x"A00A",x"441D",x"A009", -- 1190-119F
  x"441D",x"A00A",x"B501",x"901F",x"428D",x"441D",x"A009",x"441D",x"A00A",x"4EF9",x"4415",x"A00A",x"4426",x"A009",x"4426",x"A00A", -- 11A0-11AF
  x"B501",x"900E",x"428D",x"4426",x"A009",x"4426",x"A00A",x"441D",x"A00A",x"4286",x"4426",x"A00A",x"4286",x"4E42",x"4F00",x"8FEE", -- 11B0-11BF
  x"B300",x"4F00",x"8FDD",x"B300",x"4409",x"A003",x"FFCD",x"360D",x"0005",x"4781",x"2F11",x"A00A",x"B501",x"4286",x"A00A",x"B502", -- 11C0-11CF
  x"0002",x"A007",x"A00A",x"433C",x"0020",x"431D",x"B501",x"A00A",x"9004",x"B501",x"A00A",x"A007",x"8FEF",x"B300",x"A003",x"FFE7", -- 11D0-11DF
  x"3613",x"0005",x"4781",x"2F11",x"A00A",x"B501",x"0004",x"A007",x"435E",x"B501",x"4286",x"A00A",x"B502",x"0002",x"A007",x"A00A", -- 11E0-11EF
  x"433C",x"0020",x"431D",x"B501",x"A00A",x"9004",x"B501",x"A00A",x"A007",x"8FEB",x"B300",x"A003",x"FFE3",x"3619",x"0006",x"4781", -- 11F0-11FF
  x"0020",x"45E4",x"465E",x"900E",x"2F0F",x"A009",x"41FB",x"B501",x"A00A",x"A007",x"2F11",x"A009",x"41FB",x"4286",x"A00A",x"2F13", -- 1200-120F
  x"A009",x"8004",x"B300",x"3620",x"000F",x"41F5",x"A003",x"FFE5",x"3630",x"000A",x"4781",x"436D",x"B501",x"0000",x"429B",x"9003", -- 1210-121F
  x"363B",x"0013",x"41F5",x"B501",x"0003",x"429B",x"9003",x"364F",x"0014",x"41F5",x"B501",x"0006",x"429B",x"9003",x"3664",x"0014", -- 1220-122F
  x"41F5",x"B501",x"0009",x"429B",x"9003",x"3679",x"0030",x"41F5",x"B501",x"0012",x"429B",x"9003",x"36AA",x"0012",x"41F5",x"B501", -- 1230-123F
  x"0369",x"429B",x"9003",x"36BD",x"0013",x"41F5",x"B501",x"1234",x"429B",x"9003",x"36D1",x"0034",x"41F5",x"A003",x"FFC9",x"3706", -- 1240-124F
  x"0005",x"4781",x"47A1",x"41FB",x"0003",x"4294",x"B501",x"435E",x"A00A",x"4286",x"B501",x"435E",x"A00A",x"B501",x"435E",x"0040", -- 1250-125F
  x"4294",x"41FB",x"B412",x"0007",x"A008",x"2F18",x"A007",x"A009",x"A003",x"FFE5",x"370C",x"0002",x"4781",x"0007",x"431D",x"370F", -- 1260-126F
  x"0008",x"41F5",x"A003",x"FFF6",x"3718",x"0002",x"4781",x"0007",x"431D",x"371B",x"0004",x"41F5",x"4713",x"A003",x"FFF5",x"3720", -- 1270-127F
  x"0002",x"4781",x"3723",x"0029",x"41F5",x"436D",x"3A00",x"0100",x"44D2",x"46C6",x"374D",x"0002",x"41F5",x"A003",x"FFF0",x"3750", -- 1280-128F
  x"0005",x"4781",x"2F09",x"A00A",x"0100",x"44D2",x"A003",x"FFF7",x"3756",x"0007",x"4773",x"003C",x"431D",x"375E",x"0004",x"41F5", -- 1290-129F
  x"436D",x"5292",x"3763",x"0007",x"41EF",x"462A",x"9FF9",x"003C",x"431D",x"376B",x"0003",x"41F5",x"A003",x"FFEA",x"376F",x"0003", -- 12A0-12AF
  x"4781",x"0010",x"2F08",x"A009",x"A003",x"FFF8",x"3773",x"0007",x"4781",x"000A",x"2F08",x"A009",x"A003",x"FFF8",x"377B",x"0001", -- 12B0-12BF
  x"4781",x"A00A",x"4F88",x"A003",x"FFF9",x"377D",x"0002",x"4781",x"B501",x"4286",x"A00A",x"B412",x"A00A",x"A003",x"FFF6",x"3780", -- 12C0-12CF
  x"0002",x"4781",x"B412",x"B502",x"A009",x"4286",x"A009",x"A003",x"FFF6",x"3783",x"0002",x"4781",x"52C8",x"4FA7",x"A003",x"FFF9", -- 12D0-12DF
  x"3786",x"0005",x"4069",x"2F2E",x"FFFB",x"378C",x"0006",x"4781",x"A000",x"2F2E",x"42C4",x"2F2E",x"A00A",x"4074",x"A003",x"FFF5", -- 12E0-12EF
  x"3793",x"0006",x"4069",x"2EE0",x"FFFB",x"379A",x"000D",x"4069",x"2F2F",x"FFFB",x"37A8",x"0006",x"4781",x"2EE0",x"2F2F",x"A00A", -- 12F0-12FF
  x"B502",x"42A9",x"900C",x"B501",x"A00A",x"436D",x"B501",x"435E",x"0003",x"4294",x"52C8",x"B412",x"433C",x"4286",x"8FEF",x"B300", -- 1300-130F
  x"A003",x"FFE8",x"37AF",x"0007",x"4069",x"2F30",x"FFFB",x"37B7",x"0008",x"4069",x"2F31",x"FFFB",x"37C0",x"0007",x"4069",x"2F32", -- 1310-131F
  x"FFFB",x"37C8",x"0004",x"4781",x"2F10",x"A00A",x"2F31",x"A009",x"0000",x"2F10",x"A009",x"2EE0",x"B501",x"2F2F",x"A00A",x"42A2", -- 1320-132F
  x"9007",x"B501",x"42E2",x"A00A",x"430B",x"42CF",x"4286",x"8FF4",x"B300",x"2F31",x"A00A",x"2F10",x"A009",x"A003",x"FFE2",x"37CD", -- 1330-133F
  x"0008",x"4781",x"0020",x"45E4",x"465E",x"469E",x"B300",x"4286",x"0000",x"2F30",x"A009",x"2EE0",x"2F2F",x"A00A",x"B502",x"42A9", -- 1340-134F
  x"9014",x"B603",x"A00A",x"429B",x"9006",x"0001",x"2F30",x"A009",x"FFFF",x"2F2F",x"42C4",x"2F30",x"A00A",x"9005",x"B501",x"4286", -- 1350-135F
  x"A00A",x"B502",x"A009",x"4286",x"8FE7",x"B300",x"2F30",x"A009",x"A003",x"FFD5",x"37D6",x"0009",x"4781",x"5342",x"2F30",x"A00A", -- 1360-136F
  x"2F2F",x"A00A",x"A009",x"0001",x"2F2F",x"42C4",x"A003",x"FFF2",x"37E0",x"0011",x"4069",x"2804",x"FFFB",x"37F2",x"0012",x"4069", -- 1370-137F
  x"2804",x"FFFB",x"3805",x"0010",x"4069",x"2805",x"FFFB",x"3816",x"0011",x"4069",x"2805",x"FFFB",x"3828",x"0010",x"4069",x"2806", -- 1380-138F
  x"FFFB",x"3839",x"0011",x"4069",x"2806",x"FFFB",x"384B",x"000F",x"4069",x"2807",x"FFFB",x"385B",x"0010",x"4069",x"2807",x"FFFB", -- 1390-139F
  x"386C",x"000C",x"4781",x"0007",x"0800",x"4047",x"A003",x"FFF8",x"3879",x"000B",x"4781",x"0007",x"0C00",x"4047",x"A003",x"FFF8", -- 13A0-13AF
  x"3885",x"000B",x"4781",x"0007",x"0800",x"4047",x"A003",x"FFF8",x"3891",x"000A",x"4781",x"0007",x"0C00",x"4047",x"A003",x"FFF8", -- 13B0-13BF
  x"389C",x"0005",x"4069",x"2F33",x"FFFB",x"38A2",x"0005",x"4069",x"2F34",x"FFFB",x"38A8",x"0005",x"4069",x"2F35",x"FFFB",x"38AE", -- 13C0-13CF
  x"0005",x"4069",x"2F36",x"FFFB",x"38B4",x"0002",x"4069",x"2F37",x"FFFB",x"38B7",x"0002",x"4069",x"2F38",x"FFFB",x"38BA",x"000A", -- 13D0-13DF
  x"4069",x"2F39",x"FFFB",x"38C5",x"0009",x"4069",x"2F3A",x"FFFB",x"38CF",x"000B",x"4069",x"2F3B",x"FFFB",x"38DB",x"000A",x"4069", -- 13E0-13EF
  x"2F3C",x"FFFB",x"38E6",x"0009",x"4781",x"0001",x"43FB",x"4415",x"A009",x"2F2D",x"A00A",x"9011",x"436D",x"003A",x"431D",x"4415", -- 13F0-13FF
  x"A00A",x"431D",x"0020",x"431D",x"4FA7",x"4415",x"A00A",x"431D",x"003A",x"431D",x"0020",x"431D",x"8001",x"B200",x"4409",x"A003", -- 1400-140F
  x"FFE1",x"38F0",x"000C",x"4781",x"2805",x"A00A",x"2F3B",x"A00A",x"4294",x"9007",x"2F2D",x"A00A",x"9004",x"436D",x"38FD",x"0007", -- 1410-141F
  x"41F5",x"2805",x"A00A",x"2F3B",x"A00A",x"4294",x"9001",x"8FF9",x"53A3",x"A009",x"B501",x"9008",x"B412",x"B502",x"53A3",x"0005", -- 1420-142F
  x"A007",x"B412",x"4851",x"8005",x"B412",x"53A3",x"0005",x"A007",x"A009",x"B501",x"53A3",x"0004",x"A007",x"A009",x"4C86",x"B434", -- 1430-143F
  x"B434",x"53A3",x"0006",x"A007",x"A007",x"2F23",x"A009",x"2F25",x"A00A",x"B412",x"2F27",x"A00A",x"9004",x"0007",x"0C00",x"4047", -- 1440-144F
  x"8001",x"2400",x"2F25",x"A009",x"502C",x"B412",x"2F25",x"A009",x"B412",x"4C8D",x"53A3",x"0003",x"A007",x"A009",x"B603",x"0072", -- 1450-145F
  x"53F5",x"53A3",x"0002",x"A007",x"A009",x"53A3",x"0001",x"A007",x"A009",x"2805",x"A00A",x"A00B",x"0001",x"A008",x"2F3B",x"A009", -- 1460-146F
  x"2805",x"A00A",x"A00B",x"2804",x"A009",x"A003",x"FF9A",x"3905",x"000C",x"4781",x"2807",x"A00A",x"2F3C",x"A00A",x"4294",x"9007", -- 1470-147F
  x"2F2D",x"A00A",x"9004",x"436D",x"3912",x"0007",x"41F5",x"2807",x"A00A",x"2F3C",x"A00A",x"4294",x"9001",x"8FF9",x"53AB",x"A009", -- 1480-148F
  x"B501",x"9008",x"B412",x"B502",x"53AB",x"0005",x"A007",x"B412",x"4851",x"8005",x"B412",x"53AB",x"0005",x"A007",x"A009",x"B501", -- 1490-149F
  x"53AB",x"0004",x"A007",x"A009",x"4C86",x"B434",x"B434",x"53AB",x"0006",x"A007",x"A007",x"2F23",x"A009",x"2F25",x"A00A",x"B412", -- 14A0-14AF
  x"2F27",x"A00A",x"9004",x"0008",x"0000",x"4047",x"8001",x"2800",x"2F25",x"A009",x"502C",x"B412",x"2F25",x"A009",x"B412",x"4C8D", -- 14B0-14BF
  x"53AB",x"0003",x"A007",x"A009",x"B603",x"0075",x"53F5",x"53AB",x"0002",x"A007",x"A009",x"53AB",x"0001",x"A007",x"A009",x"2807", -- 14C0-14CF
  x"A00A",x"A00B",x"0001",x"A008",x"2F3C",x"A009",x"2807",x"A00A",x"A00B",x"2806",x"A009",x"A003",x"FF9A",x"391A",x"000A",x"4781", -- 14D0-14DF
  x"0006",x"43FB",x"4441",x"A009",x"4438",x"A009",x"442F",x"A009",x"4426",x"A009",x"441D",x"A009",x"4415",x"A009",x"4415",x"A00A", -- 14E0-14EF
  x"441D",x"A00A",x"4426",x"A00A",x"442F",x"A00A",x"4438",x"A00A",x"4441",x"A00A",x"4415",x"A00A",x"441D",x"A00A",x"B502",x"902D", -- 14F0-14FF
  x"B200",x"547A",x"4441",x"A00A",x"0003",x"429B",x"441D",x"A00A",x"A00D",x"A00B",x"A008",x"900B",x"0000",x"441D",x"A00A",x"4426", -- 1500-150F
  x"A00A",x"442F",x"A00A",x"4438",x"A00A",x"0002",x"5414",x"4441",x"A00A",x"0003",x"429B",x"9010",x"4426",x"A00A",x"442F",x"A00A", -- 1510-151F
  x"4438",x"A00A",x"B501",x"9002",x"46C6",x"8006",x"B300",x"B501",x"9002",x"430B",x"8001",x"B300",x"802F",x"B501",x"901D",x"B200", -- 1520-152F
  x"5414",x"4441",x"A00A",x"0002",x"429B",x"4441",x"A00A",x"0003",x"429B",x"A00E",x"9010",x"4426",x"A00A",x"442F",x"A00A",x"4438", -- 1530-153F
  x"A00A",x"B501",x"9002",x"46C6",x"8006",x"B300",x"B501",x"9002",x"430B",x"8001",x"B300",x"8010",x"B200",x"B200",x"B43C",x"B200", -- 1540-154F
  x"4438",x"A00A",x"B501",x"9002",x"46C6",x"8006",x"B300",x"B501",x"9002",x"430B",x"8001",x"B300",x"4409",x"A003",x"FF7E",x"3925", -- 1550-155F
  x"0006",x"4781",x"2F2B",x"A00A",x"9002",x"5324",x"8FFB",x"A003",x"FFF6",x"392C",x"0007",x"4781",x"4CB4",x"2F2B",x"A00A",x"A00D", -- 1560-156F
  x"9003",x"FFFF",x"2F2B",x"A009",x"2F2D",x"A00A",x"9009",x"436D",x"3934",x"0003",x"41F5",x"B603",x"4FA7",x"3938",x"0003",x"41F5", -- 1570-157F
  x"B502",x"2F35",x"A00A",x"42A2",x"B502",x"2F36",x"A00A",x"42A2",x"A008",x"900C",x"FFFF",x"2F33",x"A009",x"FFFF",x"2F34",x"A009", -- 1580-158F
  x"FFFF",x"2F35",x"A009",x"FFFF",x"2F36",x"A009",x"B502",x"2F33",x"A00A",x"429B",x"A00B",x"2F35",x"A00A",x"FFFF",x"429B",x"A008", -- 1590-159F
  x"9027",x"2F33",x"A00A",x"FFFF",x"429B",x"9004",x"B502",x"2F33",x"A009",x"800A",x"B502",x"2F35",x"A009",x"2F35",x"A00A",x"2F33", -- 15A0-15AF
  x"A00A",x"4294",x"2F37",x"A009",x"2F2D",x"A00A",x"9009",x"436D",x"2F33",x"4366",x"2F34",x"4366",x"2F35",x"4366",x"2F36",x"4366", -- 15B0-15BF
  x"B502",x"4286",x"B502",x"0000",x"0000",x"0000",x"0000",x"547A",x"B501",x"2F34",x"A00A",x"429B",x"A00B",x"2F36",x"A00A",x"FFFF", -- 15C0-15CF
  x"429B",x"A008",x"9027",x"2F34",x"A00A",x"FFFF",x"429B",x"9004",x"B501",x"2F34",x"A009",x"800A",x"B501",x"2F36",x"A009",x"2F36", -- 15D0-15DF
  x"A00A",x"2F34",x"A00A",x"4294",x"2F38",x"A009",x"2F2D",x"A00A",x"9009",x"436D",x"2F33",x"4366",x"2F34",x"4366",x"2F35",x"4366", -- 15E0-15EF
  x"2F36",x"4366",x"B502",x"B502",x"4286",x"0000",x"0000",x"0000",x"0000",x"5414",x"B200",x"2F35",x"A00A",x"FFFF",x"429B",x"2F36", -- 15F0-15FF
  x"A00A",x"FFFF",x"429B",x"A00E",x"9002",x"5562",x"8003",x"0000",x"2F2B",x"A009",x"A003",x"FF5D",x"393C",x"0008",x"4781",x"0001", -- 1600-160F
  x"43FB",x"4415",x"A009",x"4415",x"A00A",x"0003",x"A007",x"A00A",x"4415",x"A00A",x"0005",x"A007",x"4415",x"A00A",x"0004",x"A007", -- 1610-161F
  x"A00A",x"A00D",x"9001",x"A00A",x"4415",x"A00A",x"0004",x"A007",x"A00A",x"4409",x"A003",x"FFE0",x"3945",x"0008",x"4781",x"0001", -- 1620-162F
  x"43FB",x"4415",x"A009",x"2F2D",x"A00A",x"901C",x"003A",x"431D",x"4415",x"A00A",x"431D",x"0020",x"431D",x"B434",x"B501",x"4F88", -- 1630-163F
  x"B434",x"B434",x"B501",x"9005",x"B603",x"433C",x"0020",x"431D",x"8002",x"B502",x"435E",x"4415",x"A00A",x"431D",x"003A",x"431D", -- 1640-164F
  x"0020",x"431D",x"4409",x"A003",x"FFD7",x"394E",x"0008",x"4781",x"B501",x"9002",x"46C6",x"8006",x"B300",x"B501",x"9002",x"430B", -- 1650-165F
  x"8001",x"B300",x"A003",x"FFF1",x"3957",x"0008",x"4781",x"2F39",x"A00A",x"2804",x"A00A",x"429B",x"A00B",x"9063",x"53B3",x"A00A", -- 1660-166F
  x"A00D",x"9010",x"53B3",x"4286",x"B501",x"A00A",x"B412",x"4286",x"A00A",x"2804",x"A00A",x"2F39",x"A009",x"2804",x"A00A",x"2805", -- 1670-167F
  x"A009",x"556C",x"53B3",x"A00A",x"0001",x"429B",x"53B3",x"A00A",x"0002",x"429B",x"A00E",x"9045",x"53B3",x"0002",x"A007",x"A00A", -- 1680-168F
  x"428D",x"9032",x"53B3",x"4286",x"A00A",x"53B3",x"0002",x"A007",x"A00A",x"428D",x"B603",x"006C",x"53F5",x"53B3",x"560F",x"53B3", -- 1690-169F
  x"A00A",x"2F36",x"A00A",x"0001",x"429B",x"900A",x"2804",x"A00A",x"2F39",x"A009",x"2804",x"A00A",x"2805",x"A009",x"5414",x"8013", -- 16A0-16AF
  x"5414",x"53B3",x"A00A",x"0002",x"429B",x"9005",x"53B3",x"560F",x"006D",x"562F",x"5658",x"2804",x"A00A",x"2F39",x"A009",x"2804", -- 16B0-16BF
  x"A00A",x"2805",x"A009",x"800D",x"53B3",x"560F",x"006E",x"562F",x"5658",x"2804",x"A00A",x"2F39",x"A009",x"2804",x"A00A",x"2805", -- 16C0-16CF
  x"A009",x"A003",x"FF91",x"3960",x"0008",x"4781",x"2F3A",x"A00A",x"2806",x"A00A",x"429B",x"A00B",x"90A2",x"53BB",x"A00A",x"A00D", -- 16D0-16DF
  x"9010",x"53BB",x"4286",x"B501",x"A00A",x"B412",x"4286",x"A00A",x"2806",x"A00A",x"2F3A",x"A009",x"2806",x"A00A",x"2807",x"A009", -- 16E0-16EF
  x"556C",x"53BB",x"A00A",x"0001",x"429B",x"53BB",x"A00A",x"0003",x"429B",x"A00E",x"9084",x"53BB",x"4286",x"A00A",x"428D",x"9044", -- 16F0-16FF
  x"53BB",x"4286",x"A00A",x"428D",x"53BB",x"0002",x"A007",x"A00A",x"B603",x"006F",x"53F5",x"53BB",x"560F",x"53BB",x"A00A",x"2F35", -- 1700-170F
  x"A00A",x"0001",x"429B",x"900A",x"2806",x"A00A",x"2F3A",x"A009",x"2806",x"A00A",x"2807",x"A009",x"547A",x"8025",x"547A",x"53BB", -- 1710-171F
  x"A00A",x"0003",x"429B",x"9017",x"53BB",x"0002",x"A007",x"A00A",x"900D",x"0000",x"53BB",x"0002",x"A007",x"A00A",x"53BB",x"560F", -- 1720-172F
  x"B434",x"502C",x"B434",x"B434",x"0002",x"5414",x"53BB",x"560F",x"004D",x"562F",x"5658",x"2806",x"A00A",x"2F3A",x"A009",x"2806", -- 1730-173F
  x"A00A",x"2807",x"A009",x"803B",x"53BB",x"0002",x"A007",x"A00A",x"9029",x"53BB",x"4286",x"A00A",x"428D",x"53BB",x"0002",x"A007", -- 1740-174F
  x"A00A",x"B603",x"004F",x"53F5",x"53BB",x"560F",x"B434",x"502C",x"B434",x"B434",x"53BB",x"A00A",x"0003",x"429B",x"9008",x"0002", -- 1750-175F
  x"5414",x"53BB",x"560F",x"004B",x"562F",x"5658",x"8002",x"0001",x"5414",x"2806",x"A00A",x"2F3A",x"A009",x"2806",x"A00A",x"2807", -- 1760-176F
  x"A009",x"800D",x"53BB",x"560F",x"004E",x"562F",x"5658",x"2806",x"A00A",x"2F3A",x"A009",x"2806",x"A00A",x"2807",x"A009",x"A003", -- 1770-177F
  x"FF52",x"3969",x"0001",x"4069",x"2F3D",x"FFFB",x"396B",x"0002",x"4069",x"2F3E",x"FFFB",x"396E",x"0002",x"4069",x"2F3F",x"FFFB", -- 1780-178F
  x"3971",x"0004",x"4069",x"2F40",x"FFFB",x"3976",x"0004",x"4069",x"2F41",x"FFFB",x"397B",x"0006",x"4069",x"2F42",x"FFFB",x"3982", -- 1790-179F
  x"0002",x"4781",x"49E2",x"B412",x"B300",x"A003",x"FFF8",x"3985",x"0005",x"4781",x"2F40",x"A009",x"A003",x"FFF9",x"398B",x"0005", -- 17A0-17AF
  x"4781",x"2F41",x"A009",x"A003",x"FFF9",x"3991",x"0004",x"4781",x"0003",x"43FB",x"B502",x"505D",x"441D",x"A009",x"4426",x"A009", -- 17B0-17BF
  x"4415",x"A009",x"0000",x"441D",x"A00A",x"428D",x"B501",x"441D",x"A009",x"4415",x"A00A",x"B502",x"4EDD",x"4426",x"A00A",x"4EDD", -- 17C0-17CF
  x"4F00",x"441D",x"A00A",x"B501",x"A00D",x"9FEF",x"B300",x"4409",x"A003",x"FFDB",x"3996",x"0005",x"4069",x"2F43",x"FFFB",x"399C", -- 17D0-17DF
  x"0006",x"4069",x"2F44",x"FFFB",x"39A3",x"0004",x"4069",x"2F45",x"FFFB",x"39A8",x"0005",x"4069",x"2F46",x"FFFB",x"39AE",x"0004", -- 17E0-17EF
  x"4781",x"2F44",x"A00A",x"B501",x"0000",x"4EDD",x"B412",x"0001",x"4EDD",x"2F46",x"A00A",x"50AC",x"B412",x"502C",x"B412",x"4D01", -- 17F0-17FF
  x"4CB4",x"B412",x"502C",x"B412",x"4D01",x"A003",x"FFE7",x"39B3",x"0008",x"4781",x"502C",x"2F44",x"A009",x"FFFF",x"2F43",x"A009", -- 1800-180F
  x"2F43",x"A00A",x"2F45",x"A00A",x"A008",x"900D",x"57F1",x"0000",x"2F43",x"A009",x"0000",x"2F45",x"A009",x"0000",x"2F44",x"A009", -- 1810-181F
  x"0000",x"2F46",x"A009",x"A003",x"FFE2",x"39BC",x"0007",x"4781",x"502C",x"2F46",x"A009",x"FFFF",x"2F45",x"A009",x"2F43",x"A00A", -- 1820-182F
  x"2F45",x"A00A",x"A008",x"900D",x"57F1",x"0000",x"2F43",x"A009",x"0000",x"2F45",x"A009",x"0000",x"2F44",x"A009",x"0000",x"2F46", -- 1830-183F
  x"A009",x"A003",x"B501",x"2F0E",x"A009",x"4CB4",x"2F33",x"A00A",x"2F34",x"A00A",x"A00E",x"901F",x"2F33",x"A00A",x"9007",x"2F37", -- 1840-184F
  x"A00A",x"428D",x"2F33",x"A00A",x"4D34",x"8001",x"0000",x"2F34",x"A00A",x"9007",x"2F38",x"A00A",x"428D",x"2F34",x"A00A",x"4D34", -- 1850-185F
  x"8001",x"0000",x"2F0E",x"A00A",x"39C4",x"0012",x"41EF",x"0003",x"54E0",x"8FFF",x"801A",x"0000",x"2F10",x"A009",x"436D",x"2F0A", -- 1860-186F
  x"A00A",x"2F0C",x"A00A",x"2F0A",x"A00A",x"4294",x"428D",x"433C",x"39D7",x"0003",x"41F5",x"39DB",x"000A",x"41EF",x"46C6",x"436D", -- 1870-187F
  x"39E6",x"0016",x"41F5",x"435E",x"8FFF",x"A003",x"FF9E",x"39FD",x"0004",x"4781",x"2F2D",x"A00A",x"9008",x"3A02",x"0005",x"41F5", -- 1880-188F
  x"B603",x"4FA7",x"2F44",x"A00A",x"4F88",x"B502",x"2F40",x"A00A",x"4EDD",x"502C",x"2F2D",x"A00A",x"9002",x"B501",x"4F88",x"2F37", -- 1890-189F
  x"A00A",x"428D",x"0000",x"B434",x"2F33",x"A00A",x"2F34",x"A00A",x"429B",x"9008",x"502C",x"2F41",x"A00A",x"4EF9",x"2F42",x"A00A", -- 18A0-18AF
  x"4D34",x"4F00",x"2F2D",x"A00A",x"9002",x"B501",x"4F88",x"1828",x"0000",x"0003",x"54E0",x"A003",x"FFCA",x"3A08",x"0005",x"4781", -- 18B0-18BF
  x"0005",x"43FB",x"2F2D",x"A00A",x"9005",x"3A0E",x"0006",x"41F5",x"B501",x"4F88",x"2F41",x"A00A",x"B60C",x"B300",x"B412",x"57B8", -- 18C0-18CF
  x"2F2D",x"A00A",x"9002",x"B501",x"4F88",x"0000",x"2F38",x"A00A",x"428D",x"B434",x"2F33",x"A00A",x"2F34",x"A00A",x"429B",x"9008", -- 18D0-18DF
  x"502C",x"2F40",x"A00A",x"4EF9",x"2F42",x"A00A",x"4D28",x"4F00",x"180A",x"2F2D",x"A00A",x"9002",x"B502",x"4F88",x"4438",x"A009", -- 18E0-18EF
  x"442F",x"A009",x"4426",x"A009",x"441D",x"A009",x"4415",x"A009",x"441D",x"A00A",x"4426",x"A00A",x"4FB4",x"4415",x"A00A",x"442F", -- 18F0-18FF
  x"A00A",x"4FBF",x"4438",x"A00A",x"0000",x"0002",x"54E0",x"2F33",x"A00A",x"2F34",x"A00A",x"429B",x"900A",x"0000",x"2F38",x"A00A", -- 1900-190F
  x"428D",x"0000",x"3A15",x"000A",x"41EF",x"0002",x"54E0",x"4409",x"A003",x"FFA3",x"3A20",x"0004",x"4781",x"2F2D",x"A00A",x"9003", -- 1910-191F
  x"3A25",x"0005",x"41F5",x"B501",x"2F2B",x"A009",x"2F3E",x"A009",x"B501",x"2F42",x"A009",x"2F3D",x"A00A",x"2F3E",x"A00A",x"4294", -- 1920-192F
  x"2F3F",x"A009",x"0000",x"2F38",x"A00A",x"428D",x"2F3F",x"A00A",x"2F37",x"A00A",x"57A2",x"17AA",x"0000",x"0002",x"54E0",x"2F37", -- 1930-193F
  x"A00A",x"428D",x"0000",x"2F3F",x"A00A",x"2F38",x"A00A",x"57A2",x"17B1",x"0000",x"0003",x"54E0",x"B502",x"2F40",x"A00A",x"4EDD", -- 1940-194F
  x"2F41",x"A00A",x"4EDD",x"2F2D",x"A00A",x"9002",x"B501",x"4F88",x"2F37",x"A00A",x"428D",x"0000",x"B434",x"18C0",x"0000",x"0003", -- 1950-195F
  x"54E0",x"2F3E",x"A00A",x"428D",x"9009",x"0001",x"0001",x"2F3D",x"A00A",x"3A2B",x"0004",x"41EF",x"0001",x"54E0",x"2F3E",x"A00A", -- 1960-196F
  x"428D",x"900A",x"0001",x"0001",x"2F3E",x"A00A",x"428D",x"3A30",x"0005",x"41EF",x"0001",x"54E0",x"A003",x"FF9C",x"3A36",x"0009", -- 1970-197F
  x"4781",x"0007",x"43FB",x"441D",x"A009",x"4415",x"A009",x"2F37",x"A00A",x"428D",x"2F38",x"A00A",x"428D",x"0000",x"3A40",x"0009", -- 1980-198F
  x"41EF",x"0003",x"54E0",x"0000",x"4426",x"A009",x"0000",x"4438",x"A009",x"4415",x"A00A",x"4438",x"A00A",x"4EDD",x"444A",x"A009", -- 1990-199F
  x"0000",x"442F",x"A009",x"0000",x"4441",x"A009",x"4426",x"A00A",x"442F",x"A00A",x"444A",x"A00A",x"4441",x"A00A",x"4EDD",x"0D01", -- 19A0-19AF
  x"0000",x"0001",x"54E0",x"0001",x"442F",x"42C4",x"442F",x"A00A",x"2F38",x"A00A",x"429B",x"9003",x"0000",x"442F",x"A009",x"0001", -- 19B0-19BF
  x"4441",x"42C4",x"4441",x"A00A",x"2F3D",x"A00A",x"429B",x"9FDE",x"0001",x"4426",x"42C4",x"4426",x"A00A",x"2F37",x"A00A",x"429B", -- 19C0-19CF
  x"900F",x"0000",x"4426",x"A009",x"2F37",x"A00A",x"428D",x"2F38",x"A00A",x"428D",x"0000",x"3A4A",x"0009",x"41EF",x"0003",x"54E0", -- 19D0-19DF
  x"0001",x"4438",x"42C4",x"4438",x"A00A",x"2F3D",x"A00A",x"429B",x"9FB0",x"2F37",x"A00A",x"428D",x"2F38",x"A00A",x"428D",x"0000", -- 19E0-19EF
  x"3A54",x"0009",x"41EF",x"0003",x"54E0",x"2F37",x"A00A",x"428D",x"2F38",x"A00A",x"428D",x"441D",x"A00A",x"0000",x"0000",x"0003", -- 19F0-19FF
  x"54E0",x"4409",x"A003",x"FF7A",x"3A5E",x"0012",x"4781",x"2F3D",x"A00A",x"591D",x"5562",x"A003",x"FFF7",x"3A71",x"0005",x"4781", -- 1A00-1A0F
  x"2F2D",x"A00A",x"9003",x"3A77",x"0006",x"41F5",x"0001",x"2F2B",x"A009",x"0001",x"2F3E",x"A009",x"2F42",x"A009",x"0000",x"2F38", -- 1A10-1A1F
  x"A00A",x"428D",x"0000",x"17AA",x"0000",x"0002",x"54E0",x"2F37",x"A00A",x"428D",x"0000",x"0000",x"17B1",x"0000",x"0003",x"54E0", -- 1A20-1A2F
  x"B502",x"2F40",x"A00A",x"4EDD",x"2F41",x"A00A",x"4EDD",x"B501",x"4F88",x"2F42",x"A00A",x"4D40",x"B502",x"4D28",x"B501",x"4F88", -- 1A30-1A3F
  x"0000",x"2F42",x"A009",x"2F37",x"A00A",x"428D",x"0000",x"B434",x"18C0",x"0000",x"0003",x"54E0",x"5562",x"A003",x"FFBE",x"3A7E", -- 1A40-1A4F
  x"0007",x"4781",x"0000",x"2F2B",x"A009",x"A003",x"FFF8",x"3A86",x"000F",x"4781",x"0001",x"43FB",x"4415",x"A009",x"B502",x"4415", -- 1A50-1A5F
  x"A00A",x"0000",x"4EDD",x"4EDD",x"4415",x"A00A",x"0001",x"4EDD",x"4EDD",x"2F33",x"A00A",x"9006",x"2F37",x"A00A",x"2F33",x"A00A", -- 1A60-1A6F
  x"4D34",x"8001",x"0000",x"2F34",x"A00A",x"9006",x"2F38",x"A00A",x"2F34",x"A00A",x"4D34",x"8001",x"0000",x"B434",x"1A52",x"0000", -- 1A70-1A7F
  x"0001",x"54E0",x"4409",x"A003",x"FFD2",x"3A96",x"0007",x"4781",x"0004",x"43FB",x"441D",x"A009",x"4415",x"A009",x"4415",x"A00A", -- 1A80-1A8F
  x"2F37",x"A00A",x"49E2",x"4426",x"A009",x"441D",x"A00A",x"2F38",x"A00A",x"49E2",x"442F",x"A009",x"0001",x"2F2B",x"A009",x"4FB4", -- 1A90-1A9F
  x"4426",x"A00A",x"442F",x"A00A",x"4FBF",x"1A5A",x"0000",x"0001",x"54E0",x"5562",x"4409",x"A003",x"FFD8",x"3A9E",x"0019",x"4781", -- 1AA0-1AAF
  x"2F37",x"A00A",x"428D",x"2F38",x"A00A",x"428D",x"0000",x"0CB4",x"0000",x"0003",x"54E0",x"A003",x"FFF0",x"3AB8",x"000B",x"4781", -- 1AB0-1ABF
  x"2F37",x"A00A",x"428D",x"2F38",x"A00A",x"428D",x"B434",x"0000",x"0000",x"0003",x"54E0",x"A003",x"FFF0",x"3AC4",x"0004",x"4781", -- 1AC0-1ACF
  x"0003",x"43FB",x"4426",x"A009",x"441D",x"A009",x"4415",x"A009",x"441D",x"A00A",x"4EF9",x"4426",x"A00A",x"4415",x"A00A",x"4D01", -- 1AD0-1ADF
  x"4F00",x"4F00",x"4409",x"A003",x"FFE8",x"3AC9",x"0007",x"4781",x"0007",x"43FB",x"4426",x"A009",x"441D",x"A009",x"4415",x"A009", -- 1AE0-1AEF
  x"441D",x"A00A",x"2F37",x"A00A",x"49E2",x"4441",x"A009",x"442F",x"A009",x"4426",x"A00A",x"2F38",x"A00A",x"49E2",x"444A",x"A009", -- 1AF0-1AFF
  x"4438",x"A009",x"442F",x"A00A",x"4438",x"A00A",x"4415",x"A00A",x"0000",x"0000",x"0001",x"54E0",x"442F",x"A00A",x"4438",x"A00A", -- 1B00-1B0F
  x"4441",x"A00A",x"0000",x"0000",x"0001",x"54E0",x"442F",x"A00A",x"4438",x"A00A",x"444A",x"A00A",x"1AD0",x"0000",x"0001",x"54E0", -- 1B10-1B1F
  x"4409",x"A003",x"FFC2",x"3AD1",x"0022",x"4781",x"0003",x"43FB",x"2F3D",x"A009",x"2F3D",x"A00A",x"441D",x"A009",x"441D",x"A00A", -- 1B20-1B2F
  x"B501",x"9028",x"428D",x"441D",x"A009",x"2F3D",x"A00A",x"4426",x"A009",x"4426",x"A00A",x"B501",x"901B",x"428D",x"4426",x"A009", -- 1B30-1B3F
  x"441D",x"A00A",x"4286",x"4426",x"A00A",x"4286",x"4E42",x"2F2D",x"A00A",x"9008",x"436D",x"441D",x"A00A",x"4426",x"A00A",x"4FA7", -- 1B40-1B4F
  x"B501",x"4F88",x"441D",x"A00A",x"4426",x"A00A",x"5AE8",x"8FE1",x"B300",x"8FD4",x"B300",x"4409",x"A003",x"0000",x"0000",x"0000", -- 1B50-1B5F
</DUMPZ></ok>
BZEIG @ BANF @ -1 DUMPZ  ( generiert byteRAM für P20_FFP.vhd Step_12 <ok>
<DUMPZ>
  x"28",x"20",x"7B",x"20",x"7D",x"20",x"43",x"4F",x"4D",x"50",x"49",x"4C",x"45",x"20",x"4D",x"4C", -- 3000-300F
  x"49",x"54",x"20",x"41",x"42",x"53",x"20",x"4C",x"49",x"54",x"2C",x"20",x"28",x"43",x"4F",x"4E", -- 3010-301F
  x"53",x"54",x"41",x"4E",x"54",x"3A",x"29",x"20",x"43",x"4F",x"4E",x"53",x"54",x"41",x"4E",x"54", -- 3020-302F
  x"20",x"4B",x"45",x"59",x"41",x"44",x"52",x"20",x"53",x"50",x"20",x"52",x"50",x"20",x"50",x"43", -- 3030-303F
  x"20",x"58",x"42",x"49",x"54",x"20",x"53",x"4D",x"55",x"44",x"47",x"45",x"42",x"49",x"54",x"20", -- 3040-304F
  x"52",x"50",x"30",x"20",x"49",x"52",x"41",x"4D",x"41",x"44",x"52",x"20",x"4A",x"52",x"41",x"4D", -- 3050-305F
  x"41",x"44",x"52",x"20",x"58",x"4F",x"46",x"46",x"20",x"43",x"52",x"42",x"5A",x"45",x"49",x"47", -- 3060-306F
  x"20",x"43",x"52",x"44",x"50",x"20",x"42",x"41",x"53",x"45",x"20",x"54",x"49",x"42",x"20",x"49", -- 3070-307F
  x"4E",x"31",x"20",x"49",x"4E",x"32",x"20",x"49",x"4E",x"33",x"20",x"49",x"4E",x"34",x"20",x"45", -- 3080-308F
  x"52",x"52",x"4F",x"52",x"4E",x"52",x"20",x"44",x"50",x"20",x"53",x"54",x"41",x"54",x"20",x"4C", -- 3090-309F
  x"46",x"41",x"20",x"42",x"41",x"4E",x"46",x"20",x"42",x"5A",x"45",x"49",x"47",x"20",x"44",x"50", -- 30A0-30AF
  x"4D",x"45",x"52",x"4B",x"20",x"43",x"53",x"50",x"20",x"44",x"55",x"42",x"49",x"54",x"20",x"4C", -- 30B0-30BF
  x"4F",x"43",x"41",x"4C",x"41",x"44",x"52",x"45",x"53",x"53",x"45",x"20",x"56",x"45",x"52",x"53", -- 30C0-30CF
  x"49",x"4F",x"4E",x"20",x"52",x"45",x"54",x"55",x"52",x"4E",x"20",x"28",x"4D",x"43",x"4F",x"44", -- 30D0-30DF
  x"45",x"3A",x"29",x"20",x"4D",x"43",x"4F",x"44",x"45",x"20",x"4D",x"49",x"4E",x"55",x"53",x"20", -- 30E0-30EF
  x"55",x"2B",x"20",x"55",x"2A",x"20",x"30",x"3D",x"20",x"30",x"4C",x"54",x"20",x"45",x"4D",x"49", -- 30F0-30FF
  x"54",x"43",x"4F",x"44",x"45",x"20",x"4E",x"4F",x"54",x"20",x"41",x"4E",x"44",x"20",x"4F",x"52", -- 3100-310F
  x"20",x"4D",x"2B",x"20",x"21",x"20",x"40",x"20",x"53",x"57",x"41",x"50",x"20",x"4F",x"56",x"45", -- 3110-311F
  x"52",x"20",x"44",x"55",x"50",x"20",x"52",x"4F",x"54",x"20",x"44",x"52",x"4F",x"50",x"20",x"32", -- 3120-312F
  x"53",x"57",x"41",x"50",x"20",x"32",x"4F",x"56",x"45",x"52",x"20",x"32",x"44",x"55",x"50",x"20", -- 3130-313F
  x"32",x"44",x"52",x"4F",x"50",x"20",x"4E",x"4F",x"4F",x"50",x"20",x"42",x"2C",x"20",x"5A",x"2C", -- 3140-314F
  x"20",x"28",x"57",x"4F",x"52",x"44",x"3A",x"29",x"20",x"57",x"4F",x"52",x"44",x"3A",x"20",x"22", -- 3150-315F
  x"20",x"2E",x"22",x"20",x"48",x"45",x"52",x"45",x"20",x"4A",x"52",x"42",x"49",x"54",x"20",x"4A", -- 3160-316F
  x"52",x"30",x"42",x"49",x"54",x"20",x"58",x"53",x"45",x"54",x"42",x"54",x"20",x"41",x"4C",x"4C", -- 3170-317F
  x"4F",x"54",x"20",x"42",x"52",x"41",x"4E",x"43",x"48",x"2C",x"20",x"30",x"42",x"52",x"41",x"4E", -- 3180-318F
  x"43",x"48",x"2C",x"20",x"42",x"45",x"47",x"49",x"4E",x"20",x"41",x"47",x"41",x"49",x"4E",x"20", -- 3190-319F
  x"55",x"4E",x"54",x"49",x"4C",x"20",x"49",x"46",x"20",x"45",x"4E",x"44",x"5F",x"49",x"46",x"20", -- 31A0-31AF
  x"45",x"4C",x"53",x"45",x"20",x"57",x"48",x"49",x"4C",x"45",x"20",x"52",x"45",x"50",x"45",x"41", -- 31B0-31BF
  x"54",x"20",x"43",x"40",x"20",x"43",x"21",x"20",x"31",x"2B",x"20",x"31",x"2D",x"20",x"4D",x"2D", -- 31C0-31CF
  x"20",x"3D",x"20",x"4C",x"54",x"20",x"3E",x"20",x"4D",x"2A",x"20",x"42",x"59",x"45",x"20",x"42", -- 31D0-31DF
  x"59",x"45",x"20",x"20",x"2B",x"21",x"20",x"52",x"3E",x"20",x"3E",x"52",x"20",x"52",x"20",x"2C", -- 31E0-31EF
  x"20",x"45",x"58",x"45",x"43",x"55",x"54",x"45",x"20",x"4B",x"45",x"59",x"20",x"45",x"4D",x"49", -- 31F0-31FF
  x"54",x"20",x"53",x"48",x"4C",x"31",x"36",x"20",x"44",x"49",x"47",x"20",x"54",x"59",x"50",x"45", -- 3200-320F
  x"20",x"48",x"47",x"2E",x"20",x"4D",x"2E",x"20",x"4D",x"3F",x"20",x"43",x"52",x"20",x"66",x"6C", -- 3210-321F
  x"3E",x"20",x"2F",x"66",x"6C",x"3E",x"20",x"66",x"72",x"3E",x"20",x"2F",x"66",x"72",x"3E",x"20", -- 3220-322F
  x"46",x"45",x"48",x"4C",x"45",x"52",x"54",x"45",x"58",x"54",x"20",x"44",x"49",x"53",x"41",x"42", -- 3230-323F
  x"4C",x"45",x"20",x"77",x"65",x"69",x"74",x"65",x"72",x"20",x"6E",x"61",x"63",x"68",x"20",x"54", -- 3240-324F
  x"61",x"73",x"74",x"65",x"20",x"45",x"53",x"43",x"41",x"50",x"45",x"20",x"20",x"45",x"52",x"52", -- 3250-325F
  x"4F",x"52",x"20",x"3F",x"3F",x"3F",x"20",x"46",x"45",x"48",x"4C",x"45",x"52",x"54",x"45",x"58", -- 3260-326F
  x"54",x"20",x"45",x"52",x"52",x"4F",x"52",x"20",x"2D",x"20",x"46",x"65",x"68",x"6C",x"65",x"72", -- 3270-327F
  x"20",x"4E",x"75",x"6D",x"6D",x"65",x"72",x"20",x"20",x"43",x"53",x"50",x"21",x"20",x"43",x"53", -- 3280-328F
  x"50",x"3F",x"20",x"4C",x"4F",x"43",x"41",x"4C",x"20",x"45",x"4E",x"44",x"5F",x"4C",x"4F",x"43", -- 3290-329F
  x"41",x"4C",x"20",x"4C",x"30",x"20",x"4C",x"31",x"20",x"4C",x"32",x"20",x"4C",x"33",x"20",x"4C", -- 32A0-32AF
  x"34",x"20",x"4C",x"35",x"20",x"4C",x"36",x"20",x"4C",x"37",x"20",x"27",x"20",x"49",x"4E",x"43", -- 32B0-32BF
  x"52",x"34",x"20",x"4B",x"45",x"59",x"5F",x"49",x"4E",x"54",x"20",x"4B",x"45",x"59",x"43",x"4F", -- 32C0-32CF
  x"44",x"45",x"32",x"20",x"45",x"58",x"50",x"45",x"43",x"54",x"20",x"44",x"49",x"47",x"49",x"54", -- 32D0-32DF
  x"20",x"4E",x"55",x"4D",x"42",x"45",x"52",x"20",x"57",x"4F",x"52",x"44",x"20",x"5A",x"3D",x"20", -- 32E0-32EF
  x"46",x"49",x"4E",x"44",x"20",x"4C",x"43",x"46",x"41",x"20",x"43",x"4F",x"4D",x"50",x"49",x"4C", -- 32F0-32FF
  x"45",x"2C",x"20",x"43",x"52",x"45",x"41",x"54",x"45",x"20",x"49",x"4E",x"54",x"45",x"52",x"50", -- 3300-330F
  x"52",x"45",x"54",x"20",x"51",x"55",x"49",x"54",x"20",x"2F",x"6F",x"6B",x"3E",x"20",x"6F",x"6B", -- 3310-331F
  x"20",x"6F",x"6B",x"3E",x"20",x"2F",x"6F",x"6B",x"3E",x"20",x"6F",x"6B",x"20",x"53",x"54",x"41", -- 3320-332F
  x"52",x"54",x"20",x"46",x"4F",x"52",x"54",x"59",x"2D",x"46",x"4F",x"52",x"54",x"48",x"20",x"53", -- 3330-333F
  x"4D",x"55",x"44",x"47",x"45",x"20",x"28",x"49",x"4D",x"4D",x"45",x"44",x"49",x"41",x"54",x"45", -- 3340-334F
  x"3A",x"29",x"20",x"28",x"43",x"4F",x"4D",x"50",x"49",x"4C",x"45",x"3A",x"29",x"20",x"28",x"3A", -- 3350-335F
  x"29",x"20",x"49",x"4D",x"4D",x"45",x"44",x"49",x"41",x"54",x"45",x"3A",x"20",x"43",x"4F",x"4D", -- 3360-336F
  x"50",x"49",x"4C",x"45",x"3A",x"20",x"3A",x"20",x"3B",x"20",x"4C",x"47",x"2E",x"20",x"4E",x"47", -- 3370-337F
  x"2E",x"20",x"78",x"20",x"2C",x"20",x"44",x"55",x"4D",x"50",x"5A",x"20",x"27",x"20",x"53",x"54", -- 3380-338F
  x"41",x"52",x"54",x"20",x"20",x"44",x"55",x"4D",x"50",x"5A",x"3E",x"20",x"20",x"20",x"20",x"20", -- 3390-339F
  x"2D",x"2D",x"20",x"20",x"2D",x"20",x"2F",x"44",x"55",x"4D",x"50",x"5A",x"3E",x"20",x"52",x"41", -- 33A0-33AF
  x"4D",x"50",x"31",x"20",x"56",x"41",x"52",x"49",x"41",x"42",x"4C",x"45",x"20",x"4D",x"4F",x"56", -- 33B0-33BF
  x"45",x"20",x"46",x"49",x"4C",x"4C",x"20",x"44",x"55",x"4D",x"50",x"20",x"4D",x"41",x"58",x"20", -- 33C0-33CF
  x"4D",x"49",x"4E",x"20",x"4D",x"55",x"4C",x"54",x"5F",x"49",x"20",x"4D",x"55",x"4C",x"54",x"5F", -- 33D0-33DF
  x"49",x"49",x"20",x"53",x"55",x"50",x"45",x"52",x"4D",x"55",x"4C",x"54",x"20",x"41",x"20",x"42", -- 33E0-33EF
  x"20",x"43",x"20",x"53",x"4D",x"55",x"4C",x"20",x"41",x"44",x"44",x"49",x"45",x"52",x"20",x"44", -- 33F0-33FF
  x"49",x"33",x"32",x"20",x"44",x"49",x"56",x"33",x"32",x"20",x"4D",x"2F",x"4D",x"4F",x"44",x"20", -- 3400-340F
  x"53",x"44",x"49",x"56",x"20",x"4F",x"50",x"45",x"52",x"41",x"4E",x"44",x"31",x"20",x"4F",x"50", -- 3410-341F
  x"45",x"52",x"41",x"4E",x"44",x"32",x"20",x"45",x"52",x"47",x"45",x"42",x"4E",x"49",x"53",x"20", -- 3420-342F
  x"5A",x"41",x"48",x"4C",x"45",x"4E",x"53",x"50",x"45",x"49",x"43",x"48",x"45",x"52",x"20",x"53", -- 3430-343F
  x"50",x"45",x"49",x"43",x"48",x"45",x"52",x"45",x"4E",x"44",x"45",x"20",x"53",x"43",x"48",x"49", -- 3440-344F
  x"45",x"42",x"20",x"55",x"42",x"49",x"54",x"20",x"54",x"52",x"49",x"4D",x"20",x"53",x"4C",x"58", -- 3450-345F
  x"2D",x"3E",x"45",x"52",x"47",x"45",x"42",x"4E",x"49",x"53",x"5F",x"4B",x"55",x"52",x"5A",x"20", -- 3460-346F
  x"53",x"4C",x"58",x"2D",x"3E",x"45",x"52",x"47",x"45",x"42",x"4E",x"49",x"53",x"20",x"4F",x"50", -- 3470-347F
  x"45",x"52",x"41",x"4E",x"44",x"2D",x"3E",x"53",x"4C",x"58",x"20",x"45",x"52",x"47",x"45",x"42", -- 3480-348F
  x"4E",x"49",x"53",x"5F",x"4E",x"45",x"55",x"21",x"20",x"49",x"4E",x"49",x"54",x"20",x"53",x"50", -- 3490-349F
  x"45",x"49",x"43",x"48",x"45",x"52",x"48",x"4F",x"4C",x"20",x"32",x"4F",x"50",x"45",x"52",x"41", -- 34A0-34AF
  x"4E",x"44",x"45",x"4E",x"2D",x"3E",x"32",x"53",x"4C",x"58",x"20",x"2B",x"20",x"2D",x"20",x"2A", -- 34B0-34BF
  x"20",x"52",x"45",x"43",x"55",x"52",x"53",x"45",x"20",x"2F",x"4D",x"4F",x"44",x"20",x"48",x"47", -- 34C0-34CF
  x"30",x"2E",x"20",x"2E",x"20",x"2D",x"20",x"42",x"2E",x"20",x"42",x"4C",x"4F",x"43",x"4B",x"41", -- 34D0-34DF
  x"4E",x"46",x"41",x"4E",x"47",x"20",x"42",x"4C",x"4F",x"43",x"4B",x"45",x"4E",x"44",x"45",x"20", -- 34E0-34EF
  x"4E",x"45",x"42",x"45",x"4E",x"52",x"45",x"43",x"48",x"4E",x"55",x"4E",x"47",x"20",x"48",x"41", -- 34F0-34FF
  x"55",x"50",x"54",x"52",x"45",x"43",x"48",x"4E",x"55",x"4E",x"47",x"20",x"52",x"45",x"43",x"48", -- 3500-350F
  x"45",x"4E",x"42",x"4C",x"4F",x"43",x"4B",x"20",x"53",x"50",x"45",x"49",x"43",x"48",x"45",x"52", -- 3510-351F
  x"44",x"41",x"20",x"49",x"4E",x"49",x"54",x"20",x"41",x"2B",x"30",x"20",x"42",x"2B",x"30",x"20", -- 3520-352F
  x"2B",x"20",x"2D",x"20",x"2A",x"20",x"2F",x"20",x"4D",x"4F",x"44",x"20",x"47",x"47",x"54",x"20", -- 3530-353F
  x"42",x"4B",x"20",x"4E",x"4E",x"55",x"4D",x"42",x"45",x"52",x"20",x"4E",x"22",x"20",x"52",x"45", -- 3540-354F
  x"50",x"4C",x"41",x"43",x"45",x"3A",x"20",x"5E",x"20",x"2E",x"20",x"2D",x"20",x"30",x"20",x"20", -- 3550-355F
  x"42",x"2E",x"20",x"5A",x"45",x"52",x"4C",x"45",x"47",x"20",x"4F",x"42",x"4A",x"3F",x"20",x"4C", -- 3560-356F
  x"20",x"47",x"20",x"48",x"20",x"2E",x"20",x"5B",x"20",x"20",x"5D",x"20",x"20",x"42",x"2E",x"20", -- 3570-357F
  x"53",x"50",x"4D",x"45",x"52",x"4B",x"20",x"5B",x"20",x"5D",x"20",x"4F",x"42",x"4A",x"2B",x"30", -- 3580-358F
  x"20",x"4F",x"42",x"4A",x"44",x"55",x"4D",x"50",x"20",x"4F",x"42",x"4A",x"5F",x"53",x"54",x"52", -- 3590-359F
  x"55",x"43",x"54",x"5F",x"43",x"4F",x"50",x"59",x"20",x"53",x"49",x"5A",x"45",x"20",x"41",x"4D", -- 35A0-35AF
  x"45",x"52",x"4B",x"20",x"41",x"43",x"42",x"49",x"54",x"20",x"41",x"44",x"42",x"49",x"54",x"20", -- 35B0-35BF
  x"41",x"44",x"45",x"42",x"55",x"47",x"31",x"20",x"41",x"44",x"45",x"42",x"55",x"47",x"31",x"20", -- 35C0-35CF
  x"20",x"41",x"44",x"45",x"42",x"55",x"47",x"32",x"20",x"41",x"44",x"45",x"42",x"55",x"47",x"32", -- 35D0-35DF
  x"20",x"20",x"5B",x"41",x"2A",x"78",x"2D",x"59",x"2A",x"5A",x"5D",x"2F",x"67",x"78",x"20",x"49", -- 35E0-35EF
  x"4E",x"56",x"45",x"52",x"54",x"49",x"45",x"52",x"45",x"4E",x"20",x"56",x"41",x"4E",x"44",x"45", -- 35F0-35FF
  x"52",x"4D",x"4F",x"4E",x"44",x"45",x"4D",x"41",x"54",x"52",x"49",x"58",x"20",x"56",x"4C",x"49", -- 3600-360F
  x"53",x"54",x"20",x"57",x"4C",x"49",x"53",x"54",x"20",x"46",x"4F",x"52",x"47",x"45",x"54",x"20", -- 3610-361F
  x"6E",x"69",x"63",x"68",x"74",x"20",x"67",x"65",x"66",x"75",x"6E",x"64",x"65",x"6E",x"20",x"20", -- 3620-362F
  x"46",x"45",x"48",x"4C",x"45",x"52",x"54",x"45",x"58",x"54",x"20",x"44",x"69",x"76",x"69",x"73", -- 3630-363F
  x"69",x"6F",x"6E",x"20",x"64",x"75",x"72",x"63",x"68",x"20",x"4E",x"75",x"6C",x"6C",x"20",x"57", -- 3640-364F
  x"6F",x"72",x"74",x"20",x"6E",x"69",x"63",x"68",x"74",x"20",x"64",x"65",x"66",x"69",x"6E",x"69", -- 3650-365F
  x"65",x"72",x"74",x"20",x"45",x"69",x"6E",x"67",x"61",x"62",x"65",x"7A",x"65",x"69",x"6C",x"65", -- 3660-366F
  x"20",x"7A",x"75",x"20",x"6C",x"61",x"6E",x"67",x"20",x"53",x"74",x"72",x"75",x"6B",x"74",x"75", -- 3670-367F
  x"72",x"66",x"65",x"68",x"6C",x"65",x"72",x"20",x"69",x"6E",x"20",x"49",x"46",x"20",x"45",x"4E", -- 3680-368F
  x"44",x"5F",x"49",x"46",x"20",x"42",x"45",x"47",x"49",x"4E",x"20",x"55",x"4E",x"54",x"49",x"4C", -- 3690-369F
  x"20",x"44",x"4F",x"20",x"4C",x"4F",x"4F",x"50",x"20",x"20",x"6E",x"65",x"67",x"61",x"74",x"69", -- 36A0-36AF
  x"76",x"65",x"72",x"20",x"45",x"78",x"70",x"6F",x"6E",x"65",x"6E",x"74",x"20",x"5A",x"61",x"68", -- 36B0-36BF
  x"6C",x"65",x"6E",x"73",x"70",x"65",x"69",x"63",x"68",x"65",x"72",x"20",x"76",x"6F",x"6C",x"6C", -- 36C0-36CF
  x"20",x"67",x"72",x"6F",x"C3",x"9F",x"65",x"20",x"67",x"61",x"6E",x"7A",x"65",x"20",x"5A",x"61", -- 36D0-36DF
  x"68",x"6C",x"65",x"6E",x"20",x"6B",x"6F",x"6D",x"70",x"69",x"6C",x"69",x"65",x"72",x"65",x"6E", -- 36E0-36EF
  x"20",x"67",x"65",x"68",x"74",x"20",x"6D",x"6F",x"6D",x"65",x"6E",x"74",x"61",x"6E",x"20",x"6E", -- 36F0-36FF
  x"69",x"63",x"68",x"74",x"2E",x"20",x"53",x"54",x"52",x"47",x"3A",x"20",x"5E",x"47",x"20",x"2F", -- 3700-370F
  x"31",x"78",x"50",x"49",x"45",x"50",x"2F",x"20",x"5E",x"46",x"20",x"51",x"55",x"49",x"54",x"20", -- 3710-371F
  x"5E",x"41",x"20",x"41",x"6E",x"67",x"65",x"68",x"61",x"6C",x"74",x"65",x"6E",x"20",x"66",x"C3", -- 3720-372F
  x"BC",x"72",x"20",x"67",x"65",x"6E",x"61",x"75",x"20",x"65",x"69",x"6E",x"65",x"20",x"45",x"69", -- 3730-373F
  x"6E",x"67",x"61",x"62",x"65",x"7A",x"65",x"69",x"6C",x"65",x"3A",x"20",x"20",x"6F",x"6B",x"20", -- 3740-374F
  x"51",x"55",x"45",x"52",x"59",x"20",x"28",x"2A",x"52",x"45",x"4D",x"2A",x"29",x"20",x"2F",x"6F", -- 3750-375F
  x"6B",x"3E",x"20",x"28",x"2A",x"45",x"4E",x"44",x"2A",x"29",x"20",x"6F",x"6B",x"3E",x"20",x"48", -- 3760-376F
  x"45",x"58",x"20",x"44",x"45",x"43",x"49",x"4D",x"41",x"4C",x"20",x"3F",x"20",x"32",x"40",x"20", -- 3770-377F
  x"32",x"21",x"20",x"32",x"3F",x"20",x"52",x"41",x"4D",x"50",x"33",x"20",x"52",x"41",x"4D",x"42", -- 3780-378F
  x"55",x"46",x"20",x"54",x"4C",x"49",x"53",x"54",x"45",x"20",x"54",x"4C",x"49",x"53",x"54",x"45", -- 3790-379F
  x"4E",x"5A",x"45",x"49",x"47",x"45",x"52",x"20",x"54",x"4C",x"49",x"53",x"54",x"59",x"20",x"52", -- 37A0-37AF
  x"45",x"4D",x"4F",x"50",x"46",x"41",x"20",x"53",x"54",x"41",x"54",x"4D",x"45",x"52",x"4B",x"20", -- 37B0-37BF
  x"45",x"58",x"58",x"49",x"55",x"48",x"52",x"20",x"45",x"58",x"58",x"49",x"20",x"45",x"4E",x"54", -- 37C0-37CF
  x"46",x"45",x"52",x"4E",x"45",x"20",x"42",x"45",x"46",x"45",x"53",x"54",x"49",x"47",x"45",x"20", -- 37D0-37DF
  x"4C",x"49",x"4E",x"4B",x"53",x"2D",x"41",x"42",x"47",x"45",x"53",x"43",x"48",x"49",x"43",x"4B", -- 37E0-37EF
  x"54",x"20",x"52",x"45",x"43",x"48",x"54",x"53",x"2D",x"41",x"42",x"47",x"45",x"53",x"43",x"48", -- 37F0-37FF
  x"49",x"43",x"4B",x"54",x"20",x"4C",x"49",x"4E",x"4B",x"53",x"2D",x"41",x"4E",x"47",x"45",x"4B", -- 3800-380F
  x"4F",x"4D",x"4D",x"45",x"4E",x"20",x"52",x"45",x"43",x"48",x"54",x"53",x"2D",x"41",x"4E",x"47", -- 3810-381F
  x"45",x"4B",x"4F",x"4D",x"4D",x"45",x"4E",x"20",x"4F",x"42",x"45",x"4E",x"2D",x"41",x"42",x"47", -- 3820-382F
  x"45",x"53",x"43",x"48",x"49",x"43",x"4B",x"54",x"20",x"55",x"4E",x"54",x"45",x"4E",x"2D",x"41", -- 3830-383F
  x"42",x"47",x"45",x"53",x"43",x"48",x"49",x"43",x"4B",x"54",x"20",x"4F",x"42",x"45",x"4E",x"2D", -- 3840-384F
  x"41",x"4E",x"47",x"45",x"4B",x"4F",x"4D",x"4D",x"45",x"4E",x"20",x"55",x"4E",x"54",x"45",x"4E", -- 3850-385F
  x"2D",x"41",x"4E",x"47",x"45",x"4B",x"4F",x"4D",x"4D",x"45",x"4E",x"20",x"52",x"45",x"43",x"48", -- 3860-386F
  x"54",x"53",x"2D",x"42",x"59",x"54",x"45",x"53",x"20",x"55",x"4E",x"54",x"45",x"4E",x"2D",x"42", -- 3870-387F
  x"59",x"54",x"45",x"53",x"20",x"4C",x"49",x"4E",x"4B",x"53",x"2D",x"42",x"59",x"54",x"45",x"53", -- 3880-388F
  x"20",x"4F",x"42",x"45",x"4E",x"2D",x"42",x"59",x"54",x"45",x"53",x"20",x"49",x"41",x"4D",x"31", -- 3890-389F
  x"4A",x"20",x"49",x"41",x"4D",x"31",x"4B",x"20",x"49",x"41",x"4D",x"32",x"4A",x"20",x"49",x"41", -- 38A0-38AF
  x"4D",x"32",x"4B",x"20",x"4E",x"4A",x"20",x"4E",x"4B",x"20",x"4C",x"49",x"4E",x"4B",x"53",x"2D", -- 38B0-38BF
  x"4D",x"45",x"52",x"4B",x"20",x"4F",x"42",x"45",x"4E",x"2D",x"4D",x"45",x"52",x"4B",x"20",x"52", -- 38C0-38CF
  x"45",x"43",x"48",x"54",x"53",x"2D",x"4D",x"45",x"52",x"4B",x"20",x"55",x"4E",x"54",x"45",x"4E", -- 38D0-38DF
  x"2D",x"4D",x"45",x"52",x"4B",x"20",x"4A",x"4B",x"5F",x"41",x"55",x"53",x"47",x"45",x"42",x"20", -- 38E0-38EF
  x"52",x"2D",x"41",x"42",x"53",x"43",x"48",x"49",x"43",x"4B",x"45",x"4E",x"20",x"72",x"5F",x"77", -- 38F0-38FF
  x"61",x"72",x"74",x"20",x"20",x"55",x"2D",x"41",x"42",x"53",x"43",x"48",x"49",x"43",x"4B",x"45", -- 3900-390F
  x"4E",x"20",x"75",x"5F",x"77",x"61",x"72",x"74",x"20",x"20",x"41",x"42",x"53",x"43",x"48",x"49", -- 3910-391F
  x"43",x"4B",x"45",x"4E",x"20",x"41",x"42",x"57",x"41",x"52",x"54",x"20",x"4A",x"4B",x"2D",x"50", -- 3920-392F
  x"52",x"4F",x"43",x"20",x"3A",x"4B",x"20",x"20",x"4B",x"3A",x"20",x"20",x"42",x"5F",x"41",x"55", -- 3930-393F
  x"53",x"4C",x"45",x"53",x"20",x"42",x"5F",x"41",x"55",x"53",x"47",x"45",x"42",x"20",x"42",x"5F", -- 3940-394F
  x"49",x"4E",x"54",x"45",x"52",x"50",x"20",x"4C",x"2D",x"41",x"55",x"53",x"4C",x"45",x"53",x"20", -- 3950-395F
  x"4F",x"2D",x"41",x"55",x"53",x"4C",x"45",x"53",x"20",x"4E",x"20",x"4E",x"4E",x"20",x"4E",x"49", -- 3960-396F
  x"20",x"4A",x"4C",x"4F",x"43",x"20",x"4B",x"4C",x"4F",x"43",x"20",x"47",x"58",x"4D",x"45",x"52", -- 3970-397F
  x"4B",x"20",x"4D",x"2F",x"20",x"4A",x"4C",x"4F",x"43",x"21",x"20",x"4B",x"4C",x"4F",x"43",x"21", -- 3980-398F
  x"20",x"59",x"43",x"4F",x"4C",x"20",x"58",x"59",x"42",x"49",x"54",x"20",x"58",x"59",x"4D",x"45", -- 3990-399F
  x"52",x"4B",x"20",x"5A",x"42",x"49",x"54",x"20",x"5A",x"4D",x"45",x"52",x"4B",x"20",x"41",x"58", -- 39A0-39AF
  x"59",x"5A",x"20",x"58",x"59",x"53",x"50",x"45",x"49",x"43",x"48",x"20",x"5A",x"53",x"50",x"45", -- 39B0-39BF
  x"49",x"43",x"48",x"20",x"4D",x"2E",x"20",x"42",x"41",x"4E",x"46",x"20",x"40",x"20",x"34",x"30", -- 39C0-39CF
  x"20",x"54",x"59",x"50",x"45",x"20",x"20",x"3F",x"3F",x"3F",x"20",x"46",x"45",x"48",x"4C",x"45", -- 39D0-39DF
  x"52",x"54",x"45",x"58",x"54",x"20",x"45",x"52",x"52",x"4F",x"52",x"20",x"2D",x"20",x"46",x"65", -- 39E0-39EF
  x"68",x"6C",x"65",x"72",x"20",x"4E",x"75",x"6D",x"6D",x"65",x"72",x"20",x"20",x"5A",x"4C",x"4F", -- 39F0-39FF
  x"53",x"20",x"5A",x"4C",x"4F",x"53",x"20",x"20",x"58",x"59",x"4C",x"4F",x"53",x"20",x"58",x"59", -- 3A00-3A0F
  x"4C",x"4F",x"53",x"20",x"20",x"44",x"52",x"4F",x"50",x"20",x"5A",x"4C",x"4F",x"53",x"20",x"20", -- 3A10-3A1F
  x"47",x"49",x"4E",x"56",x"20",x"47",x"49",x"4E",x"56",x"20",x"20",x"4E",x"20",x"21",x"20",x"20", -- 3A20-3A2F
  x"47",x"49",x"4E",x"56",x"20",x"20",x"6B",x"6C",x"4D",x"61",x"74",x"41",x"75",x"66",x"74",x"20", -- 3A30-3A3F
  x"44",x"52",x"4F",x"50",x"20",x"5B",x"20",x"5B",x"20",x"20",x"44",x"52",x"4F",x"50",x"20",x"5D", -- 3A40-3A4F
  x"20",x"5B",x"20",x"20",x"44",x"52",x"4F",x"50",x"20",x"5D",x"20",x"5D",x"20",x"20",x"49",x"4E", -- 3A50-3A5F
  x"56",x"45",x"52",x"54",x"49",x"45",x"52",x"45",x"5F",x"53",x"43",x"48",x"4E",x"45",x"4C",x"4C", -- 3A60-3A6F
  x"20",x"61",x"30",x"30",x"2B",x"64",x"20",x"61",x"30",x"30",x"2B",x"64",x"20",x"20",x"30",x"41", -- 3A70-3A7F
  x"4D",x"45",x"52",x"4B",x"21",x"20",x"5A",x"55",x"52",x"55",x"45",x"43",x"4B",x"53",x"43",x"48", -- 3A80-3A8F
  x"49",x"43",x"4B",x"45",x"4E",x"20",x"42",x"28",x"6A",x"2C",x"6B",x"29",x"40",x"20",x"41",x"55", -- 3A90-3A9F
  x"53",x"47",x"41",x"4E",x"47",x"53",x"4D",x"41",x"54",x"52",x"49",x"58",x"5F",x"4E",x"55",x"4C", -- 3AA0-3AAF
  x"4C",x"53",x"45",x"54",x"5A",x"45",x"4E",x"20",x"48",x"41",x"55",x"50",x"54",x"4E",x"45",x"4E", -- 3AB0-3ABF
  x"4E",x"45",x"52",x"20",x"41",x"6A",x"6B",x"21",x"20",x"41",x"28",x"6A",x"2C",x"6B",x"29",x"21", -- 3AC0-3ACF
  x"20",x"56",x"41",x"4E",x"44",x"45",x"52",x"4D",x"4F",x"4E",x"44",x"45",x"4D",x"41",x"54",x"52", -- 3AD0-3ADF
  x"49",x"58",x"5F",x"47",x"4C",x"45",x"49",x"43",x"48",x"5F",x"41",x"55",x"46",x"54",x"45",x"49", -- 3AE0-3AEF
  x"4C",x"45",x"4E",x"20",x"00",x"00",x"00",x"00",x"00",x"00",x"00",x"00",x"00",x"00",x"00",x"00", -- 3AF0-3AFF
</DUMPZ></ok>
3000 2C00 0 DUMPZ        ( generiert stapR   für P20_FFP.vhd Step_12 <ok>
<DUMPZ>
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2C00-2C0F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2C10-2C1F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2C20-2C2F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2C30-2C3F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2C40-2C4F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2C50-2C5F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2C60-2C6F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2C70-2C7F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2C80-2C8F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2C90-2C9F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2CA0-2CAF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2CB0-2CBF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2CC0-2CCF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2CD0-2CDF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2CE0-2CEF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2CF0-2CFF
  x"0000",x"0000",x"0000",x"0000",x"0055",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2D00-2D0F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2D10-2D1F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2D20-2D2F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2D30-2D3F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2D40-2D4F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2D50-2D5F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2D60-2D6F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2D70-2D7F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2D80-2D8F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2D90-2D9F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2DA0-2DAF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2DB0-2DBF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2DC0-2DCF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2DD0-2DDF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2DE0-2DEF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2DF0-2DFF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2E00-2E0F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2E10-2E1F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2E20-2E2F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2E30-2E3F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2E40-2E4F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2E50-2E5F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2E60-2E6F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2E70-2E7F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2E80-2E8F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2E90-2E9F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2EA0-2EAF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2EB0-2EBF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2EC0-2ECF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2ED0-2EDF
  x"1667",x"16D6",x"0000",x"0000",x"0000",x"0000",x"0008",x"0000",x"0002",x"1E4E",x"0000",x"0001",x"2F22",x"1E4F",x"0009",x"1D9D", -- 2EE0-2EEF
  x"0008",x"0000",x"0001",x"2F22",x"0000",x"0001",x"2F23",x"1C02",x"0008",x"3B0A",x"0001",x"0001",x"3B45",x"00BB",x"0001",x"FFFF", -- 2EF0-2EFF
  x"0000",x"0000",x"3000",x"3E97",x"3E97",x"0000",x"3AF4",x"1B5D",x"0010",x"3B00",x"3B00",x"3B0C",x"3B12",x"3B45",x"0000",x"1B5D", -- 2F00-2F0F
  x"0000",x"1B22",x"3000",x"3AF4",x"0020",x"0020",x"0000",x"2D00",x"0000",x"1282",x"0000",x"0000",x"0000",x"0000",x"1277",x"126D", -- 2F10-2F1F
  x"2F47",x"0000",x"0000",x"1C00",x"1C00",x"2000",x"0001",x"0000",x"1C00",x"1C00",x"0000",x"FFD9",x"0000",x"0000",x"2EE0",x"2EE2", -- 2F20-2F2F
  x"16D6",x"0000",x"0000",x"FFFF",x"FFFF",x"FFFF",x"FFFF",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2F30-2F3F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2F40-2F4F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2F50-2F5F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2F60-2F6F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2F70-2F7F
  x"2D00",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2F80-2F8F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2F90-2F9F
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2FA0-2FAF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2FB0-2FBF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000", -- 2FC0-2FCF
  x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0000",x"0301",x"0301",x"0301",x"0301",x"0301",x"0301",x"0301",x"0301", -- 2FD0-2FDF
  x"0301",x"0301",x"0301",x"0301",x"0446",x"02D5",x"02CD",x"02A3",x"02A3",x"02A3",x"02AB",x"02D6",x"02D6",x"0651",x"02D6",x"02D6", -- 2FE0-2FEF
  x"02D6",x"0624",x"02D6",x"02D6",x"031F",x"0345",x"01F6",x"029C",x"0812",x"FFFF",x"06EE",x"3B05",x"3B06",x"3B00",x"3B00",x"0738", -- 2FF0-2FFF
</DUMPZ></ok>
</sekt> 
 <ok></ok>
<sekt inhalt="noch ein wenig DEMO"> 
111111111111111 DUP * . <ok>123456789ABCDEFEDCBA987654321 </ok>
 <ok></ok>
( jetzt eine Matrix invertieren ) <ok></ok>
 <ok></ok>
DECIMAL <ok></ok>
 <ok></ok>
[ [ 1 1 ^ 1 2 ^ 1 3 ^ 1 4 ^ ] <ok></ok>
  [ 2 1 ^ 2 2 ^ 2 3 ^ 2 4 ^ ] <ok></ok>
  [ 3 1 ^ 3 2 ^ 3 3 ^ 3 4 ^ ] <ok></ok>
  [ 4 1 ^ 4 2 ^ 4 3 ^ 4 4 ^ ] <ok></ok>
  ]  <ok></ok>
DUP . <ok>[ [ 1 1 1 1 ] [ 2 4 8 16 ] [ 3 9 27 81 ] [ 4 16 64 256 ] ] </ok>
4 INVERTIEREN ( mat dim --> invmat nenner ) <ok></ok>
OVER . <ok>[ [ 1152 -864 384 -72 ] [ -1248 1368 -672 132 ] [ 432 -576 336 -72 ] [ -48 72 -48 12 ] ] </ok>
DUP . <ok>288 </ok>
( Ergebnis sollte sein: OVER .      ) <ok></ok>
(      [ [ 1152 -864 384 -72 ]      ) <ok></ok>
(        [ -1248 1368 -672 132 ]    ) <ok></ok>
(        [ 432 -576 336 -72 ]       ) <ok></ok>
(        [ -48 72 -48 12 ] ] ok     ) <ok></ok>
( und gemeinsamer Nenner: DUP . 288 ) <ok></ok>
 <ok></ok>
HEX HERE . BZEIG M? <ok>1B5D 3AF4 </ok>
</sekt> 
 <ok></ok>
</NACH_DEN_AXIOMEN> 
</INIT> 
