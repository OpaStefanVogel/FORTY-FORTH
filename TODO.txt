ok am Anfang doch gleich vivado ohne -mode tcl
ok noch diff-Verweis zu GitHub machen ok, perfekt als <diff></diff>
.. FLOAT die Stapeldiagramme
ok den epiphany - Fehler ok war eigener Fehler
ok ja und natürlich unbedingt Kleinerzeichen in &x...; oder ganz raus
.. für die ">" auch noch was anderes...
.. Ergebnis auch noch als Tabelle mit xml
.. nach P11 dann Vivado ausdrehen
o. eventuell PC, PD als Signal, ist weniger % aber läuft schlecht, such warum
nö oder RP mit als Variable nö, deutlich mehr %
ok alle CONV_UNSIGNED wieder in STD_LOGIC_VECTOR machen ok ist schon
nö ob 0-0FFF oder 1FFF, ebenso E000-EFFF oder FFFF nö eventuell bei P21
nö write-first oder UNCHANGED...nö, dann macht ISE 109%
ok vorherige Simulation bereits in Tcl-Console beenden ok
.. stapR und stapRAM besser unterscheiden
ok SP mod 4 mal versuchen
.. auch die librarys mal neu sondieren was nötig und was richtig
.. Verweis auf Zoomtasten
nö P01_top kann vorerst raus, 2D04 mit in testbench nö
ok SP_SIM kann wieder unter PD_SIM in den Ports
ok mach läuft wieder: Vergleiche nochmal mit S3:
   ok XON XOFF über EMIT OK
   ok paar NOOP's sind zusätzlich drin ok gar nicht erst übernommen
   ok das neue R&lt;... muss ich wohl aus S3 holen ok ja ist drin ok
   ok das war das wesentliche aus diff ok
ok Step ? noch füllen, ok ist jetzt Step 1
ok S3 Step_1 läuft, aber nochmal den Wechsel bis Step_10 überlegen.  ok
ok KEY_EMPFANGEN noch beschalten ok jetzt mit 0 D000 !
.. den benötigten Langsamtakt einfach an KEY(0) anschalten eventuell???
.. "neue vhdl-Variablen" in P05
nö Terminal: ganz raus und alles mit in Tcl-Console rein. nö geht danach nicht weiter
.. noch ein R00 mit nur I-O-Check oder auch nicht.
ok EMIT durchgängig in EMIT_BYTE umbenennen, nicht nur R10, ok
.. R09 SP runter auch in P20.vhd
nö doch das .wcfg File mit rein in Step_1 bis 10? nö, aber habe es geschafft. geht ok
ok xmlns= nochmal versuchen ok geht echt nur mit /xsl:attribute/
ok jetzt hab ich doch noch die compare-Funktion gefunden. Rein damit.
ok R00.DTD noch mit ok
ok Spartan3 startet mit je einem ? bei EMIT und KEY... ok super beide weg
   ok bei TXT mit TXT:='1' initialisieren
   ok bei RXD mit xcount:="FFFF0000" starten, wartet paar ms beim Start
ok R00.xsl mit Haltbarkeitsdatum versehen ok wunderbar, 2xmeta reicht
ok in RXD noch STRG umsetzen auf nach dbInput, aber wie? aha mit STRG_2
   ok dabei etliche Variablen in Signale umgeschrieben, 
   ok verbraucht weniger ok
.. na vielleicht doch ein kleiner Minifehler bei /section//div/ statt /span/
ok FFPINIT1.TXT und 2 gehören in master mit rein ok
ok alle .xml auch so anordnen, dass sie ohne xslt lesbar sind. ok
ok auch noch einen Weiterhupf ok svg-Kreis
o. README.md dann auch mit vorrichten
ok das .ucf File auch noch weng zurechtmachen. ok
ok colorisierte Ausgabe --- in FFINIT2.TXT mit reinmach erstmal ok
.. na inzwischen kann auch das pre-wrap allmählich ganz raus, naja es wird immer mal gebraucht
nö ProgRAM aus P20.vhd herausziehen damit unterschiedlich machbar??? nö lieber nicht
ok aber in DUMPZ < NOT statt = damit HERE 0 0 DUMPZ zu machen geht ok
.. was auch nicht geht, letztes <p> in R10 vor <Terminal_1> hinsetzen
ok Spartan3_Step_9 hat KEY drin, soll raus ok
ok dann wohl doch alle + * . in M+ M* M. umbenennen ok zumindestens vorübergehend
.. da in R00.DTD das ANY für valide nicht ausreicht, muss ich doch noch weng füllen.
ok bei SMUL und so díe DO LOOP noch in BEGIN UNTIL umschreiben, oje
   da lieber doch ein schnelles DO LOOP, ich hab ja schon RAMB
   ok habs geschafft, das ist die Wucht
nö das 1. TEST wieder nur als Variante und gleich mit FF starten nö
ok logfile auch mit xml!!! ok ist da, gut geworden
ok das fertige FFINIT1SMUL1+FFINIT2 muss sich auch recompilieren lassen
   das ist momentan noch eine knifflige Einschränkung, wie machen?
   ok auch wenn DEZ eingestellt geht alle schief
ok aber nochmal gründlich durchgucken ok isT jetzt gemacht mit screenlog.xml
.. Bahn ist frei für massives Umstapeln in SDIV und so.
.. ganz interessant wäre auch design summary mit zu Step_1 bis 11.
ok davor NEBENRECHNUNG noch
ok weiter dann mit MATRIX INVERTIEREN ok 
ok aber noch nicht mit O. ok jetzt doch
ok aber diesmal ohne Bruchrechnen!
ok auch mal die 25 MHz wieder anmach, wär nicht schlecht. ok perfekt
ok N" 4000" geht nicht richtig??? ok inzwischen doch
ok copy-of in ptable ist wohl nicht ganz korrekt... ok ist behoben
.. ganz ohne Variablen?
.. wenigstens die ab 0040 noch extra, damit readonly wieder mal geht, VARIABLE gleich bei CONSTANT mit
o. als nächstes mal SLX-ERGEBNIS, da war wo noch was,
   ok im Moment sowieso ERROR - Fehler Nummer 0369, da kann nix schiefgehen.
   .. SPEICHERFREI über SPEICHERENDE hinaus noch, das hatte ich doch schon
.. Step_0 nur für Spartan3 und nicht vivado!!! Das ist es.
o. noch was geht noch nicht wie es sollte: : DX 11111 ; ist erstmal 1234 ERROR.
ok KEY_INT zeigt noch auf Adresse 0008 statt neu 0018 ok jetzt 0018
ok /usr/share/doc/git-core/contrib/workdir/git-new-workdir FORTY-FORTH_gh-pages/ FORTY-FORTH_master
   wenn im zweiten Verzeichnis gleicher branch, 
   dann erfolgt keine automatische Aktualisierung!!! 
   nur branch weiter und dafür macht Index alles zurück
   deshalb vollkommen anderen branch versuchen
ok so, wenn jetzt "<" reinkommt, was muss da alles mit gleich geschehen
   ok jede Menge < wegen < 0< und <name> <text> umschreiben in LT 0LT ok
   ok automatisch jede Restzeile beginnend mit &lt; als Kommentar überlesen???
      oder echt jedes Wort ab < bis > überlesen???
      oder < als Zeilenende nehmen??? ja das
   ok wenn alles drin das neue INVERTIEREN hinzupacken ohne DO LOOP
   ok jetzt aber erstmal alles in einem INIT.xml, das sieht schon ganz gut aus
   o. und neues R11 dazu mit Vandermonde
   ok dann auch Log-File endlich, ja das wird jetzt ok
   ok aber ESCAPE verträgt sich überhaupt nicht mit xml, aha CSI nehmen wenn überhaupt
ok bei [ ] muss noch die Doppelverwendung raus. ok ist jetzt { } solange geht
ok die /diff/ ab Step_10 rausmach weil nicht funktioniert wegen zuviel Ausgabe.
ok vom Prinzip her gehören INIT.xml und screenlog.xml mit in Step_xx rein,
       das muss zusammen mit P20.vhd alles in sich stimmig sein
       deshalb nicht mit in gh.pages.
       ok ich mach jetzt so eine Konstellation in master.
ok da stimmt doch JR 8000 bei DIST > 800 nicht???? ok ja mehr ist gar nicht vorgesehen, jetzt REPLACE:
.. mal alle !!!aufsammel weng: SP, JR, ! @, DP max 1400, xml am Zeilenanfang,INTERRU, : H 4000 ;
   [ ] abwärts füllen,
ok uff CRBIT ist raus!!! ok
ok wieso ist IRAMADR ungleich JRAMADR ? aha wegen cp, da ist ganze Menge Vorlauf ok DUMPZ
ok mal schauen, ob ich absolut leere /ok/ok/ wegbekomme, vorallem bei /xml/ ok ja klar
nö einen extra Zweig für nicht mehr benötigte Funktionen, nö, extra sekt.
.. mal schauen ob anstelle x"0123" auch adr=>x"0123" geht in stapR
ok O. auch mit in . packen, ok das ist aber praktisch.
ok jetzt ist das Ausgabeformat umschaltbar zwischen ok und <ok></ok> für screenlog.0 
ok die ganzen offenen Klammern ( endlich mal schließen ... so ) 
ok wie das XMLBIT benennen? XBIT einfach nur. ok
ok DEZ heißt eigentlich DECIMAL in Step_11
ok durchaus auch andere Browser mal versuchen, html ganz ohne xmlns scheint was auszumachen, also html5.
ok testbench.vhd jetzt mit "56 89 * ." statt x"35",x"36"...
ok ich lasse FFINIT1NEU.txt und FFINIT2NEU.txt jetzt zusätzlich drin für neue Sachen, weniger --amend's
ok CSI C2 9B geht ja nur in screen, also alles wieder auf ESCAPE umstellen. ok
ok FFINIT1.txt muss die aktuelle auf dem Spartan3 gespeicherte Version halten!!! ok ist jetzt aktuell ok
.. NLT.
ok signal DEMO mit in process rein, erscheint dann nicht automatisch in waveform
ok Matrix kürzen ist jetzt auch drin ok
.. jetzt probier ich mal alle branches zusammen in master rein, wie weit das gutgeht..
   .. so richtig ist das noch nicht im Lot, gh-pages muss bezogen auf Step_11 gültig sein,
      also INIT.xml, screenlog.xml dürfen sich zwischen Step_11 und gh-pages nicht ändern
      eigentlich auch P20_FFR.vhd auch nicht, macht es im Moment aber ... 
ok an den Anfang von schreenlog noch einen Rückverweis ok
.. und die Umlaute in xml-Attributen da ging mal der Link nicht...
ok hab es ausprobiert mit GAP/FFP_GITHUB.txt, OBJK ist allgemein nicht nötig. 
ok A+0 kann bei abs(x)<4000 überspringen.
o. neue lokale Variablen ab 2F00 funktionieren
   ok dabei kommt es aber zu NB. FFFFFFF0 F F0  und sowas... ok ja da war LOCALADRESSE=2FEF eingestellt
      gut dass ich danach gesucht habe!!!
.. Variablennamen so dass eindeutige Suche
.. wenn ich einmal dabei bin,
   ok beim 40-57 nach 2F00 schaffen
   ok kann ich auch noch mit D000 bis D003 nach 2D00 bis 2D03 schaffen, neee 2D00 geht nicht...2800
      ok das auch in KEY_INT und so...
   ok beide serielle IO ttyS0 und ttyAMA0 parallelschalten.
   .. die git-Versionsnummer mit reinpacken, beim Copy&Paste mit zu machen
   ok E000-EFFF wieder nach 3000-3FFF schaffen
   ok TIB und IRAMADR auch
   ok dann ist C000-FFFF wieder komplett frei...
   .. und ich muss dann nur noch 0000-1FFF auf 0000-FFFF zusammenstauchen
   ok 2800 mit als CONSTANT KEYADR
   ok Prog auch von 58 auf 40 oder weniger verschieben, auf 28 momentan wegen 26=KEY_INT
   .. mal Readonly probieren...erster Versuch HERE . geht, 77 . gibt 0, weil NNUMBER 1400 nutzt
   .. Takt auch mal rauftun, da schau, geht mal schon [ 1 2 3 ] nicht
   ok so, dann mal wieder ein screenlog.xml
ok vielleicht auch mal 10-2F mit in Prog aufnehmen, das geistert so versteckt mit herum...ok siehe unten
.. beim neuen Zusammenfassen geht folgendes nicht:
     - Rxx.xml in ein Verzeichnis gh-branches weil dann theme-Aktualisierung nicht wirkt
   .. ein Verzeichnis branch_master sollte jedoch machbar sein...
      ja, und auch branch_Spartan3, und beide nur in gh hinein mergen.
      allerdings, wenn dann beispielsweise INIT.xsl versehentlich im gh-Branch INIT.xsl geändert wird, wird es im master-branch nicht bemerkt, und einfach master vorsetzen geht dann nicht, muss ein extra merge gemacht werden. also es ist noch nicht im Lot alles. 
     - auch geht nicht wenn P01.vhd in branch_master drin muss auch branch_master in Project_FFP hinein und dann geht Step1 nicht mehr... 
.. aktuelle Speicherübersicht mit hinein in screenlog.xml zaubern
ok den Programmbereich 0010-0027 mit in das Vokabular einbeziehen
   ok 12-17B mit in : KEY
   ok 18-1F auf 2F18-2F1F
   ok und 26 jetzt auf 12
   .. dazu eventuell KEYCODE2 von b 0 auf b -1 umstellen
.. das JR und JR0 heißt eigentlich BRANCH und ?BRANCH
.. in Step_8 ist noch E000-FFFF und D001-D003
.. und in Step_10 ist noch 0016 drin, 
   muss beides zusammen mit master geändert werden
.. bei der Gelegenheit auch stapR umbenennen in VarRAM oder so.
.. es sind eigentlich 4: InOutRAM, LocalRAM, VariablenRAM, ReturnRAM.
.. nanu, bei Step 5 beginnt da LED nicht eigentlich bei 3?
.. neben 5 auch in Step 6 PD FORTH-Notation und Stapeldiagramm, 
     noch woanders auch?
     ja, in 8 und 9, also neues Tabellenformat
.. ebenso für vhdl-Variablen
.. dazu kommen dann noch verwendete Doppelpunktdefinitionen.
.. ein kritischer Bereich ist von : ( bis MCODE + weil dadrin das langsame + drin ist.
     das ist gewissermaßen das, was als "weiterprogrammieren" zählt.
.. sowohl 77 als auch - zählt ERGEBNIS weiter, obwohl gar nicht nötig
o. ich hab mal eine Tabelle "Rechenoperationen bei verschiedenen Datentypen" angefangen in INIT.xml
.. INVERTIEREN.xml läuft noch nicht in Epiphany-Browser (wegen flex-direction: column;?)
ab 201510:
ok XOFF="0000" setzen innerhalb von DUMPZ
.. dann die memory-collision irgendwie umgehen
.. jetzt geht Step_12 los:
  ok erstmal EXXI wieder reaktivieren, etwas geändert (direkt in KEY, ohne LOOP)
  ok grob erstmal paar EXXI-Worte
    ok XY-PROC mit behelfsmäßigem ABSCHICKEN
    ok ABSCHICKEN ist jetzt auch soweit erstmal ok
    ok als nächstes dann die empfangenen Bytes auswerten ok AUSLES geht auch durch
  OK dann die neuen RAMB hinzu
    ok S3 ist wieder am impact, nach Beschreibung "Linux-Eingaben" hat es auf Anhieb funktioniert!!!
    ok die neuen PORTS sind auch angeschlossen und Adressen 2804,2805
    ok der erste RAMB RECHTS läuft jeppp!!!
    ok genauso auch RAMB UNTEN, läuft auch
    ok und 2 Fehler noch raus, B(0) statt B(1) und LINKS-MERK zusätzlich
  ok dann TESTFUERNEUES.txt entsprechend anpassen die Adressen
    ok cp TESTFUERNEUES.txt /dev/ttyAMA0 geht, deshalb gleich alles in INIT.txt und #(8) perfekt ok 
  OK und auch in XSIM simulieren
    ok für XSIM zuerst noch paar Variablen auf Anfangswerte '0' anstatt 'U' setzen
    ok dann der neue Input 0 0 XY-PROC
    ok und bei der Gelegenheit auch noch ein test_input_file.txt
  ok top.vhd neu verdrahtet auf 2x2 mit ausgiebiger Fehlersuche wieder
  ok x+1 und y+1 wird jetzt vorm abschicken gerechnet, dabei auch ERGEBNIS weitergesetzt
    und alles Neue zurück in FFINIT1.txt und FFINIT2.txt, HERE . 13B0
  OK als nächstes dann halt SEND-TO ( x y --> ) einfach mal losmach ok ist ABSCHICK geworden
    OK da brauch ich das SEND-TO selbst
      OK x y relativ, damit auch bei 1x1 alles getestet werden kann 
      OK vorübergehendes INTERPRET später wieder raus
      .. ggZ später rein ???
      OK 1x1 ist insofern extra, weil nicht R-Schreiben vor L-Lesen geht
        .. das ist aber insofern vielleicht eine Möglichkeit ganz ohne ABESCHICKT/ANGEKOMMEN
        OK vorerst muss ich das behelfsmäßig überbrücken
        OK und zwar so, nur bei IAM2Y>1 weiterschicken, sonst reicht nichts tun!!!
        ok ist recht überschaubar geworden bei IAM2Y @ 1 = IF ...
    ok wo wird ERGEBNIS soviel weitergesetzt? Sieht aus wie bei + * ok aber
      .. das muss ich unbedingt noch verbessern
    ok dann das AUSLES so modifizieren dass weiter solange x y nicht erreicht,
    ok sonst ein passendes AUSFUEHR, blos wie. ok momentan alles INTERPRET
    ok geht auch in 2x2
  o. weiter mit Matrix aufteilen...der erste Versuch geht jetzt
    ok die x y besser in j k umbenennen
    ok Ein A*x und ein Y*Z wird gebraucht, ok und jede Menge mehr davon bis [A*x-Y*Z]/gx
    ok jedoch reicht auch nur ein einziges (A*x+Y*Z)/gx ok nach dem alten IVERTIEREN gut ok
    ok ob das mknod verwendbar ist für xsim, tatsächlich mkfifo text_outputfile.txt geht
    ok xsim ist jetzt durch:
      doch lieber nicht mkfifo verwenden,
      immer nur 20 ms mit Pause, 
      default layout mit kleinstem Ausschnitt, 
      alle .wcfg disablen außer einer,
      auch die Fenster nicht verrucken
    ok Fehler gefunden, ich kann ja noch gar nicht das A als n abschicken...,versuch OBJ+0
      ok da könnte ich auch adr n bei n>0 als INTERPRET machen und bei n=0 als EXECUTE
      ok vor BEFESTIGE die verwendeten Eingänge rücksetzen
    ok OBJ_STRUCT_COPY isT jetzt komplett eingesetzt
      OK OBJ_STRUCT_COPY funktioniert zwar, aber nochmal bessser mach
      OK bissl aufpassen weil am Ende von nach ABSCHICK mit Absicht kein OBJ_STRUCT_COPY
      OK 1x1 läuft alles bestens, doch bei 2x2 ist 1 1 ... AC? ERROR: Zahlenspeicher voll
        OK und zwas vor dem ersten u: :u
        OK und auch wenn ich erste zwei AB wegnehme...
        OK jedoch nicht wenn nur drittes AB weg, anscheinend hängt das mit dem U-AB zusammen
        ok da fällt wieder auf, dass vor dem r: ein 0 1 steht und vor dem u: nur 1
          ok nee das muss so sein, weil das aufeinanderfolgende IF sind
        OK nix zu machen, egal wieviele dazwischen, immer beim zweiten U
        OK aha, aber kein Fehler wenn 77 statt OBJ!!!
        OK auch wenn gleich hintereinander 1 0 OBJ AB 1 0 OBJ AB
        OK keiner bei 1 0 77 AB 1 0 OBJ AB und auch nicht bei 1 0 OBJ AB 1 0 77 AB
        OK möglich wäre, wenn ERGEBNIS auf 2006 steht, wird von dort wegen A+0 oder so gelesen
          ok !!! ja klar, das wird auf alle Fälle wegen den führenden Nullen wegmachen gemacht
          ok Fehlerursache: bei A+0 wird von ERGEBNIS>2006 gelesen, um führende Nullen zu entfernen
          OK bei R-ABSCHICK könnte das deshalb durchgehen, weil vorher JK-PROC durchläuft
          OK eventuell dann auch noch mehrere solche Stellen.
          ok aber die erste Fehlerstelle ist jetzt weg, mit A+0=A*1 als Behelf
          ok und die zweite Fehlerstelle auch mit M- statt -
          ok doch mehr kann noch nicht gehen, da muss erst das richtige A+0 her.        
            ok 1- statt 1 M- wird vorher oft verwendet
            ok ein extra TRIM
            ok dann SLX->ERGEBNIS1 stark verkürzt
            ok in A+0 0369 ERROR vor ERGEBNIS! und das wiederum vor MOVE
            ok OBJ_STRUCT_COPY ohne >R
    ok damit funktioniert jetzt [Ax-YZ]/gx in 00 01 ab 147 ms 10 ab 156 ms 11 ab 166 ms
    ok weiter mit 2 ABSCHICKEN...dann 3 ABSCHICKEN...
      ok besser das erste gleich ausführen statt einmal im Kreis herum ok läuft jetzt auch
      ok aber der erste Versuch hat funktioniert ok
      ok 3 ABSCHICKEN soweit auch (COPY nicht vergessen!)
      ok und auch ganz durch, also alles ok
    .. dann jetzt Martix automatisch aufteilen

.. auf vivado -mode tcl umstellen ab Step_12 mit
    open_project /home/stefan/CLONE_GITHUB/FORTY-FORTH/project_FFP/project_FFP.xpr
    launch_simulation
    restart ; run 200 ms
    close_sim
.. fileinput auch committen
ok nicht allzuviel Testeingabe weil das XOFF EMIT nicht ausgewertet wird. 
ok danach noch xoff in testbench.vhd einbauen
.. Step_11 das erste ausgegebene Zeichen vor dem F... ist ein ???
.. Vergleiche = < > mit in die +-*/ Tabelle
OK Die Korrektur von RECHTS-BYTES @ ... in RECHTS-BYTES @ noch mit durchgängig compilieren
OK ERGEBNIS=1800 zeigt wieder, da ist noch eine unnötige Veränderung drin bei ohne große ganze Zahlen
ok ERROR Zahlenspeicher voll vor MOVE ausgeben

Spartan3 ist momentan programmiert auf 
  1180 8 DUMP 6EC3 BF57 659F 52A3 CF07 F694 EB89 00E0
  13B0 8 DUMP EF1A 385E 927D C9D0 15AF 1205 2FB8 6E55 8F10 5425  .mcs: 6b81bfb0be499781a56608cb775a6646edf76657
solange S3 nicht weiter programmiert ist, ein Skript zur Erstellung von ... aus ..:
###!!! wenn es ab hier losgehen soll wegen neuer AXIOME, dann zuerst RESET drücken auf dem Spartan3
###!!! ebenso wenn Reset gedrückt auf dem Spartan3, dann muss es hier losgehen:
cp FFINIT1.txt /dev/ttyAMA0
echo 'HERE 100 M+ DPMERK ! 3400 BANF !' >/dev/ttyAMA0
cp FFINIT1NEU.txt /dev/ttyAMA0
cp FFINIT1NEU.txt /dev/ttyAMA0
echo '020 DPMERK ! 3000 BANF !' >/dev/ttyAMA0
cp FFINIT1NEU.txt /dev/ttyAMA0
### wenn einmal bis hierher durchgeĺaufen, dann reicht auch ab jetzt
cp FFINIT1NEU.txt /dev/ttyAMA0
cp FFINIT2NEU.txt /dev/ttyAMA0 # für Step_12 jetzt

#(8)wenn alles ok, dann neues screenlog.xml: FFINIT1NEU und FFINIT2NEU in INIT.xml packen,
echo '-1 XBIT !' >/dev/ttyAMA0
rm ../../../screenlog.0
#screenlog starten ^AH
cp INIT.xml /dev/ttyAMA0
#screenlog anhalten ^AH
echo '0 XBIT !' >/dev/ttyAMA0
#dann screenlog.0 nach screenlog.xml kopieren
cp ../../../screenlog.0 screenlog.xml
#dann commit
#dann erst neues P20_FFP.vhd, dort auch SHA von screenlog.xml einsetzen
#und mit Vivado und Spartan3 testen
#dann auch P20_FFP.vhd commit
#dann Spartan3 .mcs neu programmieren, mit SHA von P20
#und dann FFINIT1NEU in FFINIT.txt packen.

#cp TESTFUERNEUES.TXT /dev/ttyAMA0
