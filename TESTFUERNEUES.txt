HEX ( ist noch als einzigstes zur√ºckzustellen zum Programmieren )
0 0 JK-PROC HERE .

: AB " DUP . " 1 ABSCHICKEN ;
: AC ' OBJ_STRUCT_COPY 0 1 ABSCHICKEN ;
DECIMAL
( A
0 0 [ [ 1  1 ] [ 3 1 ^ 3 3 ^ ] ] AB
0 1 [ [ 1  1 ] [ 3 2 ^ 3 4 ^ ] ] AC
1 0 [ [ 2 1 ^ 2 3 ^ ] [ 4 1 ^ 4 3 ^ ] ] AC
1 1 [ [ 2 2 ^ 2 4 ^ ] [ 4 2 ^ 4 4 ^ ] ] AC
( gx
1 0 1 " DROP 0 1 1 0 0 2 ABSCHICKEN " 3 ABSCHICKEN
( Schritt 1 ------)
( x
1 0 1 " 0 1 ROT 0 0 2 ABSCHICKEN " 3 ABSCHICKEN
( Y
0 1 [ 2 3 ] " OBJ_STRUCT_COPY DUP . " 2 ABSCHICKEN
1 0 [ 2 4 ] AC
1 1 [ 2 4 ] AC
( Z
0 0 [ 0 1 ] " [A*x-Y*Z]/gx OVER . DUP . " 1 ABSCHICKEN
0 1 [ 1 1 ] " [A*x-Y*Z]/gx OVER . DUP . OVER 0 1 ROT ' . 0 1 ABSCHICKEN" 1 ABSC$
1 1 [ 1 1 ] " [A*x-Y*Z]/gx OVER . DUP . OVER 1 1 ROT ' . 0 1 ABSCHICKEN" 1 ABSC$
1 0 [ 0 1 ] " [A*x-Y*Z]/gx OVER . DUP . OVER 1 0 ROT ' . 0 1 ABSCHICKEN" 1 ABSC$
( Schritt 2 ------)
( x
1 0 2 " 0 1 ROT 0 0 2 ABSCHICKEN " 3 ABSCHICKEN
( Y
0 1 [ -1 6 ] " OBJ_STRUCT_COPY DUP ." 2 ABSCHICKEN
1 0 [ 3 12 ] AC
1 1 [ 3 12 ] AC
( Z
0 0 [ 2  6 ] " [A*x-Y*Z]/gx OVER . DUP . " 1 ABSCHICKEN
0 1 [ 1 14 ] " [A*x-Y*Z]/gx OVER . DUP . OVER 0 1 ROT ' . 0 1 ABSCHICKEN" 1 ABS$
1 1 [ 1 14 ] " [A*x-Y*Z]/gx OVER . DUP . OVER 1 1 ROT ' . 0 1 ABSCHICKEN" 1 ABS$
1 0 [ 2  6 ] " [A*x-Y*Z]/gx OVER . DUP . OVER 1 0 ROT ' . 0 1 ABSCHICKEN" 1 ABS$
( Schritt 3 -----)
( x
1 0 12 " 0 1 ROT 0 0 2 ABSCHICKEN " 3 ABSCHICKEN
( Y
0 1 [  4 14 ] " OBJ_STRUCT_COPY DUP ." 2 ABSCHICKEN
1 1 [ -6 48 ] AC
1 0 [ -6 48 ] AC
( Z
0 0 [ -6 10 ] " [A*x-Y*Z]/gx OVER . DUP . " 1 ABSCHICKEN
0 1 [  6 72 ] " [A*x-Y*Z]/gx OVER . DUP . OVER 0 1 ROT ' . 0 1 ABSCHICKEN" 1 AB$
1 1 [  6 72 ] " [A*x-Y*Z]/gx OVER . DUP . OVER 1 1 ROT ' . 0 1 ABSCHICKEN" 1 AB$
1 0 [ -6 10 ] " [A*x-Y*Z]/gx OVER . DUP . OVER 1 0 ROT ' . 0 1 ABSCHICKEN" 1 AB$
( Schritt 4 -----)
( x
1 0 288 " 0 1 ROT 0 0 2 ABSCHICKEN " 3 ABSCHICKEN
( Y
0 1 [ -72 -72 ] " OBJ_STRUCT_COPY DUP ." 2 ABSCHICKEN
1 1 [ 132 300 ] AC
1 0 [ 132 300 ] AC
( Z
0 0 [  48  48 ] " [A*x-Y*Z]/gx OVER . DUP . " 1 ABSCHICKEN
0 1 [ -72 276 ] " [A*x-Y*Z]/gx OVER . DUP . OVER 0 1 ROT ' . 0 1 ABSCHICKEN" 1 $
1 1 [ -72 276 ] " [A*x-Y*Z]/gx OVER . DUP . OVER 1 1 ROT ' . 0 1 ABSCHICKEN" 1 $
1 0 [  48  48 ] " [A*x-Y*Z]/gx OVER . DUP . OVER 1 0 ROT ' . 0 1 ABSCHICKEN" 1 $

------------was herauskommen soll:
DECIMAL
[ [ 1   1   1    1 ]
  [ 2   4   8   16 ]
  [ 3   9  27   81 ]
  [ 4  16  64  256 ] ] 1 SP ?
1 [ 2 2 3 4 ] [ 0 1 1 1 ] [A*x-Y*Z]/gx OVER . DUP . SP ?
2 [ -1 3 6 12 ] [ 2 1 6 14 ] [A*x-Y*Z]/gx OVER . DUP . SP ?
12 [ 4 -6 14 48 ] [ -6 6 10 72 ] [A*x-Y*Z]/gx OVER . DUP . SP ?
288 [ -72 132 -72 300 ] [ 48 -72 48 276 ] [A*x-Y*Z]/gx OVER . DUP . SP ?
HEX ERGEBNIS ?

ergibt

1 [ 2 2 3 4 ] [ 0 1 1 1 ] [A*x-Y*Z]/gx OVER . DUP . SP ? [ [ 1 -1 -1 -1 ] [ 2 2 6 14 ] [ 3 6 24 78 ] [ 4 12 60 252 ] ] 1 140 ok
2 [ -1 3 6 12 ] [ 2 1 6 14 ] [A*x-Y*Z]/gx OVER . DUP . SP ? [ [ 4 -1 4 12 ] [ -2 1 -6 -14 ] [ -6 6 12 72 ] [ -16 12 48 336 ] ] 2 140 ok
12 [ 4 -6 14 48 ] [ -6 6 10 72 ] [A*x-Y*Z]/gx OVER . DUP . SP ? [ [ 36 -18 4 -72 ] [ -30 24 -6 132 ] [ 6 -6 2 -72 ] [ 48 -72 48 288 ] ] 12 140 ok
288 [ -72 132 -72 300 ] [ 48 -72 48 276 ] [A*x-Y*Z]/gx OVER . DUP . SP ? [ [ 1152 -864 384 -72 ] [ -1248 1368 -672 132 ] [ 432 -576 336 -72 ] [ -48 72 -48 12 ] ] 288 140 ok
