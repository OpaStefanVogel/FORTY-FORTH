
type ram_type is array (C_RAM_DEPTH-1 downto 0) of std_logic_vector (C_RAM_WIDTH-1 downto 0);          -- 2D Array Declaration for RAM signal
signal <ram_data> : std_logic_vector(C_RAM_WIDTH-1 downto 0) ;

-- The folowing code either initializes the memory values to a specified file or to all zeros to match hardware
function initramfromfile (ramfilename : in string) return ram_type is
file ramfile	: text is in ramfilename;
variable ramfileline : line;
variable ram_name	: ram_type;
variable bitvec : bit_vector(C_RAM_WIDTH-1 downto 0);
begin
    for i in ram_type'range loop
        readline (ramfile, ramfileline);
        read (ramfileline, bitvec);
        ram_name(i) := to_stdlogicvector(bitvec);
    end loop;
    return ram_name;
end function;

-- Define RAM
signal <ram_name> : ram_type := initramfromfile(C_INIT_FILE);

################
type ram_type is array (2 downto 0) of std_logic_vector (7 downto 0);          -- 2D Array Declaration for RAM signal

-- The folowing code either initializes the memory values to a specified file or to all zeros to match hardware
function initramfromfile (ramfilename : in string) return ram_type is
file ramfile	: text is in ramfilename;
variable ramfileline : line;
variable ram_name	: ram_type;
variable bitvec : bit_vector(7 downto 0);
begin
    for i in ram_type'range loop
        readline (ramfile, ramfileline);
      --  read (ramfileline, bitvec);
        write (output, "#######################################");
        ram_name(i) := to_stdlogicvector(bitvec);
    end loop;
    return ram_name;
end function;

signal TESTRAM : ram_type := initramfromfile("RAM.txt");



: ZNEU= ( adr1 n1 adr2 n2 --> r )
  ROT OVER = NOT IF DROP DROP DROP 0 ELSE ( adr1 adr2 n2 )
    0 BEGIN 2DUP M- WHILE ( adr1 adr2 n2 0 )
      2SWAP ( n2 0 adr1 adr2 )
      OVER C@ OVER C@ M- IF 2DROP 2DROP 0 0 0 0 ELSE
        1+ SWAP 1+ SWAP 2SWAP 1+ ( adr1+1 adr2+1 n2 1 )
        END_IF
      REPEAT 2SWAP 2DROP ( n2 n2 )
    DROP IF -1 ELSE 0 END_IF ( flag )
    END_IF ;
    
" ABC" " ABCD" ZNEU= .
" ABC" " BCD" ZNEU= .
" ABC" " ABC" ZNEU= .
" ABC" " ABCD" Z= .
" ABC" " BCD" Z= .
" ABC" " ABC" Z= .
( REPLACE: Z= ZNEU= ;
RETURN ' ZNEU= 04 000 MLIT OR ' Z= 2!

: FINDNEU ( adr n --> lfa r )
  0 ( heisst noch nicht gefunden )
  LFA @ ( adr1 n1 0 lfa )
  SMUDGEBIT @ IF DUP @ M+ END_IF
  BEGIN
    2SWAP ( 0 lfa adr1 n1 )
    2OVER SWAP DROP 1+ DUP @ ( 0 lfa adr1 n1 nfa adr2 )
    SWAP 1+ @ ( 0 lfa adr1 n1 adr2 n2 )
    ( 2DUP CR B. 2DUP TYPE
    ( BEGIN 2DUP M+ 1 M- C@ 0= WHILE 1 M- REPEAT ( ??? momentan nicht )
    2OVER Z= IF 2SWAP SWAP 0= SWAP 2SWAP END_IF ( heisst gefunden )
    2SWAP ( adr1 n1 0 lfa )
    OVER 0= OVER @ 0= NOT AND 
    OVER DUP @ M+ LFA @ = NOT AND WHILE ( wegen 2xladen )
      DUP @ M+ REPEAT  ( adr1 n1 0 lfa' )
  SWAP 0= IF DROP DROP 0 0 END_IF
  SWAP ROT DROP
  ( OVER LFA @ SWAP LT IF M." *" OVER M. LFA @ M. END_IF ( vref wenn gebraucht )
  ;

" DUP" FINDNEU B.
" DEPP" FINDNEU B.
" 77" FINDNEU B.
" DUP" FIND B.
" DEPP" FIND B.
" 77" FIND B.
( REPLACE: FIND FINDNEU ;
: T RETURN ' FINDNEU= 04 000 MLIT OR ' FIND 2! ;


: LCFA ( lfa --> cfa ) 3 M+ ;

: INTERPRETNEU ( adr n --> ... )
  4 LOCAL
  IN1 @ L0 ! IN2 @ L1 @ IN3 @ L2 ! IN4 @ L3 !
  OVER M+ IN4 !
  DUP IN1 ! DUP IN2 ! IN3 !
  BEGIN
  ( ... qstack? Stapelpruefen )
  20 WORD ( adrw nw )
  DUP WHILE
    2DUP FIND ( adrw nw lfa r )
    DUP IF ( gefunden )
      2SWAP 2DROP DROP LCFA EXECUTE
      ELSE ( nicht gefunden )
        2DROP
        2DUP NUMBER IF ( keine Zahl )
          2DROP DROP
          3 ERROR
         ( DROP BNUMBER
         ( DUP IF DUP IN2 ! END_IF
         ( IF 3 ERROR END_IF
         ( STAT @ IF SWAP LIT, LIT, END_IF
          ELSE ( eine Zahl )
            ROT DROP SWAP DROP
            STAT @ IF LIT, END_IF
            END_IF
        END_IF
    REPEAT 2DROP
  L3 @ IN4 ! L2 @ IN3 ! L1 @ IN2 ! L0 @ IN1 !
  END_LOCAL
  ;

( " 77 88 * . " INTERPRETNEU
( : REPLACE: INTERPRET INTERPRETNEU ;

HEX ( ist noch als einzigstes zurückzustellen zum Programmieren )
0 0 JK-PROC HERE . ( zählt die angeschlossenen Prozessoren )

AUSGANGSMATRIX_NULLSETZEN
1 0 0 A(j,k)!   1 0 1 A(j,k)!   1 0 2 A(j,k)!    1 0 3 A(j,k)!  
2 0 0 A(j,k)!   4 0 1 A(j,k)!   8 0 2 A(j,k)!   16 0 3 A(j,k)!  
3 0 0 A(j,k)!   9 0 1 A(j,k)!  27 0 2 A(j,k)!   81 0 3 A(j,k)!  
4 0 0 A(j,k)!  16 0 1 A(j,k)!  64 0 2 A(j,k)!  256 0 3 A(j,k)!  

DECIMAL
( A vier Teilmatrizen zu den vier Prozessoren schicken )
0 0 [ [ 1  1 ] [ 3 1 ^ 3 3 ^ ] ] AB
0 1 [ [ 1  1 ] [ 3 2 ^ 3 4 ^ ] ] AC
1 0 [ [ 2 1 ^ 2 3 ^ ] [ 4 1 ^ 4 3 ^ ] ] AC
1 1 [ [ 2 2 ^ 2 4 ^ ] [ 4 2 ^ 4 4 ^ ] ] AC
( gx dann gemeinsamer Nenner 1 überall )
1 0 1 " 0 1 ROT 0 0 2 ABSCHICKEN " 3 ABSCHICKEN
( GINV jetzt das neue Invertieren )
4 GINV
ABWART
OVER . DUP .

------------was herauskommen soll:
DECIMAL
[ [ 1   1   1    1 ]
  [ 2   4   8   16 ]
  [ 3   9  27   81 ]
  [ 4  16  64  256 ] ] 1 SP ?
1 [ 2 2 3 4 ] [ 0 1 1 1 ] [A*x-Y*Z]/gx OVER . DUP . SP ?
2 [ -1 3 6 12 ] [ 2 1 6 14 ] [A*x-Y*Z]/gx OVER . DUP . SP ?
12 [ 4 -6 14 48 ] [ -6 6 10 72 ] [A*x-Y*Z]/gx OVER . DUP . SP ?
288 [ -72 132 -72 300 ] [ 48 -72 48 276 ] [A*x-Y*Z]/gx OVER . DUP . SP ?
HEX ERGEBNIS ?

ergibt

1 [ 2 2 3 4 ] [ 0 1 1 1 ] [A*x-Y*Z]/gx OVER . DUP . SP ? [ [ 1 -1 -1 -1 ] [ 2 2 6 14 ] [ 3 6 24 78 ] [ 4 12 60 252 ] ] 1 140 ok
2 [ -1 3 6 12 ] [ 2 1 6 14 ] [A*x-Y*Z]/gx OVER . DUP . SP ? [ [ 4 -1 4 12 ] [ -2 1 -6 -14 ] [ -6 6 12 72 ] [ -16 12 48 336 ] ] 2 140 ok
12 [ 4 -6 14 48 ] [ -6 6 10 72 ] [A*x-Y*Z]/gx OVER . DUP . SP ? [ [ 36 -18 4 -72 ] [ -30 24 -6 132 ] [ 6 -6 2 -72 ] [ 48 -72 48 288 ] ] 12 140 ok
288 [ -72 132 -72 300 ] [ 48 -72 48 276 ] [A*x-Y*Z]/gx OVER . DUP . SP ? [ [ 1152 -864 384 -72 ] [ -1248 1368 -672 132 ] [ 432 -576 336 -72 ] [ -48 72 -48 12 ] ] 288 140 ok

N:=64;
A:=[];
for i in [1..N] do
  A[i]:=[];
  for j in [1..N] do
    A[i][j]:=i^j;
    od;
  od;
B:=A^-1;;time;
B[1][1];

