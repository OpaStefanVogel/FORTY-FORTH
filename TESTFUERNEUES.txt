HEX ( ist noch als einzigstes zur√ºckzustellen zum Programmieren )
0 0 XY-PROC HERE .

: AB " DUP ." 1 ABSCHICKEN ;
: ABZ " [A*x-Y*Z]/gx OVER . DUP ." 1 ABSCHICKEN ;

DECIMAL
( gx
0 0 1 AB
0 1 1 AB
1 0 1 AB
1 1 1 AB
( A
0 0 [ [ 1  1 ] [  3  27 ] ] AB
0 1 [ [ 1  1 ] [  9  81 ] ] AB
1 0 [ [ 2  8 ] [  4  64 ] ] AB
1 1 [ [ 4 16 ] [ 16 256 ] ] AB
( x
0 0 1 AB
0 1 1 AB
1 0 1 AB
1 1 1 AB
( Y
0 0 [ 2 3 ] AB
0 1 [ 2 3 ] AB
1 0 [ 2 4 ] AB
1 1 [ 2 4 ] AB
( Z
0 0 [ 0 1 ] ABZ
0 1 [ 1 1 ] ABZ
1 0 [ 0 1 ] ABZ
1 1 [ 1 1 ] ABZ

[ [ 1   1   1    1 ]
  [ 2   4   8   16 ]
  [ 3   9  27   81 ]
  [ 4  16  64  256 ] ]
1 A*x DUP .
[ 2 2 3 4 ] [ 0 1 1 1 ] Y*Z DUP .
-1 A*x OVER . DUP .
A+A . SP ?

DECIMAL
[ [ 1   1   1    1 ]
  [ 2   4   8   16 ]
  [ 3   9  27   81 ]
  [ 4  16  64  256 ] ] 1 SP ?
1 [ 2 2 3 4 ] [ 0 1 1 1 ] [A*x-Y*Z]/gx OVER . DUP . SP ?
2 [ -1 3 6 12 ] [ 2 1 6 14 ] [A*x-Y*Z]/gx OVER . DUP . SP ?
12 [ 4 -6 14 48 ] [ -6 6 10 72 ] [A*x-Y*Z]/gx OVER . DUP . SP ?
288 [ -72 132 -72 300 ] [ 48 -72 48 276 ] [A*x-Y*Z]/gx OVER . DUP . SP ?


<u>[ [ 1   1   1    1 ]</u> ok
<u>  [ 2   4   8   16 ]</u> ok
<u>  [ 3   9  27   81 ]</u> ok
<u>  [ 4  16  64  256 ] ] </u> ok

---
: TEST
  0 0 XY-PROC HERE .
  2 2 77 " DUP + ." 1 ABSCHICKEN
  ;

TEST
