HEX ( ist noch als einzigstes zurÃ¼ckzustellen zum Programmieren )

0 0 XY-PROC HERE .

( gx
0 0 1 " DUP ." 1 ABSCHICKEN
0 1 1 " DUP ." 1 ABSCHICKEN
1 0 1 " DUP ." 1 ABSCHICKEN
1 1 1 " DUP ." 1 ABSCHICKEN
0 0 [ [ 1  1 ] [  3  27 ] ] " DUP ." 1 ABSCHICKEN
0 1 [ [ 1  1 ] [  9  81 ] ] " DUP ." 1 ABSCHICKEN
1 0 [ [ 2  8 ] [  4  64 ] ] " DUP ." 1 ABSCHICKEN
1 1 [ [ 4 16 ] [ 16 256 ] ] " DUP ." 1 ABSCHICKEN

: SIZE ( obj --> n )
  ZERLEG SWAP DROP 3FFF AND ;

: V+0 ( vektor --> vektor+0 )
  0 >R
  DUP SIZE BEGIN ( vektor i
    1 - G ( vektor i b
    OVER R> SWAP ROT H >R
    DUP 0= UNTIL ( vektor" 0
  2DROP ( vektor"
  R>
  ;

: V*x ( vektor x --> vektor*x )
  >R
  DUP SIZE BEGIN ( vektor i
    1 - G ( vektor i b
    R * ( vektor i b'
    OVER >R H R> ( vektor' i
    DUP 0= UNTIL ( vektor" 0
  DROP ( vektor"
  R> DROP
  ;

: A*x ( matrix x --> matrix*x )
  >R
  DUP SIZE BEGIN ( matrix i
    1 - G ( vektor i b
    R V*x ( vektor i b'
    OVER >R H R> ( vektor' i
    DUP 0= UNTIL ( vektor" 0
  DROP ( vektor"
  R> DROP
  ;

: Y*Z ( vektor vektor --> vektor*vektor^T )
  >R
  DUP SIZE BEGIN ( matrix i
    1 - G CR DUP . ( vektor i b
    R V+0 DUP . SWAP V*x DUP . ( vektor i b'
    OVER >R H  DUP . R> ( vektor' i
    DUP 0= UNTIL ( vektor" 0
  DROP ( vektor"
  R> DROP
  ;

: V+V ( vektor1 vektor2 --> vektor1+vektor2 )
  DUP SIZE BEGIN ( vektor1 vektor2 i
    1 - >R
    OVER R L OVER R L + R SWAP H
    R> DUP 0= UNTIL DROP
  SWAP DROP ( vektor"
  ;

: A+A ( vektor1 vektor2 --> vektor1+vektor2 )
  DUP SIZE BEGIN ( vektor1 vektor2 i
    1 - >R
    OVER R L OVER R L V+V R SWAP H
    R> DUP 0= UNTIL DROP
  SWAP DROP ( vektor"
  ;


[ 7 8 9 ] 2 V*x .

[ [ 2 3 4 ] [ 5 6 7 ] [ 8 9 1 ] ] 2 A*x .

[ 7 8 9 ] [ 1 2 3 ] Y*Z .

[ 1 2 3 ] [ 5 6 7 ] V+V . SP ?

[ [ 2 3 4 ] [ 5 6 7 ] [ 8 9 1 ] ] [ [ 1 1 1 ] [ -1 -1 -1 ] [ -3 -3 -3 ] ] A+A . SP ?

( A*x
0 0 1 " SWAP OVER A*x DUP ." 1 ABSCHICKEN
0 1 1 " SWAP OVER A*x DUP ." 1 ABSCHICKEN
1 0 1 " SWAP OVER A*x DUP ." 1 ABSCHICKEN
1 1 1 " SWAP OVER A*x DUP ." 1 ABSCHICKEN
( Y
0 0 [ 2 3 ] " DUP ." 1 ABSCHICKEN
0 1 [ 2 3 ] " DUP ." 1 ABSCHICKEN
1 0 [ 2 4 ] " DUP ." 1 ABSCHICKEN
1 1 [ 2 4 ] " DUP ." 1 ABSCHICKEN
( Y*Z
0 0 [ 0 1 ] " Y*Z DUP ." 1 ABSCHICKEN
0 1 [ 1 1 ] " Y*Z DUP ." 1 ABSCHICKEN
1 0 [ 0 1 ] " Y*Z DUP ." 1 ABSCHICKEN
1 1 [ 1 1 ] " Y*Z DUP ." 1 ABSCHICKEN
( A/gx
0 0 1 " SWAP OVER A*x DUP ." 1 ABSCHICKEN
0 1 1 " SWAP OVER A*x DUP ." 1 ABSCHICKEN
1 0 1 " SWAP OVER A*x DUP ." 1 ABSCHICKEN
1 1 1 " SWAP OVER A*x DUP ." 1 ABSCHICKEN



<u>[ [ 1   1   1    1 ]</u> ok
<u>  [ 2   4   8   16 ]</u> ok
<u>  [ 3   9  27   81 ]</u> ok
<u>  [ 4  16  64  256 ] ] </u> ok

---
: TEST
  0 0 XY-PROC HERE .
  2 2 77 " DUP + ." 1 ABSCHICKEN
  ;

TEST
