HEX ( ist noch als einzigstes zur√ºckzustellen zum Programmieren )

0 0 XY-PROC HERE .

( gx
0 0 1 " DUP ." 1 ABSCHICKEN
0 1 1 " DUP ." 1 ABSCHICKEN
1 0 1 " DUP ." 1 ABSCHICKEN
1 1 1 " DUP ." 1 ABSCHICKEN
0 0 [ [ 1  1 ] [  3  27 ] ] " DUP ." 1 ABSCHICKEN
0 1 [ [ 1  1 ] [  9  81 ] ] " DUP ." 1 ABSCHICKEN
1 0 [ [ 2  8 ] [  4  64 ] ] " DUP ." 1 ABSCHICKEN
1 1 [ [ 4 16 ] [ 16 256 ] ] " DUP ." 1 ABSCHICKEN

( A*x
0 0 1 " SWAP OVER A*x DUP ." 1 ABSCHICKEN
0 1 1 " SWAP OVER A*x DUP ." 1 ABSCHICKEN
1 0 1 " SWAP OVER A*x DUP ." 1 ABSCHICKEN
1 1 1 " SWAP OVER A*x DUP ." 1 ABSCHICKEN
( Y
0 0 [ 2 3 ] " DUP ." 1 ABSCHICKEN
0 1 [ 2 3 ] " DUP ." 1 ABSCHICKEN
1 0 [ 2 4 ] " DUP ." 1 ABSCHICKEN
1 1 [ 2 4 ] " DUP ." 1 ABSCHICKEN
( Y*Z
0 0 [ 0 1 ] " Y*Z DUP ." 1 ABSCHICKEN
0 1 [ 1 1 ] " Y*Z DUP ." 1 ABSCHICKEN
1 0 [ 0 1 ] " Y*Z DUP ." 1 ABSCHICKEN
1 1 [ 1 1 ] " Y*Z DUP ." 1 ABSCHICKEN
( A/gx
0 0 1 " SWAP OVER A*x DUP ." 1 ABSCHICKEN
0 1 1 " SWAP OVER A*x DUP ." 1 ABSCHICKEN
1 0 1 " SWAP OVER A*x DUP ." 1 ABSCHICKEN
1 1 1 " SWAP OVER A*x DUP ." 1 ABSCHICKEN



<u>[ [ 1   1   1    1 ]</u> ok
<u>  [ 2   4   8   16 ]</u> ok
<u>  [ 3   9  27   81 ]</u> ok
<u>  [ 4  16  64  256 ] ] </u> ok

---
: TEST
  0 0 XY-PROC HERE .
  2 2 77 " DUP + ." 1 ABSCHICKEN
  ;

TEST
