HEX ( ist noch als einzigstes zurÃ¼ckzustellen zum Programmieren )
REPLACE: R-ABSCHICKEN ( x y Z adr n op --> )
  BEGIN RECHTS-ANGEKOMMEN @ RECHTS-MERK @ = UNTIL
  RECHTS-BYTES !      ( x y Z adr n
  SWAP OVER RECHTS-BYTES 5 + SWAP MOVE ( x y Z n
  RECHTS-BYTES 4 + !
  RECHTS-BYTES 3 + !
  2DUP
  RECHTS-BYTES 2 + !
  RECHTS-BYTES 1 + !
  RECHTS-ANGEKOMMEN @ NOT 1 AND RECHTS-MERK !
  RECHTS-ANGEKOMMEN @ NOT RECHTS-ABGESCHICKT !
  CR SWAP . . ." r-abgeschickt"
  ;
REPLACE: U-ABSCHICKEN ( x y Z adr n op --> )
  BEGIN UNTEN-ANGEKOMMEN @ UNTEN-MERK @ = UNTIL
  UNTEN-BYTES !
  SWAP OVER UNTEN-BYTES 5 + SWAP MOVE ( x y Z n
  UNTEN-BYTES 4 + !
  UNTEN-BYTES 3 + !
  2DUP
  UNTEN-BYTES 2 + !
  UNTEN-BYTES 1 + !
  UNTEN-ANGEKOMMEN @ NOT 1 AND UNTEN-MERK !
  UNTEN-ANGEKOMMEN @ NOT UNTEN-ABGESCHICKT !
  CR SWAP . . ." u-abgeschickt"
  ;
REPLACE: XY-PROC ( x y --> )
  CR ." XY " OVER . DUP .
  OVER IAM2X @ LT OVER IAM2Y @ LT AND IF -1 IAM1X ! -1 IAM1Y ! -1 IAM2X ! -1 IAM2Y ! END_IF
  OVER IAM1X @ = NOT IAM2X @ -1 = AND IF 
    IAM1X @ -1 = IF OVER IAM1X ! ELSE OVER IAM2X ! END_IF
    CR IAM1X ? IAM1Y ? IAM2X ? IAM2Y ?
    OVER 1+ OVER 0 0 0 0 U-ABSCHICKEN
    END_IF
  DUP IAM1Y @ = NOT IAM2Y @ -1 = AND IF 
    IAM1Y @ -1 = IF DUP IAM1Y ! ELSE DUP IAM2Y ! END_IF
    CR IAM1X ? IAM1Y ? IAM2X ? IAM2Y ?
    OVER OVER 1+ 0 0 0 0 R-ABSCHICKEN
    END_IF
  2DROP ;

ENTFERNE L-AUSLES
: L-AUSLES
  LINKS-MERK @ LINKS-ABGESCHICKT @ = NOT IF
    LINKS-BYTES @ 0= IF 
      LINKS-BYTES 1+ DUP @ SWAP 1+ @ 
      LINKS-ABGESCHICKT @ LINKS-MERK !
      LINKS-ABGESCHICKT @ LINKS-ANGEKOMMEN !
      XY-PROC
      END_IF
    LINKS-BYTES @ 1 = IF
      LINKS-BYTES 2 + @ 1 - IF ( bei y>0 weiterschicken )
        LINKS-BYTES 1+ @
        LINKS-BYTES 2 + @ 1 -
        CR ." nach rechts schick mit: " 2DUP B.
        LINKS-BYTES 3 + @
        LINKS-BYTES 5 +
        LINKS-BYTES 4 + @ 1 
        IAM2Y @ 1 = IF
          LINKS-ABGESCHICKT @ LINKS-MERK !
          LINKS-ABGESCHICKT @ LINKS-ANGEKOMMEN !
          R-ABSCHICKEN
          ELSE
            R-ABSCHICKEN
            LINKS-ABGESCHICKT @ LINKS-MERK !
            LINKS-ABGESCHICKT @ LINKS-ANGEKOMMEN !
            END_IF
        ELSE ( endlich angekommen )
          LINKS-BYTES 3 + @
          LINKS-BYTES 5 +
          LINKS-BYTES 4 + @
          CR ." angekommen zu op=1: " ROT . TYPE
          LINKS-ABGESCHICKT @ LINKS-MERK !
          LINKS-ABGESCHICKT @ LINKS-ANGEKOMMEN !
          END_IF
      END_IF
    END_IF
  ;
BEFESTIGE L-AUSLES

ENTFERNE O-AUSLES
: O-AUSLES
  OBEN-MERK @ OBEN-ABGESCHICKT @ = NOT IF
    OBEN-BYTES @ 0= IF 
      OBEN-BYTES 1+ DUP @ SWAP 1+ @ 
      OBEN-ABGESCHICKT @ OBEN-MERK !
      OBEN-ABGESCHICKT @ OBEN-ANGEKOMMEN !
      XY-PROC
      END_IF
    OBEN-BYTES @ 1 = IF
      OBEN-BYTES 1+ @ 1 - IF ( bei y>0 weiterschicken )
        OBEN-BYTES 1+ @ 1 -
        OBEN-BYTES 2 + @
        CR ." nach unten schick mit: " 2DUP B.
        OBEN-BYTES 3 + @
        OBEN-BYTES 5 +
        OBEN-BYTES 4 + @ 1 
        IAM2X @ 1 = IF
          OBEN-ABGESCHICKT @ OBEN-MERK !
          OBEN-ABGESCHICKT @ OBEN-ANGEKOMMEN !
          U-ABSCHICKEN
          ELSE
            U-ABSCHICKEN
            OBEN-ABGESCHICKT @ OBEN-MERK !
            OBEN-ABGESCHICKT @ OBEN-ANGEKOMMEN !
            END_IF
        ELSE ( endlich in x angekommen, jetzt dasselbe noch y )
          OBEN-BYTES 2 + @ 1 - IF ( bei y>0 weiterschicken )
            OBEN-BYTES 1+ @ 1 -
            OBEN-BYTES 2 + @
            CR ." nach rechts umlenken mit: " 2DUP B.
            OBEN-BYTES 3 + @
            OBEN-BYTES 5 +
            OBEN-BYTES 4 + @ 1 
            R-ABSCHICKEN
            OBEN-ABGESCHICKT @ OBEN-MERK !
            OBEN-ABGESCHICKT @ OBEN-ANGEKOMMEN !
            ELSE ( schon in x y angekommen )
              OBEN-BYTES 3 + @
              OBEN-BYTES 5 +
              OBEN-BYTES 4 + @
              CR ." angekommen zu op=1: " ROT . TYPE
              OBEN-ABGESCHICKT @ OBEN-MERK !
              OBEN-ABGESCHICKT @ OBEN-ANGEKOMMEN !
              END_IF
          END_IF
      END_IF
    END_IF
  ;
BEFESTIGE O-AUSLES


0 0 XY-PROC HERE .

5 9 7 " HALLO" 1 R-ABSCHICKEN

4 8 7 " HALLO2" 1 U-ABSCHICKEN

bei 2x2 kam raus:

FORTY-FORTH

ok
0 0 XY-PROC 
XY 0 0 
0 -1 -1 -1 
1 0 u-abgeschickt
0 0 -1 -1 
0 1 r-abgeschicktok

XY 2 0 
0 0 2 -1 
3 0 u-abgeschickt77 77 * 
XY 0 2 
0 0 2 2 
0 3 r-abgeschickt
XY 4 0 . 3751 ok

XY 0 4 4 8 7 " HALLO2" 1 U-ABSCHICKEN 
4 8 u-abgeschicktok
 ok

nach unten schick mit: 2 8 
2 8 u-abgeschickt
nach rechts umlenken mit: 0 8 
0 8 r-abgeschickt
nach rechts schick mit: 0 6 
0 6 r-abgeschickt
nach rechts schick mit: 0 4 
0 4 r-abgeschickt
nach rechts schick mit: 0 2 
0 2 r-abgeschickt
angekommen zu op=1: 7 HALLO2
 
