<?xml version="1.0" encoding="utf-8" ?>
<?xml-stylesheet type="text/xsl" href="R00.xsl" ?>
<!DOCTYPE los SYSTEM "R00.dtd">
<los>

<step>Step 8</step>

<pr>Alles Multi

Mehrere Kopien des Forth-Prozessors werden zusammengeschaltet, um gemeinsam eine Matrix zu invertieren. Die Kopien werden ebenfalls in Matrixform verbunden, so dass jeder Prozessor einen linken, rechten, oberen und unteren Nachbar hat. Am linken Rand zählt als linker Nachbar der Prozessor vom gegenüberliegenden rechten Rand in der gleichen Zeile. Entsprechendes gilt auch für die anderen Ränder.

<object data="SVG_zu_R12.svg" width="550" height="260" />

Der Datenaustausch erfolgt über die Speicheradressen 2000H…27FFH und 2804H…2807H. <i>Weil sich die übrigen Speicheradressen geändert haben, nochmal eine komplette Übersicht:</i>

Adresse   Datenbreite   Verwendung
<i>0000-1FFF     16        Programm- und Datenspeicher</i>
2000…23FF     16        nach rechts schreiben, von links lesen
2400…27FF     16        nach unten schreiben, von oben lesen
<i>2801          16        Lesen und Setzen von SP
2802          16        Lesen und Setzen von RP
2803          16        Lesen und Setzen von PC</i>
2804           1        RECHTS-ABGESCHICKT, LINKS-ABGESCHICKT
2805           1        RECHTS-ANGEKOMMEN, LINKS-ANGEKOMMEN
2806           1        UNTEN-ABGESCHICKT, OBEN-ABGESCHICKT
2807           1        UNTEN-ANGEKOMMEN, OBEN-ANGEKOMMEN
<i>2C00-2FFF     16        Rückkehrstapel und Daten
3000-3FFF      8        Textspeicher (nur Bytes)</i>

Jeder FORTH-Prozessor kann im Adressbereich 2000H-23FFH Daten zum rechts daneben befindlichen Prozessor schicken und mit 

RECHTS-ANGEKOMMEN @ NOT RECHTS-ABGESCHICKT !

mitteilen, dass die zu übertragenden Daten komplett in den Adressbereich 2000H-23FFH gespeichert wurden. Der Prozessor rechts davon erkennt an LINKS-ABGESCHICKT ungleich dem zuletzt eingestellten LINKS-ANGEKOMMEN, dass neue Daten vorliegen und signalisiert nach dem Auslesen und Auswerten mit 

LINKS-ABGESCHICKT @ LINKS-ANGEKOMMEN !

dass das Auslesen beendet ist und die nächsten Daten gesendet werden können. Entsprechendes gilt auch im Adressbereich 2400H-27FFH für die Übertragungsrichtung von oben nach unten.

Zu beachten ist, was in 2000H-27FFH gespeichert wird, kann (um unnötige Verbindungen zu vermeiden) nicht vom gleichen Prozessor zurückgelesen werden sondern nur vom Prozessor rechts oder unterhalb davon. Dieser wiederum kann diese Daten nur von 2000H-27FFH auslesen und nicht durch Zurückspeichern vorher nochmal verändern. Entsprechende Schreibversuche gehen weiter an den nächsten rechten oder unteren Prozessor.
</pr>

<p>Im Beispielprogramm wird wieder die gleiche Matrix invertiert wie in Step_11. Die Matrixein- und -ausgabe erfolgt vorerst noch behelfsmäßig durch vorheriges manuelle Aufteilen der Matrix auf die einzelnen Prozessoren und wieder Zusammensetzen nach dem Invertieren.

Neu sind das Eingabefile <i>test_input.txt</i> und das Ausgabefile <i>test_output.txt</i>. Dadurch ist es möglich, <i>vivado</i> auch ohne GUI im Modus <i>vivado -mode tcl</i> laufen zu lassen und das Ergebnis aus dem Ausgabefile zu lesen.</p>
 
<Terminal_1>
  <li> git checkout Step_12 </li>
  <li> git diff <diff>Step_12...Step_11</diff> </li>
  </Terminal_1>

<Tcl_Console>
  <li> close_sim -force -quiet </li>
  <li> launch_simulation </li>
  <li> run 200 ms </li>
  </Tcl_Console>

<DEMO>FORTY-FORTH

ok
<u>HEX ( zum Programmieren )</u>
<u>0 0 JK-PROC HERE .</u>

<u>: AB " 4 N ! 2 NJ ! 2 NK ! DUP . " 1 ABSCHICKEN ;</u>
<u>: AC " 4 N ! 2 NJ ! 2 NK ! OBJ_STRUCT_COPY " 1 ABSCHICKEN ;</u>
<u>REPLACE: ADEBUG CR CR ." ADEBUG " OVER . DUP . ;</u>

<u>DECIMAL</u>
<u>( A )</u>
<u>0 0 [ [ 1  1 ] [ 3 1 ^ 3 3 ^ ] ] AB</u>
<u>0 1 [ [ 1  1 ] [ 3 2 ^ 3 4 ^ ] ] AC</u>
<u>1 0 [ [ 2 1 ^ 2 3 ^ ] [ 4 1 ^ 4 3 ^ ] ] AC</u>
<u>1 1 [ [ 2 2 ^ 2 4 ^ ] [ 4 2 ^ 4 4 ^ ] ] AC</u>
<u>( gx )</u>
<u>1 0 1 " 0 1 ROT 0 0 2 ABSCHICKEN " 3 ABSCHICKEN</u>
<u>( bei GINV nur noch</u>
<u>4 GINV</u>
<u>ABWART</u>
<u>OVER . DUP .</u>
</DEMO>

<svg_path schnips="1 1 -3 -100"/>
</los>
