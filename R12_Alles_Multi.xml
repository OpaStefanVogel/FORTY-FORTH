<?xml version="1.0" encoding="utf-8" ?>
<?xml-stylesheet type="text/xsl" href="R00.xsl" ?>
<!DOCTYPE los SYSTEM "R00.dtd">
<los>

<step>Step 8</step>

<pr>Alles Multi

Mehrere Kopien des Forth-Prozessors werden zusammengeschaltet, um gemeinsam eine Matrix zu invertieren. Die Kopien werden ebenfalls in einer Matrixanordnung verbunden, also jeder Prozessor hat einen linken, rechten, oberen und unteren Nachbar. Am linken Rand zählt als linker Nachbar der Prozessor vom gegenüberliegenden rechten Rand in der gleichen Zeile. Entsprechendes gilt auch für die anderen Ränder.

<object id="SVG_1" data="SVG_zu_R12.svg" width="550" height="260" />

Der Datenaustausch erfolgt über die Speicheradressen 2000H…27FFH und 2804H…2807H. <i>Weil sich die übrigen Speicheradressen geändert haben, nochmal eine komplette Übersicht:</i>

Adresse   Datenbreite   Verwendung
<i>0000…1FFFH    16        Programm- und Datenspeicher</i>
2000…23FFH    16        nach rechts schreiben, von links lesen
2400…27FFH    16        nach unten schreiben, von oben lesen
<i>2801H         16        Lesen und Setzen von SP
2802H         16        Lesen und Setzen von RP
2803H         16        Lesen und Setzen von PC</i>
2804H          1        RECHTS-ABGESCHICKT, LINKS-ABGESCHICKT
2805H          1        RECHTS-ANGEKOMMEN, LINKS-ANGEKOMMEN
2806H          1        UNTEN-ABGESCHICKT, OBEN-ABGESCHICKT
2807H          1        UNTEN-ANGEKOMMEN, OBEN-ANGEKOMMEN
<i>2C00…2FFFH    16        Rückkehrstapel und Daten
3000…3FFFH     8        Textspeicher (nur Bytes)</i>

Jeder FORTH-Prozessor kann im Adressbereich 2000H…23FFH Daten zum rechts daneben befindlichen Prozessor schicken und mit 

RECHTS-ANGEKOMMEN @ NOT RECHTS-ABGESCHICKT !

mitteilen, dass die zu übertragenden Daten komplett in den Adressbereich 2000H…23FFH gespeichert wurden. Der Prozessor rechts davon erkennt an LINKS-ABGESCHICKT ungleich dem zuletzt eingestellten LINKS-ANGEKOMMEN, dass neue Daten vorliegen und signalisiert nach dem Auslesen und Auswerten mit 

LINKS-ABGESCHICKT @ LINKS-ANGEKOMMEN !

dass das Auslesen beendet ist und die nächsten Daten gesendet werden können. Entsprechendes gilt auch im Adressbereich 2400H-27FFH für die Übertragungsrichtung von oben nach unten.

Zu beachten ist, was in 2000H…27FFH gespeichert wird, kann (um unnötige Verbindungen zu vermeiden) nicht vom gleichen Prozessor zurückgelesen werden sondern nur vom Prozessor rechts oder unterhalb davon. Dieser wiederum kann diese Daten nur von 2000H…27FFH auslesen und nicht durch Zurückspeichern vorher nochmal verändern. Entsprechende Schreibversuche gehen weiter an den nächsten rechten oder unteren Prozessor.
</pr>

<p>Im Beispielprogramm wird wieder die gleiche Matrix invertiert wie in Step_11. Die Matrixein- und -ausgabe erfolgt vorerst noch behelfsmäßig durch vorheriges manuelle Aufteilen der Matrix auf die einzelnen Prozessoren und wieder Zusammensetzen nach dem Invertieren. Es geht erstmal nur darum, dass das mit dem Invertieren funktioniert.</p>

<p>Neu bei der Simulation sind das Eingabefile <i>test_input.txt</i> und das Ausgabefile <i>test_output.txt</i> sowie zusätzliche Ausgabe in der TCL Console. Dadurch ist es möglich, <i>vivado</i> auch ohne GUI im Modus <i>vivado -mode tcl</i> laufen zu lassen.</p>
 
<Terminal_1>
  <li> git checkout Step_12 </li>
  <li> git diff <diff>Step_12...Step_11</diff> </li>
  </Terminal_1>

<Tcl_Console>
  <li> close_sim -force -quiet </li>
  <li> launch_simulation </li>
  <li> run 200 ms </li>
  </Tcl_Console>

<div>Eingabe: <a href="test_input_file.txt">test_input_file.txt</a></div> 
Ausgabe: <a href="test_output_file.txt">test_output_file.txt</a>
<DEMO>FORTY-FORTH

ok
<u>HEX</u> ok
<u>0 0 JK-PROC</u> ok
<u>HERE . BZEIG M?</u> 1947 3A2D ok
<u>0 2D04 !</u> ok
<u>0 ADBIT !</u> ok
 ok
<u>DECIMAL</u> ok
<u>4 VANDERMONDEMATRIX 1</u> ok
<u>OVER 0 L .</u> [ 1 1 1 1 ] ok
<u>OVER 1 L .</u> [ 2 4 8 16 ] ok
<u>OVER 2 L .</u> [ 3 9 27 81 ] ok
<u>OVER 3 L .</u> [ 4 16 64 256 ] ok
 ok
<u>INVERTIERE_SCHNELL</u> ok
 ok
<u>0 0 B(j,k)@ .</u> 1152 ok
<u>0 1 B(j,k)@ .</u> -864 ok
<u>0 2 B(j,k)@ .</u> 384 ok
<u>0 3 B(j,k)@ .</u> -72 ok
<u>1 0 B(j,k)@ .</u> -1248 ok
<u>1 1 B(j,k)@ .</u> 1368 ok
<u>1 2 B(j,k)@ .</u> -672 ok
<u>1 3 B(j,k)@ .</u> 132 ok
<u>2 0 B(j,k)@ .</u> 432 ok
<u>2 1 B(j,k)@ .</u> -576 ok
<u>2 2 B(j,k)@ .</u> 336 ok
<u>2 3 B(j,k)@ .</u> -72 ok
<u>3 0 B(j,k)@ .</u> -48 ok
<u>3 1 B(j,k)@ .</u> 72 ok
<u>3 2 B(j,k)@ .</u> -48 ok
<u>3 3 B(j,k)@ .</u> 12 ok
</DEMO>

<svg_path schnips="1 1 -3 -100"/>
</los>
