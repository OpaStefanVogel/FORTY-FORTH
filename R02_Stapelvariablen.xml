<?xml version="1.0" encoding="utf-8" ?>
<?xml-stylesheet type="text/xsl" href="R00.xsl" ?>
<!--geht leider nicht mit Raspberry-midori-->
<los><step>2</step>Benennung der Stapeleinträge

Für die obersten vier Stapeleinträge verwende ich extra Variablenbezeichnungen A, B, C, D, sowie eine Zählvariable T mit folgender Zuordnung

A := R(SP-1),
B := R(SP-2),
C := R(SP-3),
D := R(SP-4).

Genauso werden sie vor jeder Rechenoperation aus R gelesen. Nach Ausführung der Rechenoperation werden allerdings nur die T obersten in R zurückgespeichert. Beispielsweise entsteht bei der Addition ein einzelner neuer Stapeleintrag A:=A+B, dabei wird der Stapelzeiger SP um 1 vermindert und dann A an die neue Position R(SP-1) zurückgespeichert, also T:=1. Weil SP um 1 vermindert wurde, darf man B, C, D nicht automatisch wieder in R(SP-2), R(SP-3), R(SP-4) zurückspeichern, von woher sie ursprünglich gelesen wurden.

Addition:
A := A + B;
SP:= SP - 1;
T := 1;
R(SP-1) := A; war vorher B
R(SP-2) bleibt unverändert C
R(SP-3) bleibt unverändert D
R(SP-4) bleibt unverändert

Variable T und das Zurückspeichern sind jetzt zusätzlich hinzugekommen. Der Vorteil soll sein, dass man bei der Programmierung der einzelnen Rechenoperationen nicht immer wieder R(SP-1), R(SP-2)... schreiben muss und diese Indexberechnungen eventuell sogar wiederholt compiliert werden. Außerdem wird R(SP) mit einer zusätzliche Funktion P(SP) umgeschrieben in R(P(SP)), damit an den Array-Grenzen kein Indexüberlauf etwa durch SP-1=-1 entsteht. Nun nochmal ein Programmlauf, dabei werden nach <code>git diff</code> die einzelnen Unterschiede im Quelltext mit ausgegeben. Am Ergebnis sollte sich aber nichts wesentliches ändern. Um wenigstens einen äußerlichen Unterschied zu sehen, habe ich den <i>Startwert der Zählschleife auf 77 gesetzt und die Schrittweite von 1 auf -1</i>. Außerdem werden jetzt die lokalen Variablen PC, PD, SP, A, B, C und D zu Beginn jedes Taktes CLK als Signale PC_SIM... bis in das top-Modul durchgereicht und in der Vivado - Simulation zusätzlich mit ausgegeben, das macht den Programmablauf transparenter.  

Sofern das Startterminal aus Step_1 noch zugänglich ist:
 
<term>git checkout Step_2
git diff Step_1 Step_2 # mit Q beenden</term>und wenn die graphische Oberfläche von Vivado ebenfalls noch läuft:

<tterm>close_sim -force -quiet
launch_simulation
run 1000 ns
</tterm><favicon/> gleiches Ergebnis wie in Step_1, jedoch ab LEDS=76 abwärts gezählt.

ab Zeitpunkt in ns     Wert von LEDS
     0                  UU
   130                  76
   250                  75
   370                  74
   490                  73
   610                  72
   730                  71
   850                  70
   970                  6F

<weiter /><a href="R03_StapelRAM.xml">R03 Stapel in RAM speichern</a>.

</los>
